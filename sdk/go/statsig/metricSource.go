// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package statsig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/statsig-io/pulumi-statsig/sdk/go/statsig/internal"
)

// This resource allows you to configure metric sources for your Statsig project.
//
// To learn more about metric sources, see [Metric Source Documentation](https://docs.statsig.com/statsig-warehouse-native/configuration/metric-sources)
//
// To learn more about the API powering this resource, see [Metrics API Documentation](https://docs.statsig.com/console-api/metrics)
//
// > Note: This resource is only available for [Warehouse Native](https://docs.statsig.com/statsig-warehouse-native/introduction/) projects
type MetricSource struct {
	pulumi.CustomResourceState

	// Optional array defining mappings for custom fields using specific formulas.
	CustomFieldMappings MetricSourceCustomFieldMappingArrayOutput `pulumi:"customFieldMappings"`
	// An optional description for the metric source, providing context and details about its purpose and usage.
	Description pulumi.StringOutput `pulumi:"description"`
	// Array defining the mapping between Statsig unit IDs and their respective source columns.
	IdTypeMappings MetricSourceIdTypeMappingArrayOutput `pulumi:"idTypeMappings"`
	// Specifies if the source can only be edited via the Console API.
	IsReadOnly pulumi.BoolOutput `pulumi:"isReadOnly"`
	// The name of the metric source, serving as its primary identifier.
	Name pulumi.StringOutput `pulumi:"name"`
	// Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner MetricSourceOwnerOutput `pulumi:"owner"`
	// The type of source, indicating whether it is a database table or a custom query.
	SourceType pulumi.StringOutput `pulumi:"sourceType"`
	// The SQL query or statement used to extract data from the metric source.
	Sql pulumi.StringOutput `pulumi:"sql"`
	// The name of the database table if the source type is "table".
	TableName pulumi.StringOutput `pulumi:"tableName"`
	// Optional array of tags to categorize the metric source, facilitating easier organization and retrieval.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Indicates whether the timestamp should be treated as a day-level granularity.
	TimestampAsDay pulumi.BoolOutput `pulumi:"timestampAsDay"`
	// The name of the column containing timestamp data for the metric source.
	TimestampColumn pulumi.StringOutput `pulumi:"timestampColumn"`
}

// NewMetricSource registers a new resource with the given unique name, arguments, and options.
func NewMetricSource(ctx *pulumi.Context,
	name string, args *MetricSourceArgs, opts ...pulumi.ResourceOption) (*MetricSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdTypeMappings == nil {
		return nil, errors.New("invalid value for required argument 'IdTypeMappings'")
	}
	if args.Sql == nil {
		return nil, errors.New("invalid value for required argument 'Sql'")
	}
	if args.TimestampColumn == nil {
		return nil, errors.New("invalid value for required argument 'TimestampColumn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetricSource
	err := ctx.RegisterResource("statsig:index/metricSource:MetricSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricSource gets an existing MetricSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricSourceState, opts ...pulumi.ResourceOption) (*MetricSource, error) {
	var resource MetricSource
	err := ctx.ReadResource("statsig:index/metricSource:MetricSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricSource resources.
type metricSourceState struct {
	// Optional array defining mappings for custom fields using specific formulas.
	CustomFieldMappings []MetricSourceCustomFieldMapping `pulumi:"customFieldMappings"`
	// An optional description for the metric source, providing context and details about its purpose and usage.
	Description *string `pulumi:"description"`
	// Array defining the mapping between Statsig unit IDs and their respective source columns.
	IdTypeMappings []MetricSourceIdTypeMapping `pulumi:"idTypeMappings"`
	// Specifies if the source can only be edited via the Console API.
	IsReadOnly *bool `pulumi:"isReadOnly"`
	// The name of the metric source, serving as its primary identifier.
	Name *string `pulumi:"name"`
	// Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner *MetricSourceOwner `pulumi:"owner"`
	// The type of source, indicating whether it is a database table or a custom query.
	SourceType *string `pulumi:"sourceType"`
	// The SQL query or statement used to extract data from the metric source.
	Sql *string `pulumi:"sql"`
	// The name of the database table if the source type is "table".
	TableName *string `pulumi:"tableName"`
	// Optional array of tags to categorize the metric source, facilitating easier organization and retrieval.
	Tags []string `pulumi:"tags"`
	// Indicates whether the timestamp should be treated as a day-level granularity.
	TimestampAsDay *bool `pulumi:"timestampAsDay"`
	// The name of the column containing timestamp data for the metric source.
	TimestampColumn *string `pulumi:"timestampColumn"`
}

type MetricSourceState struct {
	// Optional array defining mappings for custom fields using specific formulas.
	CustomFieldMappings MetricSourceCustomFieldMappingArrayInput
	// An optional description for the metric source, providing context and details about its purpose and usage.
	Description pulumi.StringPtrInput
	// Array defining the mapping between Statsig unit IDs and their respective source columns.
	IdTypeMappings MetricSourceIdTypeMappingArrayInput
	// Specifies if the source can only be edited via the Console API.
	IsReadOnly pulumi.BoolPtrInput
	// The name of the metric source, serving as its primary identifier.
	Name pulumi.StringPtrInput
	// Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner MetricSourceOwnerPtrInput
	// The type of source, indicating whether it is a database table or a custom query.
	SourceType pulumi.StringPtrInput
	// The SQL query or statement used to extract data from the metric source.
	Sql pulumi.StringPtrInput
	// The name of the database table if the source type is "table".
	TableName pulumi.StringPtrInput
	// Optional array of tags to categorize the metric source, facilitating easier organization and retrieval.
	Tags pulumi.StringArrayInput
	// Indicates whether the timestamp should be treated as a day-level granularity.
	TimestampAsDay pulumi.BoolPtrInput
	// The name of the column containing timestamp data for the metric source.
	TimestampColumn pulumi.StringPtrInput
}

func (MetricSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricSourceState)(nil)).Elem()
}

type metricSourceArgs struct {
	// Optional array defining mappings for custom fields using specific formulas.
	CustomFieldMappings []MetricSourceCustomFieldMapping `pulumi:"customFieldMappings"`
	// An optional description for the metric source, providing context and details about its purpose and usage.
	Description *string `pulumi:"description"`
	// Array defining the mapping between Statsig unit IDs and their respective source columns.
	IdTypeMappings []MetricSourceIdTypeMapping `pulumi:"idTypeMappings"`
	// Specifies if the source can only be edited via the Console API.
	IsReadOnly *bool `pulumi:"isReadOnly"`
	// The name of the metric source, serving as its primary identifier.
	Name *string `pulumi:"name"`
	// Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner *MetricSourceOwner `pulumi:"owner"`
	// The type of source, indicating whether it is a database table or a custom query.
	SourceType *string `pulumi:"sourceType"`
	// The SQL query or statement used to extract data from the metric source.
	Sql string `pulumi:"sql"`
	// The name of the database table if the source type is "table".
	TableName *string `pulumi:"tableName"`
	// Optional array of tags to categorize the metric source, facilitating easier organization and retrieval.
	Tags []string `pulumi:"tags"`
	// Indicates whether the timestamp should be treated as a day-level granularity.
	TimestampAsDay *bool `pulumi:"timestampAsDay"`
	// The name of the column containing timestamp data for the metric source.
	TimestampColumn string `pulumi:"timestampColumn"`
}

// The set of arguments for constructing a MetricSource resource.
type MetricSourceArgs struct {
	// Optional array defining mappings for custom fields using specific formulas.
	CustomFieldMappings MetricSourceCustomFieldMappingArrayInput
	// An optional description for the metric source, providing context and details about its purpose and usage.
	Description pulumi.StringPtrInput
	// Array defining the mapping between Statsig unit IDs and their respective source columns.
	IdTypeMappings MetricSourceIdTypeMappingArrayInput
	// Specifies if the source can only be edited via the Console API.
	IsReadOnly pulumi.BoolPtrInput
	// The name of the metric source, serving as its primary identifier.
	Name pulumi.StringPtrInput
	// Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner MetricSourceOwnerPtrInput
	// The type of source, indicating whether it is a database table or a custom query.
	SourceType pulumi.StringPtrInput
	// The SQL query or statement used to extract data from the metric source.
	Sql pulumi.StringInput
	// The name of the database table if the source type is "table".
	TableName pulumi.StringPtrInput
	// Optional array of tags to categorize the metric source, facilitating easier organization and retrieval.
	Tags pulumi.StringArrayInput
	// Indicates whether the timestamp should be treated as a day-level granularity.
	TimestampAsDay pulumi.BoolPtrInput
	// The name of the column containing timestamp data for the metric source.
	TimestampColumn pulumi.StringInput
}

func (MetricSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricSourceArgs)(nil)).Elem()
}

type MetricSourceInput interface {
	pulumi.Input

	ToMetricSourceOutput() MetricSourceOutput
	ToMetricSourceOutputWithContext(ctx context.Context) MetricSourceOutput
}

func (*MetricSource) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricSource)(nil)).Elem()
}

func (i *MetricSource) ToMetricSourceOutput() MetricSourceOutput {
	return i.ToMetricSourceOutputWithContext(context.Background())
}

func (i *MetricSource) ToMetricSourceOutputWithContext(ctx context.Context) MetricSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricSourceOutput)
}

// MetricSourceArrayInput is an input type that accepts MetricSourceArray and MetricSourceArrayOutput values.
// You can construct a concrete instance of `MetricSourceArrayInput` via:
//
//	MetricSourceArray{ MetricSourceArgs{...} }
type MetricSourceArrayInput interface {
	pulumi.Input

	ToMetricSourceArrayOutput() MetricSourceArrayOutput
	ToMetricSourceArrayOutputWithContext(context.Context) MetricSourceArrayOutput
}

type MetricSourceArray []MetricSourceInput

func (MetricSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricSource)(nil)).Elem()
}

func (i MetricSourceArray) ToMetricSourceArrayOutput() MetricSourceArrayOutput {
	return i.ToMetricSourceArrayOutputWithContext(context.Background())
}

func (i MetricSourceArray) ToMetricSourceArrayOutputWithContext(ctx context.Context) MetricSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricSourceArrayOutput)
}

// MetricSourceMapInput is an input type that accepts MetricSourceMap and MetricSourceMapOutput values.
// You can construct a concrete instance of `MetricSourceMapInput` via:
//
//	MetricSourceMap{ "key": MetricSourceArgs{...} }
type MetricSourceMapInput interface {
	pulumi.Input

	ToMetricSourceMapOutput() MetricSourceMapOutput
	ToMetricSourceMapOutputWithContext(context.Context) MetricSourceMapOutput
}

type MetricSourceMap map[string]MetricSourceInput

func (MetricSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricSource)(nil)).Elem()
}

func (i MetricSourceMap) ToMetricSourceMapOutput() MetricSourceMapOutput {
	return i.ToMetricSourceMapOutputWithContext(context.Background())
}

func (i MetricSourceMap) ToMetricSourceMapOutputWithContext(ctx context.Context) MetricSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricSourceMapOutput)
}

type MetricSourceOutput struct{ *pulumi.OutputState }

func (MetricSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricSource)(nil)).Elem()
}

func (o MetricSourceOutput) ToMetricSourceOutput() MetricSourceOutput {
	return o
}

func (o MetricSourceOutput) ToMetricSourceOutputWithContext(ctx context.Context) MetricSourceOutput {
	return o
}

// Optional array defining mappings for custom fields using specific formulas.
func (o MetricSourceOutput) CustomFieldMappings() MetricSourceCustomFieldMappingArrayOutput {
	return o.ApplyT(func(v *MetricSource) MetricSourceCustomFieldMappingArrayOutput { return v.CustomFieldMappings }).(MetricSourceCustomFieldMappingArrayOutput)
}

// An optional description for the metric source, providing context and details about its purpose and usage.
func (o MetricSourceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricSource) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Array defining the mapping between Statsig unit IDs and their respective source columns.
func (o MetricSourceOutput) IdTypeMappings() MetricSourceIdTypeMappingArrayOutput {
	return o.ApplyT(func(v *MetricSource) MetricSourceIdTypeMappingArrayOutput { return v.IdTypeMappings }).(MetricSourceIdTypeMappingArrayOutput)
}

// Specifies if the source can only be edited via the Console API.
func (o MetricSourceOutput) IsReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *MetricSource) pulumi.BoolOutput { return v.IsReadOnly }).(pulumi.BoolOutput)
}

// The name of the metric source, serving as its primary identifier.
func (o MetricSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
func (o MetricSourceOutput) Owner() MetricSourceOwnerOutput {
	return o.ApplyT(func(v *MetricSource) MetricSourceOwnerOutput { return v.Owner }).(MetricSourceOwnerOutput)
}

// The type of source, indicating whether it is a database table or a custom query.
func (o MetricSourceOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricSource) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

// The SQL query or statement used to extract data from the metric source.
func (o MetricSourceOutput) Sql() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricSource) pulumi.StringOutput { return v.Sql }).(pulumi.StringOutput)
}

// The name of the database table if the source type is "table".
func (o MetricSourceOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricSource) pulumi.StringOutput { return v.TableName }).(pulumi.StringOutput)
}

// Optional array of tags to categorize the metric source, facilitating easier organization and retrieval.
func (o MetricSourceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetricSource) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Indicates whether the timestamp should be treated as a day-level granularity.
func (o MetricSourceOutput) TimestampAsDay() pulumi.BoolOutput {
	return o.ApplyT(func(v *MetricSource) pulumi.BoolOutput { return v.TimestampAsDay }).(pulumi.BoolOutput)
}

// The name of the column containing timestamp data for the metric source.
func (o MetricSourceOutput) TimestampColumn() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricSource) pulumi.StringOutput { return v.TimestampColumn }).(pulumi.StringOutput)
}

type MetricSourceArrayOutput struct{ *pulumi.OutputState }

func (MetricSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricSource)(nil)).Elem()
}

func (o MetricSourceArrayOutput) ToMetricSourceArrayOutput() MetricSourceArrayOutput {
	return o
}

func (o MetricSourceArrayOutput) ToMetricSourceArrayOutputWithContext(ctx context.Context) MetricSourceArrayOutput {
	return o
}

func (o MetricSourceArrayOutput) Index(i pulumi.IntInput) MetricSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetricSource {
		return vs[0].([]*MetricSource)[vs[1].(int)]
	}).(MetricSourceOutput)
}

type MetricSourceMapOutput struct{ *pulumi.OutputState }

func (MetricSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricSource)(nil)).Elem()
}

func (o MetricSourceMapOutput) ToMetricSourceMapOutput() MetricSourceMapOutput {
	return o
}

func (o MetricSourceMapOutput) ToMetricSourceMapOutputWithContext(ctx context.Context) MetricSourceMapOutput {
	return o
}

func (o MetricSourceMapOutput) MapIndex(k pulumi.StringInput) MetricSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetricSource {
		return vs[0].(map[string]*MetricSource)[vs[1].(string)]
	}).(MetricSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricSourceInput)(nil)).Elem(), &MetricSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricSourceArrayInput)(nil)).Elem(), MetricSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricSourceMapInput)(nil)).Elem(), MetricSourceMap{})
	pulumi.RegisterOutputType(MetricSourceOutput{})
	pulumi.RegisterOutputType(MetricSourceArrayOutput{})
	pulumi.RegisterOutputType(MetricSourceMapOutput{})
}
