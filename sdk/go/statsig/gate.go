// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package statsig

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/statsig-io/pulumi-statsig/sdk/go/statsig/internal"
)

// This resource allows you to configure gates for your Statsig project.
//
// To learn more about gates, see [Gates Documentation](https://docs.statsig.com/feature-flags/)
//
// To learn more about the API powering this resource, see [Gates API Documentation](https://docs.statsig.com/console-api/gates)
type Gate struct {
	pulumi.CustomResourceState

	CreatorEmail       pulumi.StringOutput             `pulumi:"creatorEmail"`
	CreatorId          pulumi.StringOutput             `pulumi:"creatorId"`
	Description        pulumi.StringOutput             `pulumi:"description"`
	IdType             pulumi.StringOutput             `pulumi:"idType"`
	IsEnabled          pulumi.BoolOutput               `pulumi:"isEnabled"`
	MeasureMetricLifts pulumi.BoolOutput               `pulumi:"measureMetricLifts"`
	MonitoringMetrics  GateMonitoringMetricArrayOutput `pulumi:"monitoringMetrics"`
	// id
	Name       pulumi.StringOutput      `pulumi:"name"`
	Rules      GateRuleArrayOutput      `pulumi:"rules"`
	Tags       pulumi.StringArrayOutput `pulumi:"tags"`
	TargetApps pulumi.StringArrayOutput `pulumi:"targetApps"`
	Team       pulumi.StringOutput      `pulumi:"team"`
	Type       pulumi.StringOutput      `pulumi:"type"`
}

// NewGate registers a new resource with the given unique name, arguments, and options.
func NewGate(ctx *pulumi.Context,
	name string, args *GateArgs, opts ...pulumi.ResourceOption) (*Gate, error) {
	if args == nil {
		args = &GateArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Gate
	err := ctx.RegisterResource("statsig:index/gate:Gate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGate gets an existing Gate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GateState, opts ...pulumi.ResourceOption) (*Gate, error) {
	var resource Gate
	err := ctx.ReadResource("statsig:index/gate:Gate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gate resources.
type gateState struct {
	CreatorEmail       *string                `pulumi:"creatorEmail"`
	CreatorId          *string                `pulumi:"creatorId"`
	Description        *string                `pulumi:"description"`
	IdType             *string                `pulumi:"idType"`
	IsEnabled          *bool                  `pulumi:"isEnabled"`
	MeasureMetricLifts *bool                  `pulumi:"measureMetricLifts"`
	MonitoringMetrics  []GateMonitoringMetric `pulumi:"monitoringMetrics"`
	// id
	Name       *string    `pulumi:"name"`
	Rules      []GateRule `pulumi:"rules"`
	Tags       []string   `pulumi:"tags"`
	TargetApps []string   `pulumi:"targetApps"`
	Team       *string    `pulumi:"team"`
	Type       *string    `pulumi:"type"`
}

type GateState struct {
	CreatorEmail       pulumi.StringPtrInput
	CreatorId          pulumi.StringPtrInput
	Description        pulumi.StringPtrInput
	IdType             pulumi.StringPtrInput
	IsEnabled          pulumi.BoolPtrInput
	MeasureMetricLifts pulumi.BoolPtrInput
	MonitoringMetrics  GateMonitoringMetricArrayInput
	// id
	Name       pulumi.StringPtrInput
	Rules      GateRuleArrayInput
	Tags       pulumi.StringArrayInput
	TargetApps pulumi.StringArrayInput
	Team       pulumi.StringPtrInput
	Type       pulumi.StringPtrInput
}

func (GateState) ElementType() reflect.Type {
	return reflect.TypeOf((*gateState)(nil)).Elem()
}

type gateArgs struct {
	CreatorEmail       *string                `pulumi:"creatorEmail"`
	CreatorId          *string                `pulumi:"creatorId"`
	Description        *string                `pulumi:"description"`
	IdType             *string                `pulumi:"idType"`
	IsEnabled          *bool                  `pulumi:"isEnabled"`
	MeasureMetricLifts *bool                  `pulumi:"measureMetricLifts"`
	MonitoringMetrics  []GateMonitoringMetric `pulumi:"monitoringMetrics"`
	// id
	Name       *string    `pulumi:"name"`
	Rules      []GateRule `pulumi:"rules"`
	Tags       []string   `pulumi:"tags"`
	TargetApps []string   `pulumi:"targetApps"`
	Team       *string    `pulumi:"team"`
	Type       *string    `pulumi:"type"`
}

// The set of arguments for constructing a Gate resource.
type GateArgs struct {
	CreatorEmail       pulumi.StringPtrInput
	CreatorId          pulumi.StringPtrInput
	Description        pulumi.StringPtrInput
	IdType             pulumi.StringPtrInput
	IsEnabled          pulumi.BoolPtrInput
	MeasureMetricLifts pulumi.BoolPtrInput
	MonitoringMetrics  GateMonitoringMetricArrayInput
	// id
	Name       pulumi.StringPtrInput
	Rules      GateRuleArrayInput
	Tags       pulumi.StringArrayInput
	TargetApps pulumi.StringArrayInput
	Team       pulumi.StringPtrInput
	Type       pulumi.StringPtrInput
}

func (GateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gateArgs)(nil)).Elem()
}

type GateInput interface {
	pulumi.Input

	ToGateOutput() GateOutput
	ToGateOutputWithContext(ctx context.Context) GateOutput
}

func (*Gate) ElementType() reflect.Type {
	return reflect.TypeOf((**Gate)(nil)).Elem()
}

func (i *Gate) ToGateOutput() GateOutput {
	return i.ToGateOutputWithContext(context.Background())
}

func (i *Gate) ToGateOutputWithContext(ctx context.Context) GateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GateOutput)
}

// GateArrayInput is an input type that accepts GateArray and GateArrayOutput values.
// You can construct a concrete instance of `GateArrayInput` via:
//
//	GateArray{ GateArgs{...} }
type GateArrayInput interface {
	pulumi.Input

	ToGateArrayOutput() GateArrayOutput
	ToGateArrayOutputWithContext(context.Context) GateArrayOutput
}

type GateArray []GateInput

func (GateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gate)(nil)).Elem()
}

func (i GateArray) ToGateArrayOutput() GateArrayOutput {
	return i.ToGateArrayOutputWithContext(context.Background())
}

func (i GateArray) ToGateArrayOutputWithContext(ctx context.Context) GateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GateArrayOutput)
}

// GateMapInput is an input type that accepts GateMap and GateMapOutput values.
// You can construct a concrete instance of `GateMapInput` via:
//
//	GateMap{ "key": GateArgs{...} }
type GateMapInput interface {
	pulumi.Input

	ToGateMapOutput() GateMapOutput
	ToGateMapOutputWithContext(context.Context) GateMapOutput
}

type GateMap map[string]GateInput

func (GateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gate)(nil)).Elem()
}

func (i GateMap) ToGateMapOutput() GateMapOutput {
	return i.ToGateMapOutputWithContext(context.Background())
}

func (i GateMap) ToGateMapOutputWithContext(ctx context.Context) GateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GateMapOutput)
}

type GateOutput struct{ *pulumi.OutputState }

func (GateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Gate)(nil)).Elem()
}

func (o GateOutput) ToGateOutput() GateOutput {
	return o
}

func (o GateOutput) ToGateOutputWithContext(ctx context.Context) GateOutput {
	return o
}

func (o GateOutput) CreatorEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *Gate) pulumi.StringOutput { return v.CreatorEmail }).(pulumi.StringOutput)
}

func (o GateOutput) CreatorId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gate) pulumi.StringOutput { return v.CreatorId }).(pulumi.StringOutput)
}

func (o GateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Gate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o GateOutput) IdType() pulumi.StringOutput {
	return o.ApplyT(func(v *Gate) pulumi.StringOutput { return v.IdType }).(pulumi.StringOutput)
}

func (o GateOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Gate) pulumi.BoolOutput { return v.IsEnabled }).(pulumi.BoolOutput)
}

func (o GateOutput) MeasureMetricLifts() pulumi.BoolOutput {
	return o.ApplyT(func(v *Gate) pulumi.BoolOutput { return v.MeasureMetricLifts }).(pulumi.BoolOutput)
}

func (o GateOutput) MonitoringMetrics() GateMonitoringMetricArrayOutput {
	return o.ApplyT(func(v *Gate) GateMonitoringMetricArrayOutput { return v.MonitoringMetrics }).(GateMonitoringMetricArrayOutput)
}

// id
func (o GateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Gate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GateOutput) Rules() GateRuleArrayOutput {
	return o.ApplyT(func(v *Gate) GateRuleArrayOutput { return v.Rules }).(GateRuleArrayOutput)
}

func (o GateOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Gate) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o GateOutput) TargetApps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Gate) pulumi.StringArrayOutput { return v.TargetApps }).(pulumi.StringArrayOutput)
}

func (o GateOutput) Team() pulumi.StringOutput {
	return o.ApplyT(func(v *Gate) pulumi.StringOutput { return v.Team }).(pulumi.StringOutput)
}

func (o GateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Gate) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type GateArrayOutput struct{ *pulumi.OutputState }

func (GateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gate)(nil)).Elem()
}

func (o GateArrayOutput) ToGateArrayOutput() GateArrayOutput {
	return o
}

func (o GateArrayOutput) ToGateArrayOutputWithContext(ctx context.Context) GateArrayOutput {
	return o
}

func (o GateArrayOutput) Index(i pulumi.IntInput) GateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Gate {
		return vs[0].([]*Gate)[vs[1].(int)]
	}).(GateOutput)
}

type GateMapOutput struct{ *pulumi.OutputState }

func (GateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gate)(nil)).Elem()
}

func (o GateMapOutput) ToGateMapOutput() GateMapOutput {
	return o
}

func (o GateMapOutput) ToGateMapOutputWithContext(ctx context.Context) GateMapOutput {
	return o
}

func (o GateMapOutput) MapIndex(k pulumi.StringInput) GateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Gate {
		return vs[0].(map[string]*Gate)[vs[1].(string)]
	}).(GateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GateInput)(nil)).Elem(), &Gate{})
	pulumi.RegisterInputType(reflect.TypeOf((*GateArrayInput)(nil)).Elem(), GateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GateMapInput)(nil)).Elem(), GateMap{})
	pulumi.RegisterOutputType(GateOutput{})
	pulumi.RegisterOutputType(GateArrayOutput{})
	pulumi.RegisterOutputType(GateMapOutput{})
}
