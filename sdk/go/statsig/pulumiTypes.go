// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package statsig

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/statsig-io/pulumi-statsig/sdk/go/statsig/internal"
)

var _ = internal.GetEnvOrDefault

type EntityPropertyIdTypeMapping struct {
	// Column name linked to the ID.
	Column string `pulumi:"column"`
	// ID for the Statsig unit.
	StatsigUnitId string `pulumi:"statsigUnitId"`
}

// EntityPropertyIdTypeMappingInput is an input type that accepts EntityPropertyIdTypeMappingArgs and EntityPropertyIdTypeMappingOutput values.
// You can construct a concrete instance of `EntityPropertyIdTypeMappingInput` via:
//
//	EntityPropertyIdTypeMappingArgs{...}
type EntityPropertyIdTypeMappingInput interface {
	pulumi.Input

	ToEntityPropertyIdTypeMappingOutput() EntityPropertyIdTypeMappingOutput
	ToEntityPropertyIdTypeMappingOutputWithContext(context.Context) EntityPropertyIdTypeMappingOutput
}

type EntityPropertyIdTypeMappingArgs struct {
	// Column name linked to the ID.
	Column pulumi.StringInput `pulumi:"column"`
	// ID for the Statsig unit.
	StatsigUnitId pulumi.StringInput `pulumi:"statsigUnitId"`
}

func (EntityPropertyIdTypeMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityPropertyIdTypeMapping)(nil)).Elem()
}

func (i EntityPropertyIdTypeMappingArgs) ToEntityPropertyIdTypeMappingOutput() EntityPropertyIdTypeMappingOutput {
	return i.ToEntityPropertyIdTypeMappingOutputWithContext(context.Background())
}

func (i EntityPropertyIdTypeMappingArgs) ToEntityPropertyIdTypeMappingOutputWithContext(ctx context.Context) EntityPropertyIdTypeMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertyIdTypeMappingOutput)
}

// EntityPropertyIdTypeMappingArrayInput is an input type that accepts EntityPropertyIdTypeMappingArray and EntityPropertyIdTypeMappingArrayOutput values.
// You can construct a concrete instance of `EntityPropertyIdTypeMappingArrayInput` via:
//
//	EntityPropertyIdTypeMappingArray{ EntityPropertyIdTypeMappingArgs{...} }
type EntityPropertyIdTypeMappingArrayInput interface {
	pulumi.Input

	ToEntityPropertyIdTypeMappingArrayOutput() EntityPropertyIdTypeMappingArrayOutput
	ToEntityPropertyIdTypeMappingArrayOutputWithContext(context.Context) EntityPropertyIdTypeMappingArrayOutput
}

type EntityPropertyIdTypeMappingArray []EntityPropertyIdTypeMappingInput

func (EntityPropertyIdTypeMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityPropertyIdTypeMapping)(nil)).Elem()
}

func (i EntityPropertyIdTypeMappingArray) ToEntityPropertyIdTypeMappingArrayOutput() EntityPropertyIdTypeMappingArrayOutput {
	return i.ToEntityPropertyIdTypeMappingArrayOutputWithContext(context.Background())
}

func (i EntityPropertyIdTypeMappingArray) ToEntityPropertyIdTypeMappingArrayOutputWithContext(ctx context.Context) EntityPropertyIdTypeMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertyIdTypeMappingArrayOutput)
}

type EntityPropertyIdTypeMappingOutput struct{ *pulumi.OutputState }

func (EntityPropertyIdTypeMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityPropertyIdTypeMapping)(nil)).Elem()
}

func (o EntityPropertyIdTypeMappingOutput) ToEntityPropertyIdTypeMappingOutput() EntityPropertyIdTypeMappingOutput {
	return o
}

func (o EntityPropertyIdTypeMappingOutput) ToEntityPropertyIdTypeMappingOutputWithContext(ctx context.Context) EntityPropertyIdTypeMappingOutput {
	return o
}

// Column name linked to the ID.
func (o EntityPropertyIdTypeMappingOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v EntityPropertyIdTypeMapping) string { return v.Column }).(pulumi.StringOutput)
}

// ID for the Statsig unit.
func (o EntityPropertyIdTypeMappingOutput) StatsigUnitId() pulumi.StringOutput {
	return o.ApplyT(func(v EntityPropertyIdTypeMapping) string { return v.StatsigUnitId }).(pulumi.StringOutput)
}

type EntityPropertyIdTypeMappingArrayOutput struct{ *pulumi.OutputState }

func (EntityPropertyIdTypeMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityPropertyIdTypeMapping)(nil)).Elem()
}

func (o EntityPropertyIdTypeMappingArrayOutput) ToEntityPropertyIdTypeMappingArrayOutput() EntityPropertyIdTypeMappingArrayOutput {
	return o
}

func (o EntityPropertyIdTypeMappingArrayOutput) ToEntityPropertyIdTypeMappingArrayOutputWithContext(ctx context.Context) EntityPropertyIdTypeMappingArrayOutput {
	return o
}

func (o EntityPropertyIdTypeMappingArrayOutput) Index(i pulumi.IntInput) EntityPropertyIdTypeMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EntityPropertyIdTypeMapping {
		return vs[0].([]EntityPropertyIdTypeMapping)[vs[1].(int)]
	}).(EntityPropertyIdTypeMappingOutput)
}

type EntityPropertyOwner struct {
	// The email of the owner. This field is optional.
	OwnerEmail *string `pulumi:"ownerEmail"`
	// ID of the owner
	OwnerId *string `pulumi:"ownerId"`
	// The name of the owner. This field is optional.
	OwnerName *string `pulumi:"ownerName"`
	// Type of the owner (e.g., SDK_KEY or USER)
	OwnerType *string `pulumi:"ownerType"`
}

// EntityPropertyOwnerInput is an input type that accepts EntityPropertyOwnerArgs and EntityPropertyOwnerOutput values.
// You can construct a concrete instance of `EntityPropertyOwnerInput` via:
//
//	EntityPropertyOwnerArgs{...}
type EntityPropertyOwnerInput interface {
	pulumi.Input

	ToEntityPropertyOwnerOutput() EntityPropertyOwnerOutput
	ToEntityPropertyOwnerOutputWithContext(context.Context) EntityPropertyOwnerOutput
}

type EntityPropertyOwnerArgs struct {
	// The email of the owner. This field is optional.
	OwnerEmail pulumi.StringPtrInput `pulumi:"ownerEmail"`
	// ID of the owner
	OwnerId pulumi.StringPtrInput `pulumi:"ownerId"`
	// The name of the owner. This field is optional.
	OwnerName pulumi.StringPtrInput `pulumi:"ownerName"`
	// Type of the owner (e.g., SDK_KEY or USER)
	OwnerType pulumi.StringPtrInput `pulumi:"ownerType"`
}

func (EntityPropertyOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityPropertyOwner)(nil)).Elem()
}

func (i EntityPropertyOwnerArgs) ToEntityPropertyOwnerOutput() EntityPropertyOwnerOutput {
	return i.ToEntityPropertyOwnerOutputWithContext(context.Background())
}

func (i EntityPropertyOwnerArgs) ToEntityPropertyOwnerOutputWithContext(ctx context.Context) EntityPropertyOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertyOwnerOutput)
}

func (i EntityPropertyOwnerArgs) ToEntityPropertyOwnerPtrOutput() EntityPropertyOwnerPtrOutput {
	return i.ToEntityPropertyOwnerPtrOutputWithContext(context.Background())
}

func (i EntityPropertyOwnerArgs) ToEntityPropertyOwnerPtrOutputWithContext(ctx context.Context) EntityPropertyOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertyOwnerOutput).ToEntityPropertyOwnerPtrOutputWithContext(ctx)
}

// EntityPropertyOwnerPtrInput is an input type that accepts EntityPropertyOwnerArgs, EntityPropertyOwnerPtr and EntityPropertyOwnerPtrOutput values.
// You can construct a concrete instance of `EntityPropertyOwnerPtrInput` via:
//
//	        EntityPropertyOwnerArgs{...}
//
//	or:
//
//	        nil
type EntityPropertyOwnerPtrInput interface {
	pulumi.Input

	ToEntityPropertyOwnerPtrOutput() EntityPropertyOwnerPtrOutput
	ToEntityPropertyOwnerPtrOutputWithContext(context.Context) EntityPropertyOwnerPtrOutput
}

type entityPropertyOwnerPtrType EntityPropertyOwnerArgs

func EntityPropertyOwnerPtr(v *EntityPropertyOwnerArgs) EntityPropertyOwnerPtrInput {
	return (*entityPropertyOwnerPtrType)(v)
}

func (*entityPropertyOwnerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityPropertyOwner)(nil)).Elem()
}

func (i *entityPropertyOwnerPtrType) ToEntityPropertyOwnerPtrOutput() EntityPropertyOwnerPtrOutput {
	return i.ToEntityPropertyOwnerPtrOutputWithContext(context.Background())
}

func (i *entityPropertyOwnerPtrType) ToEntityPropertyOwnerPtrOutputWithContext(ctx context.Context) EntityPropertyOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertyOwnerPtrOutput)
}

type EntityPropertyOwnerOutput struct{ *pulumi.OutputState }

func (EntityPropertyOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityPropertyOwner)(nil)).Elem()
}

func (o EntityPropertyOwnerOutput) ToEntityPropertyOwnerOutput() EntityPropertyOwnerOutput {
	return o
}

func (o EntityPropertyOwnerOutput) ToEntityPropertyOwnerOutputWithContext(ctx context.Context) EntityPropertyOwnerOutput {
	return o
}

func (o EntityPropertyOwnerOutput) ToEntityPropertyOwnerPtrOutput() EntityPropertyOwnerPtrOutput {
	return o.ToEntityPropertyOwnerPtrOutputWithContext(context.Background())
}

func (o EntityPropertyOwnerOutput) ToEntityPropertyOwnerPtrOutputWithContext(ctx context.Context) EntityPropertyOwnerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityPropertyOwner) *EntityPropertyOwner {
		return &v
	}).(EntityPropertyOwnerPtrOutput)
}

// The email of the owner. This field is optional.
func (o EntityPropertyOwnerOutput) OwnerEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityPropertyOwner) *string { return v.OwnerEmail }).(pulumi.StringPtrOutput)
}

// ID of the owner
func (o EntityPropertyOwnerOutput) OwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityPropertyOwner) *string { return v.OwnerId }).(pulumi.StringPtrOutput)
}

// The name of the owner. This field is optional.
func (o EntityPropertyOwnerOutput) OwnerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityPropertyOwner) *string { return v.OwnerName }).(pulumi.StringPtrOutput)
}

// Type of the owner (e.g., SDK_KEY or USER)
func (o EntityPropertyOwnerOutput) OwnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityPropertyOwner) *string { return v.OwnerType }).(pulumi.StringPtrOutput)
}

type EntityPropertyOwnerPtrOutput struct{ *pulumi.OutputState }

func (EntityPropertyOwnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityPropertyOwner)(nil)).Elem()
}

func (o EntityPropertyOwnerPtrOutput) ToEntityPropertyOwnerPtrOutput() EntityPropertyOwnerPtrOutput {
	return o
}

func (o EntityPropertyOwnerPtrOutput) ToEntityPropertyOwnerPtrOutputWithContext(ctx context.Context) EntityPropertyOwnerPtrOutput {
	return o
}

func (o EntityPropertyOwnerPtrOutput) Elem() EntityPropertyOwnerOutput {
	return o.ApplyT(func(v *EntityPropertyOwner) EntityPropertyOwner {
		if v != nil {
			return *v
		}
		var ret EntityPropertyOwner
		return ret
	}).(EntityPropertyOwnerOutput)
}

// The email of the owner. This field is optional.
func (o EntityPropertyOwnerPtrOutput) OwnerEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityPropertyOwner) *string {
		if v == nil {
			return nil
		}
		return v.OwnerEmail
	}).(pulumi.StringPtrOutput)
}

// ID of the owner
func (o EntityPropertyOwnerPtrOutput) OwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityPropertyOwner) *string {
		if v == nil {
			return nil
		}
		return v.OwnerId
	}).(pulumi.StringPtrOutput)
}

// The name of the owner. This field is optional.
func (o EntityPropertyOwnerPtrOutput) OwnerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityPropertyOwner) *string {
		if v == nil {
			return nil
		}
		return v.OwnerName
	}).(pulumi.StringPtrOutput)
}

// Type of the owner (e.g., SDK_KEY or USER)
func (o EntityPropertyOwnerPtrOutput) OwnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityPropertyOwner) *string {
		if v == nil {
			return nil
		}
		return v.OwnerType
	}).(pulumi.StringPtrOutput)
}

type ExperimentGroup struct {
	Description     *string           `pulumi:"description"`
	Disabled        *bool             `pulumi:"disabled"`
	ForeignGroupId  *string           `pulumi:"foreignGroupId"`
	Id              *string           `pulumi:"id"`
	Name            string            `pulumi:"name"`
	ParameterValues map[string]string `pulumi:"parameterValues"`
	Size            float64           `pulumi:"size"`
}

// ExperimentGroupInput is an input type that accepts ExperimentGroupArgs and ExperimentGroupOutput values.
// You can construct a concrete instance of `ExperimentGroupInput` via:
//
//	ExperimentGroupArgs{...}
type ExperimentGroupInput interface {
	pulumi.Input

	ToExperimentGroupOutput() ExperimentGroupOutput
	ToExperimentGroupOutputWithContext(context.Context) ExperimentGroupOutput
}

type ExperimentGroupArgs struct {
	Description     pulumi.StringPtrInput `pulumi:"description"`
	Disabled        pulumi.BoolPtrInput   `pulumi:"disabled"`
	ForeignGroupId  pulumi.StringPtrInput `pulumi:"foreignGroupId"`
	Id              pulumi.StringPtrInput `pulumi:"id"`
	Name            pulumi.StringInput    `pulumi:"name"`
	ParameterValues pulumi.StringMapInput `pulumi:"parameterValues"`
	Size            pulumi.Float64Input   `pulumi:"size"`
}

func (ExperimentGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentGroup)(nil)).Elem()
}

func (i ExperimentGroupArgs) ToExperimentGroupOutput() ExperimentGroupOutput {
	return i.ToExperimentGroupOutputWithContext(context.Background())
}

func (i ExperimentGroupArgs) ToExperimentGroupOutputWithContext(ctx context.Context) ExperimentGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentGroupOutput)
}

// ExperimentGroupArrayInput is an input type that accepts ExperimentGroupArray and ExperimentGroupArrayOutput values.
// You can construct a concrete instance of `ExperimentGroupArrayInput` via:
//
//	ExperimentGroupArray{ ExperimentGroupArgs{...} }
type ExperimentGroupArrayInput interface {
	pulumi.Input

	ToExperimentGroupArrayOutput() ExperimentGroupArrayOutput
	ToExperimentGroupArrayOutputWithContext(context.Context) ExperimentGroupArrayOutput
}

type ExperimentGroupArray []ExperimentGroupInput

func (ExperimentGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentGroup)(nil)).Elem()
}

func (i ExperimentGroupArray) ToExperimentGroupArrayOutput() ExperimentGroupArrayOutput {
	return i.ToExperimentGroupArrayOutputWithContext(context.Background())
}

func (i ExperimentGroupArray) ToExperimentGroupArrayOutputWithContext(ctx context.Context) ExperimentGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentGroupArrayOutput)
}

type ExperimentGroupOutput struct{ *pulumi.OutputState }

func (ExperimentGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentGroup)(nil)).Elem()
}

func (o ExperimentGroupOutput) ToExperimentGroupOutput() ExperimentGroupOutput {
	return o
}

func (o ExperimentGroupOutput) ToExperimentGroupOutputWithContext(ctx context.Context) ExperimentGroupOutput {
	return o
}

func (o ExperimentGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentGroup) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ExperimentGroupOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExperimentGroup) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o ExperimentGroupOutput) ForeignGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentGroup) *string { return v.ForeignGroupId }).(pulumi.StringPtrOutput)
}

func (o ExperimentGroupOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentGroup) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o ExperimentGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o ExperimentGroupOutput) ParameterValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v ExperimentGroup) map[string]string { return v.ParameterValues }).(pulumi.StringMapOutput)
}

func (o ExperimentGroupOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v ExperimentGroup) float64 { return v.Size }).(pulumi.Float64Output)
}

type ExperimentGroupArrayOutput struct{ *pulumi.OutputState }

func (ExperimentGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentGroup)(nil)).Elem()
}

func (o ExperimentGroupArrayOutput) ToExperimentGroupArrayOutput() ExperimentGroupArrayOutput {
	return o
}

func (o ExperimentGroupArrayOutput) ToExperimentGroupArrayOutputWithContext(ctx context.Context) ExperimentGroupArrayOutput {
	return o
}

func (o ExperimentGroupArrayOutput) Index(i pulumi.IntInput) ExperimentGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentGroup {
		return vs[0].([]ExperimentGroup)[vs[1].(int)]
	}).(ExperimentGroupOutput)
}

type ExperimentLink struct {
	// The title of the link
	Title *string `pulumi:"title"`
	// The URL of the link
	Url string `pulumi:"url"`
}

// ExperimentLinkInput is an input type that accepts ExperimentLinkArgs and ExperimentLinkOutput values.
// You can construct a concrete instance of `ExperimentLinkInput` via:
//
//	ExperimentLinkArgs{...}
type ExperimentLinkInput interface {
	pulumi.Input

	ToExperimentLinkOutput() ExperimentLinkOutput
	ToExperimentLinkOutputWithContext(context.Context) ExperimentLinkOutput
}

type ExperimentLinkArgs struct {
	// The title of the link
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The URL of the link
	Url pulumi.StringInput `pulumi:"url"`
}

func (ExperimentLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentLink)(nil)).Elem()
}

func (i ExperimentLinkArgs) ToExperimentLinkOutput() ExperimentLinkOutput {
	return i.ToExperimentLinkOutputWithContext(context.Background())
}

func (i ExperimentLinkArgs) ToExperimentLinkOutputWithContext(ctx context.Context) ExperimentLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentLinkOutput)
}

// ExperimentLinkArrayInput is an input type that accepts ExperimentLinkArray and ExperimentLinkArrayOutput values.
// You can construct a concrete instance of `ExperimentLinkArrayInput` via:
//
//	ExperimentLinkArray{ ExperimentLinkArgs{...} }
type ExperimentLinkArrayInput interface {
	pulumi.Input

	ToExperimentLinkArrayOutput() ExperimentLinkArrayOutput
	ToExperimentLinkArrayOutputWithContext(context.Context) ExperimentLinkArrayOutput
}

type ExperimentLinkArray []ExperimentLinkInput

func (ExperimentLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentLink)(nil)).Elem()
}

func (i ExperimentLinkArray) ToExperimentLinkArrayOutput() ExperimentLinkArrayOutput {
	return i.ToExperimentLinkArrayOutputWithContext(context.Background())
}

func (i ExperimentLinkArray) ToExperimentLinkArrayOutputWithContext(ctx context.Context) ExperimentLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentLinkArrayOutput)
}

type ExperimentLinkOutput struct{ *pulumi.OutputState }

func (ExperimentLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentLink)(nil)).Elem()
}

func (o ExperimentLinkOutput) ToExperimentLinkOutput() ExperimentLinkOutput {
	return o
}

func (o ExperimentLinkOutput) ToExperimentLinkOutputWithContext(ctx context.Context) ExperimentLinkOutput {
	return o
}

// The title of the link
func (o ExperimentLinkOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentLink) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The URL of the link
func (o ExperimentLinkOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentLink) string { return v.Url }).(pulumi.StringOutput)
}

type ExperimentLinkArrayOutput struct{ *pulumi.OutputState }

func (ExperimentLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentLink)(nil)).Elem()
}

func (o ExperimentLinkArrayOutput) ToExperimentLinkArrayOutput() ExperimentLinkArrayOutput {
	return o
}

func (o ExperimentLinkArrayOutput) ToExperimentLinkArrayOutputWithContext(ctx context.Context) ExperimentLinkArrayOutput {
	return o
}

func (o ExperimentLinkArrayOutput) Index(i pulumi.IntInput) ExperimentLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentLink {
		return vs[0].([]ExperimentLink)[vs[1].(int)]
	}).(ExperimentLinkOutput)
}

type ExperimentPrimaryMetric struct {
	Direction         *string  `pulumi:"direction"`
	HypothesizedValue *float64 `pulumi:"hypothesizedValue"`
	Name              *string  `pulumi:"name"`
	Type              *string  `pulumi:"type"`
}

// ExperimentPrimaryMetricInput is an input type that accepts ExperimentPrimaryMetricArgs and ExperimentPrimaryMetricOutput values.
// You can construct a concrete instance of `ExperimentPrimaryMetricInput` via:
//
//	ExperimentPrimaryMetricArgs{...}
type ExperimentPrimaryMetricInput interface {
	pulumi.Input

	ToExperimentPrimaryMetricOutput() ExperimentPrimaryMetricOutput
	ToExperimentPrimaryMetricOutputWithContext(context.Context) ExperimentPrimaryMetricOutput
}

type ExperimentPrimaryMetricArgs struct {
	Direction         pulumi.StringPtrInput  `pulumi:"direction"`
	HypothesizedValue pulumi.Float64PtrInput `pulumi:"hypothesizedValue"`
	Name              pulumi.StringPtrInput  `pulumi:"name"`
	Type              pulumi.StringPtrInput  `pulumi:"type"`
}

func (ExperimentPrimaryMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentPrimaryMetric)(nil)).Elem()
}

func (i ExperimentPrimaryMetricArgs) ToExperimentPrimaryMetricOutput() ExperimentPrimaryMetricOutput {
	return i.ToExperimentPrimaryMetricOutputWithContext(context.Background())
}

func (i ExperimentPrimaryMetricArgs) ToExperimentPrimaryMetricOutputWithContext(ctx context.Context) ExperimentPrimaryMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentPrimaryMetricOutput)
}

// ExperimentPrimaryMetricArrayInput is an input type that accepts ExperimentPrimaryMetricArray and ExperimentPrimaryMetricArrayOutput values.
// You can construct a concrete instance of `ExperimentPrimaryMetricArrayInput` via:
//
//	ExperimentPrimaryMetricArray{ ExperimentPrimaryMetricArgs{...} }
type ExperimentPrimaryMetricArrayInput interface {
	pulumi.Input

	ToExperimentPrimaryMetricArrayOutput() ExperimentPrimaryMetricArrayOutput
	ToExperimentPrimaryMetricArrayOutputWithContext(context.Context) ExperimentPrimaryMetricArrayOutput
}

type ExperimentPrimaryMetricArray []ExperimentPrimaryMetricInput

func (ExperimentPrimaryMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentPrimaryMetric)(nil)).Elem()
}

func (i ExperimentPrimaryMetricArray) ToExperimentPrimaryMetricArrayOutput() ExperimentPrimaryMetricArrayOutput {
	return i.ToExperimentPrimaryMetricArrayOutputWithContext(context.Background())
}

func (i ExperimentPrimaryMetricArray) ToExperimentPrimaryMetricArrayOutputWithContext(ctx context.Context) ExperimentPrimaryMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentPrimaryMetricArrayOutput)
}

type ExperimentPrimaryMetricOutput struct{ *pulumi.OutputState }

func (ExperimentPrimaryMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentPrimaryMetric)(nil)).Elem()
}

func (o ExperimentPrimaryMetricOutput) ToExperimentPrimaryMetricOutput() ExperimentPrimaryMetricOutput {
	return o
}

func (o ExperimentPrimaryMetricOutput) ToExperimentPrimaryMetricOutputWithContext(ctx context.Context) ExperimentPrimaryMetricOutput {
	return o
}

func (o ExperimentPrimaryMetricOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentPrimaryMetric) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

func (o ExperimentPrimaryMetricOutput) HypothesizedValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ExperimentPrimaryMetric) *float64 { return v.HypothesizedValue }).(pulumi.Float64PtrOutput)
}

func (o ExperimentPrimaryMetricOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentPrimaryMetric) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ExperimentPrimaryMetricOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentPrimaryMetric) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExperimentPrimaryMetricArrayOutput struct{ *pulumi.OutputState }

func (ExperimentPrimaryMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentPrimaryMetric)(nil)).Elem()
}

func (o ExperimentPrimaryMetricArrayOutput) ToExperimentPrimaryMetricArrayOutput() ExperimentPrimaryMetricArrayOutput {
	return o
}

func (o ExperimentPrimaryMetricArrayOutput) ToExperimentPrimaryMetricArrayOutputWithContext(ctx context.Context) ExperimentPrimaryMetricArrayOutput {
	return o
}

func (o ExperimentPrimaryMetricArrayOutput) Index(i pulumi.IntInput) ExperimentPrimaryMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentPrimaryMetric {
		return vs[0].([]ExperimentPrimaryMetric)[vs[1].(int)]
	}).(ExperimentPrimaryMetricOutput)
}

type ExperimentSecondaryMetric struct {
	Direction         *string  `pulumi:"direction"`
	HypothesizedValue *float64 `pulumi:"hypothesizedValue"`
	Name              *string  `pulumi:"name"`
	Type              *string  `pulumi:"type"`
}

// ExperimentSecondaryMetricInput is an input type that accepts ExperimentSecondaryMetricArgs and ExperimentSecondaryMetricOutput values.
// You can construct a concrete instance of `ExperimentSecondaryMetricInput` via:
//
//	ExperimentSecondaryMetricArgs{...}
type ExperimentSecondaryMetricInput interface {
	pulumi.Input

	ToExperimentSecondaryMetricOutput() ExperimentSecondaryMetricOutput
	ToExperimentSecondaryMetricOutputWithContext(context.Context) ExperimentSecondaryMetricOutput
}

type ExperimentSecondaryMetricArgs struct {
	Direction         pulumi.StringPtrInput  `pulumi:"direction"`
	HypothesizedValue pulumi.Float64PtrInput `pulumi:"hypothesizedValue"`
	Name              pulumi.StringPtrInput  `pulumi:"name"`
	Type              pulumi.StringPtrInput  `pulumi:"type"`
}

func (ExperimentSecondaryMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentSecondaryMetric)(nil)).Elem()
}

func (i ExperimentSecondaryMetricArgs) ToExperimentSecondaryMetricOutput() ExperimentSecondaryMetricOutput {
	return i.ToExperimentSecondaryMetricOutputWithContext(context.Background())
}

func (i ExperimentSecondaryMetricArgs) ToExperimentSecondaryMetricOutputWithContext(ctx context.Context) ExperimentSecondaryMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentSecondaryMetricOutput)
}

// ExperimentSecondaryMetricArrayInput is an input type that accepts ExperimentSecondaryMetricArray and ExperimentSecondaryMetricArrayOutput values.
// You can construct a concrete instance of `ExperimentSecondaryMetricArrayInput` via:
//
//	ExperimentSecondaryMetricArray{ ExperimentSecondaryMetricArgs{...} }
type ExperimentSecondaryMetricArrayInput interface {
	pulumi.Input

	ToExperimentSecondaryMetricArrayOutput() ExperimentSecondaryMetricArrayOutput
	ToExperimentSecondaryMetricArrayOutputWithContext(context.Context) ExperimentSecondaryMetricArrayOutput
}

type ExperimentSecondaryMetricArray []ExperimentSecondaryMetricInput

func (ExperimentSecondaryMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentSecondaryMetric)(nil)).Elem()
}

func (i ExperimentSecondaryMetricArray) ToExperimentSecondaryMetricArrayOutput() ExperimentSecondaryMetricArrayOutput {
	return i.ToExperimentSecondaryMetricArrayOutputWithContext(context.Background())
}

func (i ExperimentSecondaryMetricArray) ToExperimentSecondaryMetricArrayOutputWithContext(ctx context.Context) ExperimentSecondaryMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentSecondaryMetricArrayOutput)
}

type ExperimentSecondaryMetricOutput struct{ *pulumi.OutputState }

func (ExperimentSecondaryMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentSecondaryMetric)(nil)).Elem()
}

func (o ExperimentSecondaryMetricOutput) ToExperimentSecondaryMetricOutput() ExperimentSecondaryMetricOutput {
	return o
}

func (o ExperimentSecondaryMetricOutput) ToExperimentSecondaryMetricOutputWithContext(ctx context.Context) ExperimentSecondaryMetricOutput {
	return o
}

func (o ExperimentSecondaryMetricOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentSecondaryMetric) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

func (o ExperimentSecondaryMetricOutput) HypothesizedValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ExperimentSecondaryMetric) *float64 { return v.HypothesizedValue }).(pulumi.Float64PtrOutput)
}

func (o ExperimentSecondaryMetricOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentSecondaryMetric) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ExperimentSecondaryMetricOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentSecondaryMetric) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExperimentSecondaryMetricArrayOutput struct{ *pulumi.OutputState }

func (ExperimentSecondaryMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentSecondaryMetric)(nil)).Elem()
}

func (o ExperimentSecondaryMetricArrayOutput) ToExperimentSecondaryMetricArrayOutput() ExperimentSecondaryMetricArrayOutput {
	return o
}

func (o ExperimentSecondaryMetricArrayOutput) ToExperimentSecondaryMetricArrayOutputWithContext(ctx context.Context) ExperimentSecondaryMetricArrayOutput {
	return o
}

func (o ExperimentSecondaryMetricArrayOutput) Index(i pulumi.IntInput) ExperimentSecondaryMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentSecondaryMetric {
		return vs[0].([]ExperimentSecondaryMetric)[vs[1].(int)]
	}).(ExperimentSecondaryMetricOutput)
}

type GateMonitoringMetric struct {
	Name *string `pulumi:"name"`
	Type *string `pulumi:"type"`
}

// GateMonitoringMetricInput is an input type that accepts GateMonitoringMetricArgs and GateMonitoringMetricOutput values.
// You can construct a concrete instance of `GateMonitoringMetricInput` via:
//
//	GateMonitoringMetricArgs{...}
type GateMonitoringMetricInput interface {
	pulumi.Input

	ToGateMonitoringMetricOutput() GateMonitoringMetricOutput
	ToGateMonitoringMetricOutputWithContext(context.Context) GateMonitoringMetricOutput
}

type GateMonitoringMetricArgs struct {
	Name pulumi.StringPtrInput `pulumi:"name"`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GateMonitoringMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GateMonitoringMetric)(nil)).Elem()
}

func (i GateMonitoringMetricArgs) ToGateMonitoringMetricOutput() GateMonitoringMetricOutput {
	return i.ToGateMonitoringMetricOutputWithContext(context.Background())
}

func (i GateMonitoringMetricArgs) ToGateMonitoringMetricOutputWithContext(ctx context.Context) GateMonitoringMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GateMonitoringMetricOutput)
}

// GateMonitoringMetricArrayInput is an input type that accepts GateMonitoringMetricArray and GateMonitoringMetricArrayOutput values.
// You can construct a concrete instance of `GateMonitoringMetricArrayInput` via:
//
//	GateMonitoringMetricArray{ GateMonitoringMetricArgs{...} }
type GateMonitoringMetricArrayInput interface {
	pulumi.Input

	ToGateMonitoringMetricArrayOutput() GateMonitoringMetricArrayOutput
	ToGateMonitoringMetricArrayOutputWithContext(context.Context) GateMonitoringMetricArrayOutput
}

type GateMonitoringMetricArray []GateMonitoringMetricInput

func (GateMonitoringMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GateMonitoringMetric)(nil)).Elem()
}

func (i GateMonitoringMetricArray) ToGateMonitoringMetricArrayOutput() GateMonitoringMetricArrayOutput {
	return i.ToGateMonitoringMetricArrayOutputWithContext(context.Background())
}

func (i GateMonitoringMetricArray) ToGateMonitoringMetricArrayOutputWithContext(ctx context.Context) GateMonitoringMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GateMonitoringMetricArrayOutput)
}

type GateMonitoringMetricOutput struct{ *pulumi.OutputState }

func (GateMonitoringMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GateMonitoringMetric)(nil)).Elem()
}

func (o GateMonitoringMetricOutput) ToGateMonitoringMetricOutput() GateMonitoringMetricOutput {
	return o
}

func (o GateMonitoringMetricOutput) ToGateMonitoringMetricOutputWithContext(ctx context.Context) GateMonitoringMetricOutput {
	return o
}

func (o GateMonitoringMetricOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GateMonitoringMetric) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GateMonitoringMetricOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GateMonitoringMetric) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GateMonitoringMetricArrayOutput struct{ *pulumi.OutputState }

func (GateMonitoringMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GateMonitoringMetric)(nil)).Elem()
}

func (o GateMonitoringMetricArrayOutput) ToGateMonitoringMetricArrayOutput() GateMonitoringMetricArrayOutput {
	return o
}

func (o GateMonitoringMetricArrayOutput) ToGateMonitoringMetricArrayOutputWithContext(ctx context.Context) GateMonitoringMetricArrayOutput {
	return o
}

func (o GateMonitoringMetricArrayOutput) Index(i pulumi.IntInput) GateMonitoringMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GateMonitoringMetric {
		return vs[0].([]GateMonitoringMetric)[vs[1].(int)]
	}).(GateMonitoringMetricOutput)
}

type GateRule struct {
	// The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
	BaseId *string `pulumi:"baseId"`
	// An array of Condition objects.
	Conditions []GateRuleCondition `pulumi:"conditions"`
	// The environments this rule is enabled for.
	Environments []string `pulumi:"environments"`
	// The Statsig ID of this rule.
	Id *string `pulumi:"id"`
	// The name of this rule.
	Name string `pulumi:"name"`
	// Of the users that meet the conditions of this rule, what percent should return true.
	PassPercentage float64 `pulumi:"passPercentage"`
	// The return value of the rule.
	ReturnValue *GateRuleReturnValue `pulumi:"returnValue"`
}

// GateRuleInput is an input type that accepts GateRuleArgs and GateRuleOutput values.
// You can construct a concrete instance of `GateRuleInput` via:
//
//	GateRuleArgs{...}
type GateRuleInput interface {
	pulumi.Input

	ToGateRuleOutput() GateRuleOutput
	ToGateRuleOutputWithContext(context.Context) GateRuleOutput
}

type GateRuleArgs struct {
	// The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
	BaseId pulumi.StringPtrInput `pulumi:"baseId"`
	// An array of Condition objects.
	Conditions GateRuleConditionArrayInput `pulumi:"conditions"`
	// The environments this rule is enabled for.
	Environments pulumi.StringArrayInput `pulumi:"environments"`
	// The Statsig ID of this rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of this rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Of the users that meet the conditions of this rule, what percent should return true.
	PassPercentage pulumi.Float64Input `pulumi:"passPercentage"`
	// The return value of the rule.
	ReturnValue GateRuleReturnValuePtrInput `pulumi:"returnValue"`
}

func (GateRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GateRule)(nil)).Elem()
}

func (i GateRuleArgs) ToGateRuleOutput() GateRuleOutput {
	return i.ToGateRuleOutputWithContext(context.Background())
}

func (i GateRuleArgs) ToGateRuleOutputWithContext(ctx context.Context) GateRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GateRuleOutput)
}

// GateRuleArrayInput is an input type that accepts GateRuleArray and GateRuleArrayOutput values.
// You can construct a concrete instance of `GateRuleArrayInput` via:
//
//	GateRuleArray{ GateRuleArgs{...} }
type GateRuleArrayInput interface {
	pulumi.Input

	ToGateRuleArrayOutput() GateRuleArrayOutput
	ToGateRuleArrayOutputWithContext(context.Context) GateRuleArrayOutput
}

type GateRuleArray []GateRuleInput

func (GateRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GateRule)(nil)).Elem()
}

func (i GateRuleArray) ToGateRuleArrayOutput() GateRuleArrayOutput {
	return i.ToGateRuleArrayOutputWithContext(context.Background())
}

func (i GateRuleArray) ToGateRuleArrayOutputWithContext(ctx context.Context) GateRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GateRuleArrayOutput)
}

type GateRuleOutput struct{ *pulumi.OutputState }

func (GateRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GateRule)(nil)).Elem()
}

func (o GateRuleOutput) ToGateRuleOutput() GateRuleOutput {
	return o
}

func (o GateRuleOutput) ToGateRuleOutputWithContext(ctx context.Context) GateRuleOutput {
	return o
}

// The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
func (o GateRuleOutput) BaseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GateRule) *string { return v.BaseId }).(pulumi.StringPtrOutput)
}

// An array of Condition objects.
func (o GateRuleOutput) Conditions() GateRuleConditionArrayOutput {
	return o.ApplyT(func(v GateRule) []GateRuleCondition { return v.Conditions }).(GateRuleConditionArrayOutput)
}

// The environments this rule is enabled for.
func (o GateRuleOutput) Environments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GateRule) []string { return v.Environments }).(pulumi.StringArrayOutput)
}

// The Statsig ID of this rule.
func (o GateRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GateRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of this rule.
func (o GateRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GateRule) string { return v.Name }).(pulumi.StringOutput)
}

// Of the users that meet the conditions of this rule, what percent should return true.
func (o GateRuleOutput) PassPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v GateRule) float64 { return v.PassPercentage }).(pulumi.Float64Output)
}

// The return value of the rule.
func (o GateRuleOutput) ReturnValue() GateRuleReturnValuePtrOutput {
	return o.ApplyT(func(v GateRule) *GateRuleReturnValue { return v.ReturnValue }).(GateRuleReturnValuePtrOutput)
}

type GateRuleArrayOutput struct{ *pulumi.OutputState }

func (GateRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GateRule)(nil)).Elem()
}

func (o GateRuleArrayOutput) ToGateRuleArrayOutput() GateRuleArrayOutput {
	return o
}

func (o GateRuleArrayOutput) ToGateRuleArrayOutputWithContext(ctx context.Context) GateRuleArrayOutput {
	return o
}

func (o GateRuleArrayOutput) Index(i pulumi.IntInput) GateRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GateRule {
		return vs[0].([]GateRule)[vs[1].(int)]
	}).(GateRuleOutput)
}

type GateRuleCondition struct {
	CustomId     *string  `pulumi:"customId"`
	Field        *string  `pulumi:"field"`
	Operator     *string  `pulumi:"operator"`
	TargetValues []string `pulumi:"targetValues"`
	Type         string   `pulumi:"type"`
}

// GateRuleConditionInput is an input type that accepts GateRuleConditionArgs and GateRuleConditionOutput values.
// You can construct a concrete instance of `GateRuleConditionInput` via:
//
//	GateRuleConditionArgs{...}
type GateRuleConditionInput interface {
	pulumi.Input

	ToGateRuleConditionOutput() GateRuleConditionOutput
	ToGateRuleConditionOutputWithContext(context.Context) GateRuleConditionOutput
}

type GateRuleConditionArgs struct {
	CustomId     pulumi.StringPtrInput   `pulumi:"customId"`
	Field        pulumi.StringPtrInput   `pulumi:"field"`
	Operator     pulumi.StringPtrInput   `pulumi:"operator"`
	TargetValues pulumi.StringArrayInput `pulumi:"targetValues"`
	Type         pulumi.StringInput      `pulumi:"type"`
}

func (GateRuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GateRuleCondition)(nil)).Elem()
}

func (i GateRuleConditionArgs) ToGateRuleConditionOutput() GateRuleConditionOutput {
	return i.ToGateRuleConditionOutputWithContext(context.Background())
}

func (i GateRuleConditionArgs) ToGateRuleConditionOutputWithContext(ctx context.Context) GateRuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GateRuleConditionOutput)
}

// GateRuleConditionArrayInput is an input type that accepts GateRuleConditionArray and GateRuleConditionArrayOutput values.
// You can construct a concrete instance of `GateRuleConditionArrayInput` via:
//
//	GateRuleConditionArray{ GateRuleConditionArgs{...} }
type GateRuleConditionArrayInput interface {
	pulumi.Input

	ToGateRuleConditionArrayOutput() GateRuleConditionArrayOutput
	ToGateRuleConditionArrayOutputWithContext(context.Context) GateRuleConditionArrayOutput
}

type GateRuleConditionArray []GateRuleConditionInput

func (GateRuleConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GateRuleCondition)(nil)).Elem()
}

func (i GateRuleConditionArray) ToGateRuleConditionArrayOutput() GateRuleConditionArrayOutput {
	return i.ToGateRuleConditionArrayOutputWithContext(context.Background())
}

func (i GateRuleConditionArray) ToGateRuleConditionArrayOutputWithContext(ctx context.Context) GateRuleConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GateRuleConditionArrayOutput)
}

type GateRuleConditionOutput struct{ *pulumi.OutputState }

func (GateRuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GateRuleCondition)(nil)).Elem()
}

func (o GateRuleConditionOutput) ToGateRuleConditionOutput() GateRuleConditionOutput {
	return o
}

func (o GateRuleConditionOutput) ToGateRuleConditionOutputWithContext(ctx context.Context) GateRuleConditionOutput {
	return o
}

func (o GateRuleConditionOutput) CustomId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GateRuleCondition) *string { return v.CustomId }).(pulumi.StringPtrOutput)
}

func (o GateRuleConditionOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GateRuleCondition) *string { return v.Field }).(pulumi.StringPtrOutput)
}

func (o GateRuleConditionOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GateRuleCondition) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

func (o GateRuleConditionOutput) TargetValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GateRuleCondition) []string { return v.TargetValues }).(pulumi.StringArrayOutput)
}

func (o GateRuleConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GateRuleCondition) string { return v.Type }).(pulumi.StringOutput)
}

type GateRuleConditionArrayOutput struct{ *pulumi.OutputState }

func (GateRuleConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GateRuleCondition)(nil)).Elem()
}

func (o GateRuleConditionArrayOutput) ToGateRuleConditionArrayOutput() GateRuleConditionArrayOutput {
	return o
}

func (o GateRuleConditionArrayOutput) ToGateRuleConditionArrayOutputWithContext(ctx context.Context) GateRuleConditionArrayOutput {
	return o
}

func (o GateRuleConditionArrayOutput) Index(i pulumi.IntInput) GateRuleConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GateRuleCondition {
		return vs[0].([]GateRuleCondition)[vs[1].(int)]
	}).(GateRuleConditionOutput)
}

type GateRuleReturnValue struct {
}

// GateRuleReturnValueInput is an input type that accepts GateRuleReturnValueArgs and GateRuleReturnValueOutput values.
// You can construct a concrete instance of `GateRuleReturnValueInput` via:
//
//	GateRuleReturnValueArgs{...}
type GateRuleReturnValueInput interface {
	pulumi.Input

	ToGateRuleReturnValueOutput() GateRuleReturnValueOutput
	ToGateRuleReturnValueOutputWithContext(context.Context) GateRuleReturnValueOutput
}

type GateRuleReturnValueArgs struct {
}

func (GateRuleReturnValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GateRuleReturnValue)(nil)).Elem()
}

func (i GateRuleReturnValueArgs) ToGateRuleReturnValueOutput() GateRuleReturnValueOutput {
	return i.ToGateRuleReturnValueOutputWithContext(context.Background())
}

func (i GateRuleReturnValueArgs) ToGateRuleReturnValueOutputWithContext(ctx context.Context) GateRuleReturnValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GateRuleReturnValueOutput)
}

func (i GateRuleReturnValueArgs) ToGateRuleReturnValuePtrOutput() GateRuleReturnValuePtrOutput {
	return i.ToGateRuleReturnValuePtrOutputWithContext(context.Background())
}

func (i GateRuleReturnValueArgs) ToGateRuleReturnValuePtrOutputWithContext(ctx context.Context) GateRuleReturnValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GateRuleReturnValueOutput).ToGateRuleReturnValuePtrOutputWithContext(ctx)
}

// GateRuleReturnValuePtrInput is an input type that accepts GateRuleReturnValueArgs, GateRuleReturnValuePtr and GateRuleReturnValuePtrOutput values.
// You can construct a concrete instance of `GateRuleReturnValuePtrInput` via:
//
//	        GateRuleReturnValueArgs{...}
//
//	or:
//
//	        nil
type GateRuleReturnValuePtrInput interface {
	pulumi.Input

	ToGateRuleReturnValuePtrOutput() GateRuleReturnValuePtrOutput
	ToGateRuleReturnValuePtrOutputWithContext(context.Context) GateRuleReturnValuePtrOutput
}

type gateRuleReturnValuePtrType GateRuleReturnValueArgs

func GateRuleReturnValuePtr(v *GateRuleReturnValueArgs) GateRuleReturnValuePtrInput {
	return (*gateRuleReturnValuePtrType)(v)
}

func (*gateRuleReturnValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GateRuleReturnValue)(nil)).Elem()
}

func (i *gateRuleReturnValuePtrType) ToGateRuleReturnValuePtrOutput() GateRuleReturnValuePtrOutput {
	return i.ToGateRuleReturnValuePtrOutputWithContext(context.Background())
}

func (i *gateRuleReturnValuePtrType) ToGateRuleReturnValuePtrOutputWithContext(ctx context.Context) GateRuleReturnValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GateRuleReturnValuePtrOutput)
}

type GateRuleReturnValueOutput struct{ *pulumi.OutputState }

func (GateRuleReturnValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GateRuleReturnValue)(nil)).Elem()
}

func (o GateRuleReturnValueOutput) ToGateRuleReturnValueOutput() GateRuleReturnValueOutput {
	return o
}

func (o GateRuleReturnValueOutput) ToGateRuleReturnValueOutputWithContext(ctx context.Context) GateRuleReturnValueOutput {
	return o
}

func (o GateRuleReturnValueOutput) ToGateRuleReturnValuePtrOutput() GateRuleReturnValuePtrOutput {
	return o.ToGateRuleReturnValuePtrOutputWithContext(context.Background())
}

func (o GateRuleReturnValueOutput) ToGateRuleReturnValuePtrOutputWithContext(ctx context.Context) GateRuleReturnValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GateRuleReturnValue) *GateRuleReturnValue {
		return &v
	}).(GateRuleReturnValuePtrOutput)
}

type GateRuleReturnValuePtrOutput struct{ *pulumi.OutputState }

func (GateRuleReturnValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GateRuleReturnValue)(nil)).Elem()
}

func (o GateRuleReturnValuePtrOutput) ToGateRuleReturnValuePtrOutput() GateRuleReturnValuePtrOutput {
	return o
}

func (o GateRuleReturnValuePtrOutput) ToGateRuleReturnValuePtrOutputWithContext(ctx context.Context) GateRuleReturnValuePtrOutput {
	return o
}

func (o GateRuleReturnValuePtrOutput) Elem() GateRuleReturnValueOutput {
	return o.ApplyT(func(v *GateRuleReturnValue) GateRuleReturnValue {
		if v != nil {
			return *v
		}
		var ret GateRuleReturnValue
		return ret
	}).(GateRuleReturnValueOutput)
}

type MetricFunnelEventList struct {
	// The name of the funnel event used in the metric.
	Name string `pulumi:"name"`
	// The type of funnel event, specifying how the event is tracked.
	Type string `pulumi:"type"`
}

// MetricFunnelEventListInput is an input type that accepts MetricFunnelEventListArgs and MetricFunnelEventListOutput values.
// You can construct a concrete instance of `MetricFunnelEventListInput` via:
//
//	MetricFunnelEventListArgs{...}
type MetricFunnelEventListInput interface {
	pulumi.Input

	ToMetricFunnelEventListOutput() MetricFunnelEventListOutput
	ToMetricFunnelEventListOutputWithContext(context.Context) MetricFunnelEventListOutput
}

type MetricFunnelEventListArgs struct {
	// The name of the funnel event used in the metric.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of funnel event, specifying how the event is tracked.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MetricFunnelEventListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricFunnelEventList)(nil)).Elem()
}

func (i MetricFunnelEventListArgs) ToMetricFunnelEventListOutput() MetricFunnelEventListOutput {
	return i.ToMetricFunnelEventListOutputWithContext(context.Background())
}

func (i MetricFunnelEventListArgs) ToMetricFunnelEventListOutputWithContext(ctx context.Context) MetricFunnelEventListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricFunnelEventListOutput)
}

// MetricFunnelEventListArrayInput is an input type that accepts MetricFunnelEventListArray and MetricFunnelEventListArrayOutput values.
// You can construct a concrete instance of `MetricFunnelEventListArrayInput` via:
//
//	MetricFunnelEventListArray{ MetricFunnelEventListArgs{...} }
type MetricFunnelEventListArrayInput interface {
	pulumi.Input

	ToMetricFunnelEventListArrayOutput() MetricFunnelEventListArrayOutput
	ToMetricFunnelEventListArrayOutputWithContext(context.Context) MetricFunnelEventListArrayOutput
}

type MetricFunnelEventListArray []MetricFunnelEventListInput

func (MetricFunnelEventListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricFunnelEventList)(nil)).Elem()
}

func (i MetricFunnelEventListArray) ToMetricFunnelEventListArrayOutput() MetricFunnelEventListArrayOutput {
	return i.ToMetricFunnelEventListArrayOutputWithContext(context.Background())
}

func (i MetricFunnelEventListArray) ToMetricFunnelEventListArrayOutputWithContext(ctx context.Context) MetricFunnelEventListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricFunnelEventListArrayOutput)
}

type MetricFunnelEventListOutput struct{ *pulumi.OutputState }

func (MetricFunnelEventListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricFunnelEventList)(nil)).Elem()
}

func (o MetricFunnelEventListOutput) ToMetricFunnelEventListOutput() MetricFunnelEventListOutput {
	return o
}

func (o MetricFunnelEventListOutput) ToMetricFunnelEventListOutputWithContext(ctx context.Context) MetricFunnelEventListOutput {
	return o
}

// The name of the funnel event used in the metric.
func (o MetricFunnelEventListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetricFunnelEventList) string { return v.Name }).(pulumi.StringOutput)
}

// The type of funnel event, specifying how the event is tracked.
func (o MetricFunnelEventListOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MetricFunnelEventList) string { return v.Type }).(pulumi.StringOutput)
}

type MetricFunnelEventListArrayOutput struct{ *pulumi.OutputState }

func (MetricFunnelEventListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricFunnelEventList)(nil)).Elem()
}

func (o MetricFunnelEventListArrayOutput) ToMetricFunnelEventListArrayOutput() MetricFunnelEventListArrayOutput {
	return o
}

func (o MetricFunnelEventListArrayOutput) ToMetricFunnelEventListArrayOutputWithContext(ctx context.Context) MetricFunnelEventListArrayOutput {
	return o
}

func (o MetricFunnelEventListArrayOutput) Index(i pulumi.IntInput) MetricFunnelEventListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricFunnelEventList {
		return vs[0].([]MetricFunnelEventList)[vs[1].(int)]
	}).(MetricFunnelEventListOutput)
}

type MetricMetricComponentMetric struct {
	Name string `pulumi:"name"`
	Type string `pulumi:"type"`
}

// MetricMetricComponentMetricInput is an input type that accepts MetricMetricComponentMetricArgs and MetricMetricComponentMetricOutput values.
// You can construct a concrete instance of `MetricMetricComponentMetricInput` via:
//
//	MetricMetricComponentMetricArgs{...}
type MetricMetricComponentMetricInput interface {
	pulumi.Input

	ToMetricMetricComponentMetricOutput() MetricMetricComponentMetricOutput
	ToMetricMetricComponentMetricOutputWithContext(context.Context) MetricMetricComponentMetricOutput
}

type MetricMetricComponentMetricArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (MetricMetricComponentMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricComponentMetric)(nil)).Elem()
}

func (i MetricMetricComponentMetricArgs) ToMetricMetricComponentMetricOutput() MetricMetricComponentMetricOutput {
	return i.ToMetricMetricComponentMetricOutputWithContext(context.Background())
}

func (i MetricMetricComponentMetricArgs) ToMetricMetricComponentMetricOutputWithContext(ctx context.Context) MetricMetricComponentMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricComponentMetricOutput)
}

// MetricMetricComponentMetricArrayInput is an input type that accepts MetricMetricComponentMetricArray and MetricMetricComponentMetricArrayOutput values.
// You can construct a concrete instance of `MetricMetricComponentMetricArrayInput` via:
//
//	MetricMetricComponentMetricArray{ MetricMetricComponentMetricArgs{...} }
type MetricMetricComponentMetricArrayInput interface {
	pulumi.Input

	ToMetricMetricComponentMetricArrayOutput() MetricMetricComponentMetricArrayOutput
	ToMetricMetricComponentMetricArrayOutputWithContext(context.Context) MetricMetricComponentMetricArrayOutput
}

type MetricMetricComponentMetricArray []MetricMetricComponentMetricInput

func (MetricMetricComponentMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricMetricComponentMetric)(nil)).Elem()
}

func (i MetricMetricComponentMetricArray) ToMetricMetricComponentMetricArrayOutput() MetricMetricComponentMetricArrayOutput {
	return i.ToMetricMetricComponentMetricArrayOutputWithContext(context.Background())
}

func (i MetricMetricComponentMetricArray) ToMetricMetricComponentMetricArrayOutputWithContext(ctx context.Context) MetricMetricComponentMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricComponentMetricArrayOutput)
}

type MetricMetricComponentMetricOutput struct{ *pulumi.OutputState }

func (MetricMetricComponentMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricComponentMetric)(nil)).Elem()
}

func (o MetricMetricComponentMetricOutput) ToMetricMetricComponentMetricOutput() MetricMetricComponentMetricOutput {
	return o
}

func (o MetricMetricComponentMetricOutput) ToMetricMetricComponentMetricOutputWithContext(ctx context.Context) MetricMetricComponentMetricOutput {
	return o
}

func (o MetricMetricComponentMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricComponentMetric) string { return v.Name }).(pulumi.StringOutput)
}

func (o MetricMetricComponentMetricOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricComponentMetric) string { return v.Type }).(pulumi.StringOutput)
}

type MetricMetricComponentMetricArrayOutput struct{ *pulumi.OutputState }

func (MetricMetricComponentMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricMetricComponentMetric)(nil)).Elem()
}

func (o MetricMetricComponentMetricArrayOutput) ToMetricMetricComponentMetricArrayOutput() MetricMetricComponentMetricArrayOutput {
	return o
}

func (o MetricMetricComponentMetricArrayOutput) ToMetricMetricComponentMetricArrayOutputWithContext(ctx context.Context) MetricMetricComponentMetricArrayOutput {
	return o
}

func (o MetricMetricComponentMetricArrayOutput) Index(i pulumi.IntInput) MetricMetricComponentMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricMetricComponentMetric {
		return vs[0].([]MetricMetricComponentMetric)[vs[1].(int)]
	}).(MetricMetricComponentMetricOutput)
}

type MetricMetricEvent struct {
	// Filtering criteria for the metric event, including conditions and values to refine the event data.
	Criterias []MetricMetricEventCriteria `pulumi:"criterias"`
	// The key for associated metadata, if applicable.
	MetadataKey *string `pulumi:"metadataKey"`
	// The name of the metric event.
	Name string `pulumi:"name"`
	// The type of metric event. Allowed values include: count, count_distinct, value, and metadata.
	Type *string `pulumi:"type"`
}

// MetricMetricEventInput is an input type that accepts MetricMetricEventArgs and MetricMetricEventOutput values.
// You can construct a concrete instance of `MetricMetricEventInput` via:
//
//	MetricMetricEventArgs{...}
type MetricMetricEventInput interface {
	pulumi.Input

	ToMetricMetricEventOutput() MetricMetricEventOutput
	ToMetricMetricEventOutputWithContext(context.Context) MetricMetricEventOutput
}

type MetricMetricEventArgs struct {
	// Filtering criteria for the metric event, including conditions and values to refine the event data.
	Criterias MetricMetricEventCriteriaArrayInput `pulumi:"criterias"`
	// The key for associated metadata, if applicable.
	MetadataKey pulumi.StringPtrInput `pulumi:"metadataKey"`
	// The name of the metric event.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of metric event. Allowed values include: count, count_distinct, value, and metadata.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MetricMetricEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricEvent)(nil)).Elem()
}

func (i MetricMetricEventArgs) ToMetricMetricEventOutput() MetricMetricEventOutput {
	return i.ToMetricMetricEventOutputWithContext(context.Background())
}

func (i MetricMetricEventArgs) ToMetricMetricEventOutputWithContext(ctx context.Context) MetricMetricEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricEventOutput)
}

// MetricMetricEventArrayInput is an input type that accepts MetricMetricEventArray and MetricMetricEventArrayOutput values.
// You can construct a concrete instance of `MetricMetricEventArrayInput` via:
//
//	MetricMetricEventArray{ MetricMetricEventArgs{...} }
type MetricMetricEventArrayInput interface {
	pulumi.Input

	ToMetricMetricEventArrayOutput() MetricMetricEventArrayOutput
	ToMetricMetricEventArrayOutputWithContext(context.Context) MetricMetricEventArrayOutput
}

type MetricMetricEventArray []MetricMetricEventInput

func (MetricMetricEventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricMetricEvent)(nil)).Elem()
}

func (i MetricMetricEventArray) ToMetricMetricEventArrayOutput() MetricMetricEventArrayOutput {
	return i.ToMetricMetricEventArrayOutputWithContext(context.Background())
}

func (i MetricMetricEventArray) ToMetricMetricEventArrayOutputWithContext(ctx context.Context) MetricMetricEventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricEventArrayOutput)
}

type MetricMetricEventOutput struct{ *pulumi.OutputState }

func (MetricMetricEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricEvent)(nil)).Elem()
}

func (o MetricMetricEventOutput) ToMetricMetricEventOutput() MetricMetricEventOutput {
	return o
}

func (o MetricMetricEventOutput) ToMetricMetricEventOutputWithContext(ctx context.Context) MetricMetricEventOutput {
	return o
}

// Filtering criteria for the metric event, including conditions and values to refine the event data.
func (o MetricMetricEventOutput) Criterias() MetricMetricEventCriteriaArrayOutput {
	return o.ApplyT(func(v MetricMetricEvent) []MetricMetricEventCriteria { return v.Criterias }).(MetricMetricEventCriteriaArrayOutput)
}

// The key for associated metadata, if applicable.
func (o MetricMetricEventOutput) MetadataKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricEvent) *string { return v.MetadataKey }).(pulumi.StringPtrOutput)
}

// The name of the metric event.
func (o MetricMetricEventOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricEvent) string { return v.Name }).(pulumi.StringOutput)
}

// The type of metric event. Allowed values include: count, count_distinct, value, and metadata.
func (o MetricMetricEventOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricEvent) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MetricMetricEventArrayOutput struct{ *pulumi.OutputState }

func (MetricMetricEventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricMetricEvent)(nil)).Elem()
}

func (o MetricMetricEventArrayOutput) ToMetricMetricEventArrayOutput() MetricMetricEventArrayOutput {
	return o
}

func (o MetricMetricEventArrayOutput) ToMetricMetricEventArrayOutputWithContext(ctx context.Context) MetricMetricEventArrayOutput {
	return o
}

func (o MetricMetricEventArrayOutput) Index(i pulumi.IntInput) MetricMetricEventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricMetricEvent {
		return vs[0].([]MetricMetricEvent)[vs[1].(int)]
	}).(MetricMetricEventOutput)
}

type MetricMetricEventCriteria struct {
	// Optional column specifying which data attribute to filter on.
	Column *string `pulumi:"column"`
	// sql*filter, start*withs, ends*with, and after*exposure are only applicable in Warehouse Native
	Condition string `pulumi:"condition"`
	// If true, overrides null values in criterion evaluation.
	NullVacuousOverride *bool `pulumi:"nullVacuousOverride"`
	// Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `userCustom`; in Warehouse Native, this should always be `metadata`.
	Type string `pulumi:"type"`
	// Optional array of values for the criterion to match against.
	Values []string `pulumi:"values"`
}

// MetricMetricEventCriteriaInput is an input type that accepts MetricMetricEventCriteriaArgs and MetricMetricEventCriteriaOutput values.
// You can construct a concrete instance of `MetricMetricEventCriteriaInput` via:
//
//	MetricMetricEventCriteriaArgs{...}
type MetricMetricEventCriteriaInput interface {
	pulumi.Input

	ToMetricMetricEventCriteriaOutput() MetricMetricEventCriteriaOutput
	ToMetricMetricEventCriteriaOutputWithContext(context.Context) MetricMetricEventCriteriaOutput
}

type MetricMetricEventCriteriaArgs struct {
	// Optional column specifying which data attribute to filter on.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// sql*filter, start*withs, ends*with, and after*exposure are only applicable in Warehouse Native
	Condition pulumi.StringInput `pulumi:"condition"`
	// If true, overrides null values in criterion evaluation.
	NullVacuousOverride pulumi.BoolPtrInput `pulumi:"nullVacuousOverride"`
	// Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `userCustom`; in Warehouse Native, this should always be `metadata`.
	Type pulumi.StringInput `pulumi:"type"`
	// Optional array of values for the criterion to match against.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (MetricMetricEventCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricEventCriteria)(nil)).Elem()
}

func (i MetricMetricEventCriteriaArgs) ToMetricMetricEventCriteriaOutput() MetricMetricEventCriteriaOutput {
	return i.ToMetricMetricEventCriteriaOutputWithContext(context.Background())
}

func (i MetricMetricEventCriteriaArgs) ToMetricMetricEventCriteriaOutputWithContext(ctx context.Context) MetricMetricEventCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricEventCriteriaOutput)
}

// MetricMetricEventCriteriaArrayInput is an input type that accepts MetricMetricEventCriteriaArray and MetricMetricEventCriteriaArrayOutput values.
// You can construct a concrete instance of `MetricMetricEventCriteriaArrayInput` via:
//
//	MetricMetricEventCriteriaArray{ MetricMetricEventCriteriaArgs{...} }
type MetricMetricEventCriteriaArrayInput interface {
	pulumi.Input

	ToMetricMetricEventCriteriaArrayOutput() MetricMetricEventCriteriaArrayOutput
	ToMetricMetricEventCriteriaArrayOutputWithContext(context.Context) MetricMetricEventCriteriaArrayOutput
}

type MetricMetricEventCriteriaArray []MetricMetricEventCriteriaInput

func (MetricMetricEventCriteriaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricMetricEventCriteria)(nil)).Elem()
}

func (i MetricMetricEventCriteriaArray) ToMetricMetricEventCriteriaArrayOutput() MetricMetricEventCriteriaArrayOutput {
	return i.ToMetricMetricEventCriteriaArrayOutputWithContext(context.Background())
}

func (i MetricMetricEventCriteriaArray) ToMetricMetricEventCriteriaArrayOutputWithContext(ctx context.Context) MetricMetricEventCriteriaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetricEventCriteriaArrayOutput)
}

type MetricMetricEventCriteriaOutput struct{ *pulumi.OutputState }

func (MetricMetricEventCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetricEventCriteria)(nil)).Elem()
}

func (o MetricMetricEventCriteriaOutput) ToMetricMetricEventCriteriaOutput() MetricMetricEventCriteriaOutput {
	return o
}

func (o MetricMetricEventCriteriaOutput) ToMetricMetricEventCriteriaOutputWithContext(ctx context.Context) MetricMetricEventCriteriaOutput {
	return o
}

// Optional column specifying which data attribute to filter on.
func (o MetricMetricEventCriteriaOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricMetricEventCriteria) *string { return v.Column }).(pulumi.StringPtrOutput)
}

// sql*filter, start*withs, ends*with, and after*exposure are only applicable in Warehouse Native
func (o MetricMetricEventCriteriaOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricEventCriteria) string { return v.Condition }).(pulumi.StringOutput)
}

// If true, overrides null values in criterion evaluation.
func (o MetricMetricEventCriteriaOutput) NullVacuousOverride() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricMetricEventCriteria) *bool { return v.NullVacuousOverride }).(pulumi.BoolPtrOutput)
}

// Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `userCustom`; in Warehouse Native, this should always be `metadata`.
func (o MetricMetricEventCriteriaOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MetricMetricEventCriteria) string { return v.Type }).(pulumi.StringOutput)
}

// Optional array of values for the criterion to match against.
func (o MetricMetricEventCriteriaOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricMetricEventCriteria) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MetricMetricEventCriteriaArrayOutput struct{ *pulumi.OutputState }

func (MetricMetricEventCriteriaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricMetricEventCriteria)(nil)).Elem()
}

func (o MetricMetricEventCriteriaArrayOutput) ToMetricMetricEventCriteriaArrayOutput() MetricMetricEventCriteriaArrayOutput {
	return o
}

func (o MetricMetricEventCriteriaArrayOutput) ToMetricMetricEventCriteriaArrayOutputWithContext(ctx context.Context) MetricMetricEventCriteriaArrayOutput {
	return o
}

func (o MetricMetricEventCriteriaArrayOutput) Index(i pulumi.IntInput) MetricMetricEventCriteriaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricMetricEventCriteria {
		return vs[0].([]MetricMetricEventCriteria)[vs[1].(int)]
	}).(MetricMetricEventCriteriaOutput)
}

type MetricSourceCustomFieldMapping struct {
	// The formula or expression used to compute the custom field value.
	Formula string `pulumi:"formula"`
	// The identifier for the custom field mapping.
	Key string `pulumi:"key"`
}

// MetricSourceCustomFieldMappingInput is an input type that accepts MetricSourceCustomFieldMappingArgs and MetricSourceCustomFieldMappingOutput values.
// You can construct a concrete instance of `MetricSourceCustomFieldMappingInput` via:
//
//	MetricSourceCustomFieldMappingArgs{...}
type MetricSourceCustomFieldMappingInput interface {
	pulumi.Input

	ToMetricSourceCustomFieldMappingOutput() MetricSourceCustomFieldMappingOutput
	ToMetricSourceCustomFieldMappingOutputWithContext(context.Context) MetricSourceCustomFieldMappingOutput
}

type MetricSourceCustomFieldMappingArgs struct {
	// The formula or expression used to compute the custom field value.
	Formula pulumi.StringInput `pulumi:"formula"`
	// The identifier for the custom field mapping.
	Key pulumi.StringInput `pulumi:"key"`
}

func (MetricSourceCustomFieldMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricSourceCustomFieldMapping)(nil)).Elem()
}

func (i MetricSourceCustomFieldMappingArgs) ToMetricSourceCustomFieldMappingOutput() MetricSourceCustomFieldMappingOutput {
	return i.ToMetricSourceCustomFieldMappingOutputWithContext(context.Background())
}

func (i MetricSourceCustomFieldMappingArgs) ToMetricSourceCustomFieldMappingOutputWithContext(ctx context.Context) MetricSourceCustomFieldMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricSourceCustomFieldMappingOutput)
}

// MetricSourceCustomFieldMappingArrayInput is an input type that accepts MetricSourceCustomFieldMappingArray and MetricSourceCustomFieldMappingArrayOutput values.
// You can construct a concrete instance of `MetricSourceCustomFieldMappingArrayInput` via:
//
//	MetricSourceCustomFieldMappingArray{ MetricSourceCustomFieldMappingArgs{...} }
type MetricSourceCustomFieldMappingArrayInput interface {
	pulumi.Input

	ToMetricSourceCustomFieldMappingArrayOutput() MetricSourceCustomFieldMappingArrayOutput
	ToMetricSourceCustomFieldMappingArrayOutputWithContext(context.Context) MetricSourceCustomFieldMappingArrayOutput
}

type MetricSourceCustomFieldMappingArray []MetricSourceCustomFieldMappingInput

func (MetricSourceCustomFieldMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricSourceCustomFieldMapping)(nil)).Elem()
}

func (i MetricSourceCustomFieldMappingArray) ToMetricSourceCustomFieldMappingArrayOutput() MetricSourceCustomFieldMappingArrayOutput {
	return i.ToMetricSourceCustomFieldMappingArrayOutputWithContext(context.Background())
}

func (i MetricSourceCustomFieldMappingArray) ToMetricSourceCustomFieldMappingArrayOutputWithContext(ctx context.Context) MetricSourceCustomFieldMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricSourceCustomFieldMappingArrayOutput)
}

type MetricSourceCustomFieldMappingOutput struct{ *pulumi.OutputState }

func (MetricSourceCustomFieldMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricSourceCustomFieldMapping)(nil)).Elem()
}

func (o MetricSourceCustomFieldMappingOutput) ToMetricSourceCustomFieldMappingOutput() MetricSourceCustomFieldMappingOutput {
	return o
}

func (o MetricSourceCustomFieldMappingOutput) ToMetricSourceCustomFieldMappingOutputWithContext(ctx context.Context) MetricSourceCustomFieldMappingOutput {
	return o
}

// The formula or expression used to compute the custom field value.
func (o MetricSourceCustomFieldMappingOutput) Formula() pulumi.StringOutput {
	return o.ApplyT(func(v MetricSourceCustomFieldMapping) string { return v.Formula }).(pulumi.StringOutput)
}

// The identifier for the custom field mapping.
func (o MetricSourceCustomFieldMappingOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MetricSourceCustomFieldMapping) string { return v.Key }).(pulumi.StringOutput)
}

type MetricSourceCustomFieldMappingArrayOutput struct{ *pulumi.OutputState }

func (MetricSourceCustomFieldMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricSourceCustomFieldMapping)(nil)).Elem()
}

func (o MetricSourceCustomFieldMappingArrayOutput) ToMetricSourceCustomFieldMappingArrayOutput() MetricSourceCustomFieldMappingArrayOutput {
	return o
}

func (o MetricSourceCustomFieldMappingArrayOutput) ToMetricSourceCustomFieldMappingArrayOutputWithContext(ctx context.Context) MetricSourceCustomFieldMappingArrayOutput {
	return o
}

func (o MetricSourceCustomFieldMappingArrayOutput) Index(i pulumi.IntInput) MetricSourceCustomFieldMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricSourceCustomFieldMapping {
		return vs[0].([]MetricSourceCustomFieldMapping)[vs[1].(int)]
	}).(MetricSourceCustomFieldMappingOutput)
}

type MetricSourceIdTypeMapping struct {
	// The corresponding column name in the source that relates to the Statsig unit ID.
	Column string `pulumi:"column"`
	// The identifier mapping for Statsig units.
	StatsigUnitId string `pulumi:"statsigUnitId"`
}

// MetricSourceIdTypeMappingInput is an input type that accepts MetricSourceIdTypeMappingArgs and MetricSourceIdTypeMappingOutput values.
// You can construct a concrete instance of `MetricSourceIdTypeMappingInput` via:
//
//	MetricSourceIdTypeMappingArgs{...}
type MetricSourceIdTypeMappingInput interface {
	pulumi.Input

	ToMetricSourceIdTypeMappingOutput() MetricSourceIdTypeMappingOutput
	ToMetricSourceIdTypeMappingOutputWithContext(context.Context) MetricSourceIdTypeMappingOutput
}

type MetricSourceIdTypeMappingArgs struct {
	// The corresponding column name in the source that relates to the Statsig unit ID.
	Column pulumi.StringInput `pulumi:"column"`
	// The identifier mapping for Statsig units.
	StatsigUnitId pulumi.StringInput `pulumi:"statsigUnitId"`
}

func (MetricSourceIdTypeMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricSourceIdTypeMapping)(nil)).Elem()
}

func (i MetricSourceIdTypeMappingArgs) ToMetricSourceIdTypeMappingOutput() MetricSourceIdTypeMappingOutput {
	return i.ToMetricSourceIdTypeMappingOutputWithContext(context.Background())
}

func (i MetricSourceIdTypeMappingArgs) ToMetricSourceIdTypeMappingOutputWithContext(ctx context.Context) MetricSourceIdTypeMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricSourceIdTypeMappingOutput)
}

// MetricSourceIdTypeMappingArrayInput is an input type that accepts MetricSourceIdTypeMappingArray and MetricSourceIdTypeMappingArrayOutput values.
// You can construct a concrete instance of `MetricSourceIdTypeMappingArrayInput` via:
//
//	MetricSourceIdTypeMappingArray{ MetricSourceIdTypeMappingArgs{...} }
type MetricSourceIdTypeMappingArrayInput interface {
	pulumi.Input

	ToMetricSourceIdTypeMappingArrayOutput() MetricSourceIdTypeMappingArrayOutput
	ToMetricSourceIdTypeMappingArrayOutputWithContext(context.Context) MetricSourceIdTypeMappingArrayOutput
}

type MetricSourceIdTypeMappingArray []MetricSourceIdTypeMappingInput

func (MetricSourceIdTypeMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricSourceIdTypeMapping)(nil)).Elem()
}

func (i MetricSourceIdTypeMappingArray) ToMetricSourceIdTypeMappingArrayOutput() MetricSourceIdTypeMappingArrayOutput {
	return i.ToMetricSourceIdTypeMappingArrayOutputWithContext(context.Background())
}

func (i MetricSourceIdTypeMappingArray) ToMetricSourceIdTypeMappingArrayOutputWithContext(ctx context.Context) MetricSourceIdTypeMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricSourceIdTypeMappingArrayOutput)
}

type MetricSourceIdTypeMappingOutput struct{ *pulumi.OutputState }

func (MetricSourceIdTypeMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricSourceIdTypeMapping)(nil)).Elem()
}

func (o MetricSourceIdTypeMappingOutput) ToMetricSourceIdTypeMappingOutput() MetricSourceIdTypeMappingOutput {
	return o
}

func (o MetricSourceIdTypeMappingOutput) ToMetricSourceIdTypeMappingOutputWithContext(ctx context.Context) MetricSourceIdTypeMappingOutput {
	return o
}

// The corresponding column name in the source that relates to the Statsig unit ID.
func (o MetricSourceIdTypeMappingOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v MetricSourceIdTypeMapping) string { return v.Column }).(pulumi.StringOutput)
}

// The identifier mapping for Statsig units.
func (o MetricSourceIdTypeMappingOutput) StatsigUnitId() pulumi.StringOutput {
	return o.ApplyT(func(v MetricSourceIdTypeMapping) string { return v.StatsigUnitId }).(pulumi.StringOutput)
}

type MetricSourceIdTypeMappingArrayOutput struct{ *pulumi.OutputState }

func (MetricSourceIdTypeMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricSourceIdTypeMapping)(nil)).Elem()
}

func (o MetricSourceIdTypeMappingArrayOutput) ToMetricSourceIdTypeMappingArrayOutput() MetricSourceIdTypeMappingArrayOutput {
	return o
}

func (o MetricSourceIdTypeMappingArrayOutput) ToMetricSourceIdTypeMappingArrayOutputWithContext(ctx context.Context) MetricSourceIdTypeMappingArrayOutput {
	return o
}

func (o MetricSourceIdTypeMappingArrayOutput) Index(i pulumi.IntInput) MetricSourceIdTypeMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricSourceIdTypeMapping {
		return vs[0].([]MetricSourceIdTypeMapping)[vs[1].(int)]
	}).(MetricSourceIdTypeMappingOutput)
}

type MetricSourceOwner struct {
	// The email of the owner. This field is optional.
	OwnerEmail *string `pulumi:"ownerEmail"`
	// ID of the owner
	OwnerId *string `pulumi:"ownerId"`
	// The name of the owner. This field is optional.
	OwnerName *string `pulumi:"ownerName"`
	// Type of the owner (e.g., SDK_KEY or USER)
	OwnerType *string `pulumi:"ownerType"`
}

// MetricSourceOwnerInput is an input type that accepts MetricSourceOwnerArgs and MetricSourceOwnerOutput values.
// You can construct a concrete instance of `MetricSourceOwnerInput` via:
//
//	MetricSourceOwnerArgs{...}
type MetricSourceOwnerInput interface {
	pulumi.Input

	ToMetricSourceOwnerOutput() MetricSourceOwnerOutput
	ToMetricSourceOwnerOutputWithContext(context.Context) MetricSourceOwnerOutput
}

type MetricSourceOwnerArgs struct {
	// The email of the owner. This field is optional.
	OwnerEmail pulumi.StringPtrInput `pulumi:"ownerEmail"`
	// ID of the owner
	OwnerId pulumi.StringPtrInput `pulumi:"ownerId"`
	// The name of the owner. This field is optional.
	OwnerName pulumi.StringPtrInput `pulumi:"ownerName"`
	// Type of the owner (e.g., SDK_KEY or USER)
	OwnerType pulumi.StringPtrInput `pulumi:"ownerType"`
}

func (MetricSourceOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricSourceOwner)(nil)).Elem()
}

func (i MetricSourceOwnerArgs) ToMetricSourceOwnerOutput() MetricSourceOwnerOutput {
	return i.ToMetricSourceOwnerOutputWithContext(context.Background())
}

func (i MetricSourceOwnerArgs) ToMetricSourceOwnerOutputWithContext(ctx context.Context) MetricSourceOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricSourceOwnerOutput)
}

func (i MetricSourceOwnerArgs) ToMetricSourceOwnerPtrOutput() MetricSourceOwnerPtrOutput {
	return i.ToMetricSourceOwnerPtrOutputWithContext(context.Background())
}

func (i MetricSourceOwnerArgs) ToMetricSourceOwnerPtrOutputWithContext(ctx context.Context) MetricSourceOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricSourceOwnerOutput).ToMetricSourceOwnerPtrOutputWithContext(ctx)
}

// MetricSourceOwnerPtrInput is an input type that accepts MetricSourceOwnerArgs, MetricSourceOwnerPtr and MetricSourceOwnerPtrOutput values.
// You can construct a concrete instance of `MetricSourceOwnerPtrInput` via:
//
//	        MetricSourceOwnerArgs{...}
//
//	or:
//
//	        nil
type MetricSourceOwnerPtrInput interface {
	pulumi.Input

	ToMetricSourceOwnerPtrOutput() MetricSourceOwnerPtrOutput
	ToMetricSourceOwnerPtrOutputWithContext(context.Context) MetricSourceOwnerPtrOutput
}

type metricSourceOwnerPtrType MetricSourceOwnerArgs

func MetricSourceOwnerPtr(v *MetricSourceOwnerArgs) MetricSourceOwnerPtrInput {
	return (*metricSourceOwnerPtrType)(v)
}

func (*metricSourceOwnerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricSourceOwner)(nil)).Elem()
}

func (i *metricSourceOwnerPtrType) ToMetricSourceOwnerPtrOutput() MetricSourceOwnerPtrOutput {
	return i.ToMetricSourceOwnerPtrOutputWithContext(context.Background())
}

func (i *metricSourceOwnerPtrType) ToMetricSourceOwnerPtrOutputWithContext(ctx context.Context) MetricSourceOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricSourceOwnerPtrOutput)
}

type MetricSourceOwnerOutput struct{ *pulumi.OutputState }

func (MetricSourceOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricSourceOwner)(nil)).Elem()
}

func (o MetricSourceOwnerOutput) ToMetricSourceOwnerOutput() MetricSourceOwnerOutput {
	return o
}

func (o MetricSourceOwnerOutput) ToMetricSourceOwnerOutputWithContext(ctx context.Context) MetricSourceOwnerOutput {
	return o
}

func (o MetricSourceOwnerOutput) ToMetricSourceOwnerPtrOutput() MetricSourceOwnerPtrOutput {
	return o.ToMetricSourceOwnerPtrOutputWithContext(context.Background())
}

func (o MetricSourceOwnerOutput) ToMetricSourceOwnerPtrOutputWithContext(ctx context.Context) MetricSourceOwnerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetricSourceOwner) *MetricSourceOwner {
		return &v
	}).(MetricSourceOwnerPtrOutput)
}

// The email of the owner. This field is optional.
func (o MetricSourceOwnerOutput) OwnerEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricSourceOwner) *string { return v.OwnerEmail }).(pulumi.StringPtrOutput)
}

// ID of the owner
func (o MetricSourceOwnerOutput) OwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricSourceOwner) *string { return v.OwnerId }).(pulumi.StringPtrOutput)
}

// The name of the owner. This field is optional.
func (o MetricSourceOwnerOutput) OwnerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricSourceOwner) *string { return v.OwnerName }).(pulumi.StringPtrOutput)
}

// Type of the owner (e.g., SDK_KEY or USER)
func (o MetricSourceOwnerOutput) OwnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricSourceOwner) *string { return v.OwnerType }).(pulumi.StringPtrOutput)
}

type MetricSourceOwnerPtrOutput struct{ *pulumi.OutputState }

func (MetricSourceOwnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricSourceOwner)(nil)).Elem()
}

func (o MetricSourceOwnerPtrOutput) ToMetricSourceOwnerPtrOutput() MetricSourceOwnerPtrOutput {
	return o
}

func (o MetricSourceOwnerPtrOutput) ToMetricSourceOwnerPtrOutputWithContext(ctx context.Context) MetricSourceOwnerPtrOutput {
	return o
}

func (o MetricSourceOwnerPtrOutput) Elem() MetricSourceOwnerOutput {
	return o.ApplyT(func(v *MetricSourceOwner) MetricSourceOwner {
		if v != nil {
			return *v
		}
		var ret MetricSourceOwner
		return ret
	}).(MetricSourceOwnerOutput)
}

// The email of the owner. This field is optional.
func (o MetricSourceOwnerPtrOutput) OwnerEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricSourceOwner) *string {
		if v == nil {
			return nil
		}
		return v.OwnerEmail
	}).(pulumi.StringPtrOutput)
}

// ID of the owner
func (o MetricSourceOwnerPtrOutput) OwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricSourceOwner) *string {
		if v == nil {
			return nil
		}
		return v.OwnerId
	}).(pulumi.StringPtrOutput)
}

// The name of the owner. This field is optional.
func (o MetricSourceOwnerPtrOutput) OwnerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricSourceOwner) *string {
		if v == nil {
			return nil
		}
		return v.OwnerName
	}).(pulumi.StringPtrOutput)
}

// Type of the owner (e.g., SDK_KEY or USER)
func (o MetricSourceOwnerPtrOutput) OwnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricSourceOwner) *string {
		if v == nil {
			return nil
		}
		return v.OwnerType
	}).(pulumi.StringPtrOutput)
}

type MetricWarehouseNative struct {
	// Allowed: count┃sum┃mean┃daily*participation┃ratio┃funnel┃count*distinct┃percentile
	Aggregation *string `pulumi:"aggregation"`
	// Include units which do not have a denominator. Only applicable to ratios.
	AllowNullRatioDenominator *bool `pulumi:"allowNullRatioDenominator"`
	// Maximum cap for metric values.
	Cap *float64 `pulumi:"cap"`
	// Filtering criteria for the metric source
	Criterias []MetricWarehouseNativeCriteria `pulumi:"criterias"`
	// Attribution window for CUPED adjustments in days.
	CupedAttributionWindow *float64 `pulumi:"cupedAttributionWindow"`
	// Custom end date for rollup in days since exposure.
	CustomRollUpEnd *float64 `pulumi:"customRollUpEnd"`
	// Custom start date for rollup in days since exposure.
	CustomRollUpStart *float64 `pulumi:"customRollUpStart"`
	// Allowed: count┃sum┃mean┃daily*participation┃ratio┃funnel┃count*distinct┃percentile
	DenominatorAggregation *string `pulumi:"denominatorAggregation"`
	// Filtering criteria for the denominator metric source, if this metric is a ratio
	DenominatorCriterias []MetricWarehouseNativeDenominatorCriteria `pulumi:"denominatorCriterias"`
	// Custom end date for rollup in days since exposure.
	DenominatorCustomRollupEnd *float64 `pulumi:"denominatorCustomRollupEnd"`
	// Custom start date for rollup in days since exposure.
	DenominatorCustomRollupStart *float64 `pulumi:"denominatorCustomRollupStart"`
	// Name of the metric source for the denominator.
	DenominatorMetricSourceName *string `pulumi:"denominatorMetricSourceName"`
	// Time window for the denominator metric. Specify "custom" for a custom window.
	DenominatorRollupTimeWindow *string `pulumi:"denominatorRollupTimeWindow"`
	// Column name for the denominator’s value.
	DenominatorValueColumn *string `pulumi:"denominatorValueColumn"`
	// Duration for counting funnel events in days.
	FunnelCalculationWindow *float64 `pulumi:"funnelCalculationWindow"`
	// Allowed: users┃sessions for distinct count method in funnel events.
	FunnelCountDistinct *string `pulumi:"funnelCountDistinct"`
	// List of funnel events with associated criteria and identifiers.
	FunnelEvents []MetricWarehouseNativeFunnelEvent `pulumi:"funnelEvents"`
	// Allowed: start_event┃exposure to determine funnel start criteria.
	FunnelStartCriteria *string `pulumi:"funnelStartCriteria"`
	// Number of days for metric baking; specify duration for analysis.
	MetricBakeDays *float64 `pulumi:"metricBakeDays"`
	// Specify metadata columns for breaking down metric analysis.
	MetricDimensionColumns []string `pulumi:"metricDimensionColumns"`
	// For Count, Sum, Mean, User Count aggregation types: the name of metric source
	MetricSourceName *string `pulumi:"metricSourceName"`
	// Aggregation type for numerator; Allowed: count┃sum┃mean┃daily*participation┃ratio┃funnel┃count*distinct┃percentile.
	NumeratorAggregation *string `pulumi:"numeratorAggregation"`
	// Flag to include only users with a conversion event in the metric.
	OnlyIncludeUsersWithConversionEvent *bool `pulumi:"onlyIncludeUsersWithConversionEvent"`
	// Percentile value for statistical calculations.
	Percentile *float64 `pulumi:"percentile"`
	// General time window for rollup; can specify custom settings.
	RollupTimeWindow *string `pulumi:"rollupTimeWindow"`
	// Column name representing the metric’s value.
	ValueColumn *string `pulumi:"valueColumn"`
	// Threshold value for filtering metrics.
	ValueThreshold      *float64 `pulumi:"valueThreshold"`
	WaitForCohortWindow *bool    `pulumi:"waitForCohortWindow"`
	// High threshold for winsorization; must be between 0 and 1.
	WinsorizationHigh *float64 `pulumi:"winsorizationHigh"`
	// Low threshold for winsorization; must be between 0 and 1.
	WinsorizationLow *float64 `pulumi:"winsorizationLow"`
}

// MetricWarehouseNativeInput is an input type that accepts MetricWarehouseNativeArgs and MetricWarehouseNativeOutput values.
// You can construct a concrete instance of `MetricWarehouseNativeInput` via:
//
//	MetricWarehouseNativeArgs{...}
type MetricWarehouseNativeInput interface {
	pulumi.Input

	ToMetricWarehouseNativeOutput() MetricWarehouseNativeOutput
	ToMetricWarehouseNativeOutputWithContext(context.Context) MetricWarehouseNativeOutput
}

type MetricWarehouseNativeArgs struct {
	// Allowed: count┃sum┃mean┃daily*participation┃ratio┃funnel┃count*distinct┃percentile
	Aggregation pulumi.StringPtrInput `pulumi:"aggregation"`
	// Include units which do not have a denominator. Only applicable to ratios.
	AllowNullRatioDenominator pulumi.BoolPtrInput `pulumi:"allowNullRatioDenominator"`
	// Maximum cap for metric values.
	Cap pulumi.Float64PtrInput `pulumi:"cap"`
	// Filtering criteria for the metric source
	Criterias MetricWarehouseNativeCriteriaArrayInput `pulumi:"criterias"`
	// Attribution window for CUPED adjustments in days.
	CupedAttributionWindow pulumi.Float64PtrInput `pulumi:"cupedAttributionWindow"`
	// Custom end date for rollup in days since exposure.
	CustomRollUpEnd pulumi.Float64PtrInput `pulumi:"customRollUpEnd"`
	// Custom start date for rollup in days since exposure.
	CustomRollUpStart pulumi.Float64PtrInput `pulumi:"customRollUpStart"`
	// Allowed: count┃sum┃mean┃daily*participation┃ratio┃funnel┃count*distinct┃percentile
	DenominatorAggregation pulumi.StringPtrInput `pulumi:"denominatorAggregation"`
	// Filtering criteria for the denominator metric source, if this metric is a ratio
	DenominatorCriterias MetricWarehouseNativeDenominatorCriteriaArrayInput `pulumi:"denominatorCriterias"`
	// Custom end date for rollup in days since exposure.
	DenominatorCustomRollupEnd pulumi.Float64PtrInput `pulumi:"denominatorCustomRollupEnd"`
	// Custom start date for rollup in days since exposure.
	DenominatorCustomRollupStart pulumi.Float64PtrInput `pulumi:"denominatorCustomRollupStart"`
	// Name of the metric source for the denominator.
	DenominatorMetricSourceName pulumi.StringPtrInput `pulumi:"denominatorMetricSourceName"`
	// Time window for the denominator metric. Specify "custom" for a custom window.
	DenominatorRollupTimeWindow pulumi.StringPtrInput `pulumi:"denominatorRollupTimeWindow"`
	// Column name for the denominator’s value.
	DenominatorValueColumn pulumi.StringPtrInput `pulumi:"denominatorValueColumn"`
	// Duration for counting funnel events in days.
	FunnelCalculationWindow pulumi.Float64PtrInput `pulumi:"funnelCalculationWindow"`
	// Allowed: users┃sessions for distinct count method in funnel events.
	FunnelCountDistinct pulumi.StringPtrInput `pulumi:"funnelCountDistinct"`
	// List of funnel events with associated criteria and identifiers.
	FunnelEvents MetricWarehouseNativeFunnelEventArrayInput `pulumi:"funnelEvents"`
	// Allowed: start_event┃exposure to determine funnel start criteria.
	FunnelStartCriteria pulumi.StringPtrInput `pulumi:"funnelStartCriteria"`
	// Number of days for metric baking; specify duration for analysis.
	MetricBakeDays pulumi.Float64PtrInput `pulumi:"metricBakeDays"`
	// Specify metadata columns for breaking down metric analysis.
	MetricDimensionColumns pulumi.StringArrayInput `pulumi:"metricDimensionColumns"`
	// For Count, Sum, Mean, User Count aggregation types: the name of metric source
	MetricSourceName pulumi.StringPtrInput `pulumi:"metricSourceName"`
	// Aggregation type for numerator; Allowed: count┃sum┃mean┃daily*participation┃ratio┃funnel┃count*distinct┃percentile.
	NumeratorAggregation pulumi.StringPtrInput `pulumi:"numeratorAggregation"`
	// Flag to include only users with a conversion event in the metric.
	OnlyIncludeUsersWithConversionEvent pulumi.BoolPtrInput `pulumi:"onlyIncludeUsersWithConversionEvent"`
	// Percentile value for statistical calculations.
	Percentile pulumi.Float64PtrInput `pulumi:"percentile"`
	// General time window for rollup; can specify custom settings.
	RollupTimeWindow pulumi.StringPtrInput `pulumi:"rollupTimeWindow"`
	// Column name representing the metric’s value.
	ValueColumn pulumi.StringPtrInput `pulumi:"valueColumn"`
	// Threshold value for filtering metrics.
	ValueThreshold      pulumi.Float64PtrInput `pulumi:"valueThreshold"`
	WaitForCohortWindow pulumi.BoolPtrInput    `pulumi:"waitForCohortWindow"`
	// High threshold for winsorization; must be between 0 and 1.
	WinsorizationHigh pulumi.Float64PtrInput `pulumi:"winsorizationHigh"`
	// Low threshold for winsorization; must be between 0 and 1.
	WinsorizationLow pulumi.Float64PtrInput `pulumi:"winsorizationLow"`
}

func (MetricWarehouseNativeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricWarehouseNative)(nil)).Elem()
}

func (i MetricWarehouseNativeArgs) ToMetricWarehouseNativeOutput() MetricWarehouseNativeOutput {
	return i.ToMetricWarehouseNativeOutputWithContext(context.Background())
}

func (i MetricWarehouseNativeArgs) ToMetricWarehouseNativeOutputWithContext(ctx context.Context) MetricWarehouseNativeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricWarehouseNativeOutput)
}

func (i MetricWarehouseNativeArgs) ToMetricWarehouseNativePtrOutput() MetricWarehouseNativePtrOutput {
	return i.ToMetricWarehouseNativePtrOutputWithContext(context.Background())
}

func (i MetricWarehouseNativeArgs) ToMetricWarehouseNativePtrOutputWithContext(ctx context.Context) MetricWarehouseNativePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricWarehouseNativeOutput).ToMetricWarehouseNativePtrOutputWithContext(ctx)
}

// MetricWarehouseNativePtrInput is an input type that accepts MetricWarehouseNativeArgs, MetricWarehouseNativePtr and MetricWarehouseNativePtrOutput values.
// You can construct a concrete instance of `MetricWarehouseNativePtrInput` via:
//
//	        MetricWarehouseNativeArgs{...}
//
//	or:
//
//	        nil
type MetricWarehouseNativePtrInput interface {
	pulumi.Input

	ToMetricWarehouseNativePtrOutput() MetricWarehouseNativePtrOutput
	ToMetricWarehouseNativePtrOutputWithContext(context.Context) MetricWarehouseNativePtrOutput
}

type metricWarehouseNativePtrType MetricWarehouseNativeArgs

func MetricWarehouseNativePtr(v *MetricWarehouseNativeArgs) MetricWarehouseNativePtrInput {
	return (*metricWarehouseNativePtrType)(v)
}

func (*metricWarehouseNativePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricWarehouseNative)(nil)).Elem()
}

func (i *metricWarehouseNativePtrType) ToMetricWarehouseNativePtrOutput() MetricWarehouseNativePtrOutput {
	return i.ToMetricWarehouseNativePtrOutputWithContext(context.Background())
}

func (i *metricWarehouseNativePtrType) ToMetricWarehouseNativePtrOutputWithContext(ctx context.Context) MetricWarehouseNativePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricWarehouseNativePtrOutput)
}

type MetricWarehouseNativeOutput struct{ *pulumi.OutputState }

func (MetricWarehouseNativeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricWarehouseNative)(nil)).Elem()
}

func (o MetricWarehouseNativeOutput) ToMetricWarehouseNativeOutput() MetricWarehouseNativeOutput {
	return o
}

func (o MetricWarehouseNativeOutput) ToMetricWarehouseNativeOutputWithContext(ctx context.Context) MetricWarehouseNativeOutput {
	return o
}

func (o MetricWarehouseNativeOutput) ToMetricWarehouseNativePtrOutput() MetricWarehouseNativePtrOutput {
	return o.ToMetricWarehouseNativePtrOutputWithContext(context.Background())
}

func (o MetricWarehouseNativeOutput) ToMetricWarehouseNativePtrOutputWithContext(ctx context.Context) MetricWarehouseNativePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetricWarehouseNative) *MetricWarehouseNative {
		return &v
	}).(MetricWarehouseNativePtrOutput)
}

// Allowed: count┃sum┃mean┃daily*participation┃ratio┃funnel┃count*distinct┃percentile
func (o MetricWarehouseNativeOutput) Aggregation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *string { return v.Aggregation }).(pulumi.StringPtrOutput)
}

// Include units which do not have a denominator. Only applicable to ratios.
func (o MetricWarehouseNativeOutput) AllowNullRatioDenominator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *bool { return v.AllowNullRatioDenominator }).(pulumi.BoolPtrOutput)
}

// Maximum cap for metric values.
func (o MetricWarehouseNativeOutput) Cap() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *float64 { return v.Cap }).(pulumi.Float64PtrOutput)
}

// Filtering criteria for the metric source
func (o MetricWarehouseNativeOutput) Criterias() MetricWarehouseNativeCriteriaArrayOutput {
	return o.ApplyT(func(v MetricWarehouseNative) []MetricWarehouseNativeCriteria { return v.Criterias }).(MetricWarehouseNativeCriteriaArrayOutput)
}

// Attribution window for CUPED adjustments in days.
func (o MetricWarehouseNativeOutput) CupedAttributionWindow() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *float64 { return v.CupedAttributionWindow }).(pulumi.Float64PtrOutput)
}

// Custom end date for rollup in days since exposure.
func (o MetricWarehouseNativeOutput) CustomRollUpEnd() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *float64 { return v.CustomRollUpEnd }).(pulumi.Float64PtrOutput)
}

// Custom start date for rollup in days since exposure.
func (o MetricWarehouseNativeOutput) CustomRollUpStart() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *float64 { return v.CustomRollUpStart }).(pulumi.Float64PtrOutput)
}

// Allowed: count┃sum┃mean┃daily*participation┃ratio┃funnel┃count*distinct┃percentile
func (o MetricWarehouseNativeOutput) DenominatorAggregation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *string { return v.DenominatorAggregation }).(pulumi.StringPtrOutput)
}

// Filtering criteria for the denominator metric source, if this metric is a ratio
func (o MetricWarehouseNativeOutput) DenominatorCriterias() MetricWarehouseNativeDenominatorCriteriaArrayOutput {
	return o.ApplyT(func(v MetricWarehouseNative) []MetricWarehouseNativeDenominatorCriteria {
		return v.DenominatorCriterias
	}).(MetricWarehouseNativeDenominatorCriteriaArrayOutput)
}

// Custom end date for rollup in days since exposure.
func (o MetricWarehouseNativeOutput) DenominatorCustomRollupEnd() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *float64 { return v.DenominatorCustomRollupEnd }).(pulumi.Float64PtrOutput)
}

// Custom start date for rollup in days since exposure.
func (o MetricWarehouseNativeOutput) DenominatorCustomRollupStart() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *float64 { return v.DenominatorCustomRollupStart }).(pulumi.Float64PtrOutput)
}

// Name of the metric source for the denominator.
func (o MetricWarehouseNativeOutput) DenominatorMetricSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *string { return v.DenominatorMetricSourceName }).(pulumi.StringPtrOutput)
}

// Time window for the denominator metric. Specify "custom" for a custom window.
func (o MetricWarehouseNativeOutput) DenominatorRollupTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *string { return v.DenominatorRollupTimeWindow }).(pulumi.StringPtrOutput)
}

// Column name for the denominator’s value.
func (o MetricWarehouseNativeOutput) DenominatorValueColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *string { return v.DenominatorValueColumn }).(pulumi.StringPtrOutput)
}

// Duration for counting funnel events in days.
func (o MetricWarehouseNativeOutput) FunnelCalculationWindow() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *float64 { return v.FunnelCalculationWindow }).(pulumi.Float64PtrOutput)
}

// Allowed: users┃sessions for distinct count method in funnel events.
func (o MetricWarehouseNativeOutput) FunnelCountDistinct() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *string { return v.FunnelCountDistinct }).(pulumi.StringPtrOutput)
}

// List of funnel events with associated criteria and identifiers.
func (o MetricWarehouseNativeOutput) FunnelEvents() MetricWarehouseNativeFunnelEventArrayOutput {
	return o.ApplyT(func(v MetricWarehouseNative) []MetricWarehouseNativeFunnelEvent { return v.FunnelEvents }).(MetricWarehouseNativeFunnelEventArrayOutput)
}

// Allowed: start_event┃exposure to determine funnel start criteria.
func (o MetricWarehouseNativeOutput) FunnelStartCriteria() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *string { return v.FunnelStartCriteria }).(pulumi.StringPtrOutput)
}

// Number of days for metric baking; specify duration for analysis.
func (o MetricWarehouseNativeOutput) MetricBakeDays() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *float64 { return v.MetricBakeDays }).(pulumi.Float64PtrOutput)
}

// Specify metadata columns for breaking down metric analysis.
func (o MetricWarehouseNativeOutput) MetricDimensionColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricWarehouseNative) []string { return v.MetricDimensionColumns }).(pulumi.StringArrayOutput)
}

// For Count, Sum, Mean, User Count aggregation types: the name of metric source
func (o MetricWarehouseNativeOutput) MetricSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *string { return v.MetricSourceName }).(pulumi.StringPtrOutput)
}

// Aggregation type for numerator; Allowed: count┃sum┃mean┃daily*participation┃ratio┃funnel┃count*distinct┃percentile.
func (o MetricWarehouseNativeOutput) NumeratorAggregation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *string { return v.NumeratorAggregation }).(pulumi.StringPtrOutput)
}

// Flag to include only users with a conversion event in the metric.
func (o MetricWarehouseNativeOutput) OnlyIncludeUsersWithConversionEvent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *bool { return v.OnlyIncludeUsersWithConversionEvent }).(pulumi.BoolPtrOutput)
}

// Percentile value for statistical calculations.
func (o MetricWarehouseNativeOutput) Percentile() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *float64 { return v.Percentile }).(pulumi.Float64PtrOutput)
}

// General time window for rollup; can specify custom settings.
func (o MetricWarehouseNativeOutput) RollupTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *string { return v.RollupTimeWindow }).(pulumi.StringPtrOutput)
}

// Column name representing the metric’s value.
func (o MetricWarehouseNativeOutput) ValueColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *string { return v.ValueColumn }).(pulumi.StringPtrOutput)
}

// Threshold value for filtering metrics.
func (o MetricWarehouseNativeOutput) ValueThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *float64 { return v.ValueThreshold }).(pulumi.Float64PtrOutput)
}

func (o MetricWarehouseNativeOutput) WaitForCohortWindow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *bool { return v.WaitForCohortWindow }).(pulumi.BoolPtrOutput)
}

// High threshold for winsorization; must be between 0 and 1.
func (o MetricWarehouseNativeOutput) WinsorizationHigh() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *float64 { return v.WinsorizationHigh }).(pulumi.Float64PtrOutput)
}

// Low threshold for winsorization; must be between 0 and 1.
func (o MetricWarehouseNativeOutput) WinsorizationLow() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricWarehouseNative) *float64 { return v.WinsorizationLow }).(pulumi.Float64PtrOutput)
}

type MetricWarehouseNativePtrOutput struct{ *pulumi.OutputState }

func (MetricWarehouseNativePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricWarehouseNative)(nil)).Elem()
}

func (o MetricWarehouseNativePtrOutput) ToMetricWarehouseNativePtrOutput() MetricWarehouseNativePtrOutput {
	return o
}

func (o MetricWarehouseNativePtrOutput) ToMetricWarehouseNativePtrOutputWithContext(ctx context.Context) MetricWarehouseNativePtrOutput {
	return o
}

func (o MetricWarehouseNativePtrOutput) Elem() MetricWarehouseNativeOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) MetricWarehouseNative {
		if v != nil {
			return *v
		}
		var ret MetricWarehouseNative
		return ret
	}).(MetricWarehouseNativeOutput)
}

// Allowed: count┃sum┃mean┃daily*participation┃ratio┃funnel┃count*distinct┃percentile
func (o MetricWarehouseNativePtrOutput) Aggregation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *string {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(pulumi.StringPtrOutput)
}

// Include units which do not have a denominator. Only applicable to ratios.
func (o MetricWarehouseNativePtrOutput) AllowNullRatioDenominator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *bool {
		if v == nil {
			return nil
		}
		return v.AllowNullRatioDenominator
	}).(pulumi.BoolPtrOutput)
}

// Maximum cap for metric values.
func (o MetricWarehouseNativePtrOutput) Cap() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *float64 {
		if v == nil {
			return nil
		}
		return v.Cap
	}).(pulumi.Float64PtrOutput)
}

// Filtering criteria for the metric source
func (o MetricWarehouseNativePtrOutput) Criterias() MetricWarehouseNativeCriteriaArrayOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) []MetricWarehouseNativeCriteria {
		if v == nil {
			return nil
		}
		return v.Criterias
	}).(MetricWarehouseNativeCriteriaArrayOutput)
}

// Attribution window for CUPED adjustments in days.
func (o MetricWarehouseNativePtrOutput) CupedAttributionWindow() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *float64 {
		if v == nil {
			return nil
		}
		return v.CupedAttributionWindow
	}).(pulumi.Float64PtrOutput)
}

// Custom end date for rollup in days since exposure.
func (o MetricWarehouseNativePtrOutput) CustomRollUpEnd() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *float64 {
		if v == nil {
			return nil
		}
		return v.CustomRollUpEnd
	}).(pulumi.Float64PtrOutput)
}

// Custom start date for rollup in days since exposure.
func (o MetricWarehouseNativePtrOutput) CustomRollUpStart() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *float64 {
		if v == nil {
			return nil
		}
		return v.CustomRollUpStart
	}).(pulumi.Float64PtrOutput)
}

// Allowed: count┃sum┃mean┃daily*participation┃ratio┃funnel┃count*distinct┃percentile
func (o MetricWarehouseNativePtrOutput) DenominatorAggregation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *string {
		if v == nil {
			return nil
		}
		return v.DenominatorAggregation
	}).(pulumi.StringPtrOutput)
}

// Filtering criteria for the denominator metric source, if this metric is a ratio
func (o MetricWarehouseNativePtrOutput) DenominatorCriterias() MetricWarehouseNativeDenominatorCriteriaArrayOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) []MetricWarehouseNativeDenominatorCriteria {
		if v == nil {
			return nil
		}
		return v.DenominatorCriterias
	}).(MetricWarehouseNativeDenominatorCriteriaArrayOutput)
}

// Custom end date for rollup in days since exposure.
func (o MetricWarehouseNativePtrOutput) DenominatorCustomRollupEnd() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *float64 {
		if v == nil {
			return nil
		}
		return v.DenominatorCustomRollupEnd
	}).(pulumi.Float64PtrOutput)
}

// Custom start date for rollup in days since exposure.
func (o MetricWarehouseNativePtrOutput) DenominatorCustomRollupStart() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *float64 {
		if v == nil {
			return nil
		}
		return v.DenominatorCustomRollupStart
	}).(pulumi.Float64PtrOutput)
}

// Name of the metric source for the denominator.
func (o MetricWarehouseNativePtrOutput) DenominatorMetricSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *string {
		if v == nil {
			return nil
		}
		return v.DenominatorMetricSourceName
	}).(pulumi.StringPtrOutput)
}

// Time window for the denominator metric. Specify "custom" for a custom window.
func (o MetricWarehouseNativePtrOutput) DenominatorRollupTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *string {
		if v == nil {
			return nil
		}
		return v.DenominatorRollupTimeWindow
	}).(pulumi.StringPtrOutput)
}

// Column name for the denominator’s value.
func (o MetricWarehouseNativePtrOutput) DenominatorValueColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *string {
		if v == nil {
			return nil
		}
		return v.DenominatorValueColumn
	}).(pulumi.StringPtrOutput)
}

// Duration for counting funnel events in days.
func (o MetricWarehouseNativePtrOutput) FunnelCalculationWindow() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *float64 {
		if v == nil {
			return nil
		}
		return v.FunnelCalculationWindow
	}).(pulumi.Float64PtrOutput)
}

// Allowed: users┃sessions for distinct count method in funnel events.
func (o MetricWarehouseNativePtrOutput) FunnelCountDistinct() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *string {
		if v == nil {
			return nil
		}
		return v.FunnelCountDistinct
	}).(pulumi.StringPtrOutput)
}

// List of funnel events with associated criteria and identifiers.
func (o MetricWarehouseNativePtrOutput) FunnelEvents() MetricWarehouseNativeFunnelEventArrayOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) []MetricWarehouseNativeFunnelEvent {
		if v == nil {
			return nil
		}
		return v.FunnelEvents
	}).(MetricWarehouseNativeFunnelEventArrayOutput)
}

// Allowed: start_event┃exposure to determine funnel start criteria.
func (o MetricWarehouseNativePtrOutput) FunnelStartCriteria() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *string {
		if v == nil {
			return nil
		}
		return v.FunnelStartCriteria
	}).(pulumi.StringPtrOutput)
}

// Number of days for metric baking; specify duration for analysis.
func (o MetricWarehouseNativePtrOutput) MetricBakeDays() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *float64 {
		if v == nil {
			return nil
		}
		return v.MetricBakeDays
	}).(pulumi.Float64PtrOutput)
}

// Specify metadata columns for breaking down metric analysis.
func (o MetricWarehouseNativePtrOutput) MetricDimensionColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) []string {
		if v == nil {
			return nil
		}
		return v.MetricDimensionColumns
	}).(pulumi.StringArrayOutput)
}

// For Count, Sum, Mean, User Count aggregation types: the name of metric source
func (o MetricWarehouseNativePtrOutput) MetricSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *string {
		if v == nil {
			return nil
		}
		return v.MetricSourceName
	}).(pulumi.StringPtrOutput)
}

// Aggregation type for numerator; Allowed: count┃sum┃mean┃daily*participation┃ratio┃funnel┃count*distinct┃percentile.
func (o MetricWarehouseNativePtrOutput) NumeratorAggregation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *string {
		if v == nil {
			return nil
		}
		return v.NumeratorAggregation
	}).(pulumi.StringPtrOutput)
}

// Flag to include only users with a conversion event in the metric.
func (o MetricWarehouseNativePtrOutput) OnlyIncludeUsersWithConversionEvent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *bool {
		if v == nil {
			return nil
		}
		return v.OnlyIncludeUsersWithConversionEvent
	}).(pulumi.BoolPtrOutput)
}

// Percentile value for statistical calculations.
func (o MetricWarehouseNativePtrOutput) Percentile() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *float64 {
		if v == nil {
			return nil
		}
		return v.Percentile
	}).(pulumi.Float64PtrOutput)
}

// General time window for rollup; can specify custom settings.
func (o MetricWarehouseNativePtrOutput) RollupTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *string {
		if v == nil {
			return nil
		}
		return v.RollupTimeWindow
	}).(pulumi.StringPtrOutput)
}

// Column name representing the metric’s value.
func (o MetricWarehouseNativePtrOutput) ValueColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *string {
		if v == nil {
			return nil
		}
		return v.ValueColumn
	}).(pulumi.StringPtrOutput)
}

// Threshold value for filtering metrics.
func (o MetricWarehouseNativePtrOutput) ValueThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *float64 {
		if v == nil {
			return nil
		}
		return v.ValueThreshold
	}).(pulumi.Float64PtrOutput)
}

func (o MetricWarehouseNativePtrOutput) WaitForCohortWindow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *bool {
		if v == nil {
			return nil
		}
		return v.WaitForCohortWindow
	}).(pulumi.BoolPtrOutput)
}

// High threshold for winsorization; must be between 0 and 1.
func (o MetricWarehouseNativePtrOutput) WinsorizationHigh() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *float64 {
		if v == nil {
			return nil
		}
		return v.WinsorizationHigh
	}).(pulumi.Float64PtrOutput)
}

// Low threshold for winsorization; must be between 0 and 1.
func (o MetricWarehouseNativePtrOutput) WinsorizationLow() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MetricWarehouseNative) *float64 {
		if v == nil {
			return nil
		}
		return v.WinsorizationLow
	}).(pulumi.Float64PtrOutput)
}

type MetricWarehouseNativeCriteria struct {
	// Optional column specifying which data attribute to filter on.
	Column *string `pulumi:"column"`
	// sql*filter, start*withs, ends*with, and after*exposure are only applicable in Warehouse Native
	Condition string `pulumi:"condition"`
	// If true, overrides null values in criterion evaluation.
	NullVacuousOverride *bool `pulumi:"nullVacuousOverride"`
	// Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `userCustom`; in Warehouse Native, this should always be `metadata`.
	Type string `pulumi:"type"`
	// Optional array of values for the criterion to match against.
	Values []string `pulumi:"values"`
}

// MetricWarehouseNativeCriteriaInput is an input type that accepts MetricWarehouseNativeCriteriaArgs and MetricWarehouseNativeCriteriaOutput values.
// You can construct a concrete instance of `MetricWarehouseNativeCriteriaInput` via:
//
//	MetricWarehouseNativeCriteriaArgs{...}
type MetricWarehouseNativeCriteriaInput interface {
	pulumi.Input

	ToMetricWarehouseNativeCriteriaOutput() MetricWarehouseNativeCriteriaOutput
	ToMetricWarehouseNativeCriteriaOutputWithContext(context.Context) MetricWarehouseNativeCriteriaOutput
}

type MetricWarehouseNativeCriteriaArgs struct {
	// Optional column specifying which data attribute to filter on.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// sql*filter, start*withs, ends*with, and after*exposure are only applicable in Warehouse Native
	Condition pulumi.StringInput `pulumi:"condition"`
	// If true, overrides null values in criterion evaluation.
	NullVacuousOverride pulumi.BoolPtrInput `pulumi:"nullVacuousOverride"`
	// Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `userCustom`; in Warehouse Native, this should always be `metadata`.
	Type pulumi.StringInput `pulumi:"type"`
	// Optional array of values for the criterion to match against.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (MetricWarehouseNativeCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricWarehouseNativeCriteria)(nil)).Elem()
}

func (i MetricWarehouseNativeCriteriaArgs) ToMetricWarehouseNativeCriteriaOutput() MetricWarehouseNativeCriteriaOutput {
	return i.ToMetricWarehouseNativeCriteriaOutputWithContext(context.Background())
}

func (i MetricWarehouseNativeCriteriaArgs) ToMetricWarehouseNativeCriteriaOutputWithContext(ctx context.Context) MetricWarehouseNativeCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricWarehouseNativeCriteriaOutput)
}

// MetricWarehouseNativeCriteriaArrayInput is an input type that accepts MetricWarehouseNativeCriteriaArray and MetricWarehouseNativeCriteriaArrayOutput values.
// You can construct a concrete instance of `MetricWarehouseNativeCriteriaArrayInput` via:
//
//	MetricWarehouseNativeCriteriaArray{ MetricWarehouseNativeCriteriaArgs{...} }
type MetricWarehouseNativeCriteriaArrayInput interface {
	pulumi.Input

	ToMetricWarehouseNativeCriteriaArrayOutput() MetricWarehouseNativeCriteriaArrayOutput
	ToMetricWarehouseNativeCriteriaArrayOutputWithContext(context.Context) MetricWarehouseNativeCriteriaArrayOutput
}

type MetricWarehouseNativeCriteriaArray []MetricWarehouseNativeCriteriaInput

func (MetricWarehouseNativeCriteriaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricWarehouseNativeCriteria)(nil)).Elem()
}

func (i MetricWarehouseNativeCriteriaArray) ToMetricWarehouseNativeCriteriaArrayOutput() MetricWarehouseNativeCriteriaArrayOutput {
	return i.ToMetricWarehouseNativeCriteriaArrayOutputWithContext(context.Background())
}

func (i MetricWarehouseNativeCriteriaArray) ToMetricWarehouseNativeCriteriaArrayOutputWithContext(ctx context.Context) MetricWarehouseNativeCriteriaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricWarehouseNativeCriteriaArrayOutput)
}

type MetricWarehouseNativeCriteriaOutput struct{ *pulumi.OutputState }

func (MetricWarehouseNativeCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricWarehouseNativeCriteria)(nil)).Elem()
}

func (o MetricWarehouseNativeCriteriaOutput) ToMetricWarehouseNativeCriteriaOutput() MetricWarehouseNativeCriteriaOutput {
	return o
}

func (o MetricWarehouseNativeCriteriaOutput) ToMetricWarehouseNativeCriteriaOutputWithContext(ctx context.Context) MetricWarehouseNativeCriteriaOutput {
	return o
}

// Optional column specifying which data attribute to filter on.
func (o MetricWarehouseNativeCriteriaOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNativeCriteria) *string { return v.Column }).(pulumi.StringPtrOutput)
}

// sql*filter, start*withs, ends*with, and after*exposure are only applicable in Warehouse Native
func (o MetricWarehouseNativeCriteriaOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v MetricWarehouseNativeCriteria) string { return v.Condition }).(pulumi.StringOutput)
}

// If true, overrides null values in criterion evaluation.
func (o MetricWarehouseNativeCriteriaOutput) NullVacuousOverride() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNativeCriteria) *bool { return v.NullVacuousOverride }).(pulumi.BoolPtrOutput)
}

// Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `userCustom`; in Warehouse Native, this should always be `metadata`.
func (o MetricWarehouseNativeCriteriaOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MetricWarehouseNativeCriteria) string { return v.Type }).(pulumi.StringOutput)
}

// Optional array of values for the criterion to match against.
func (o MetricWarehouseNativeCriteriaOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricWarehouseNativeCriteria) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MetricWarehouseNativeCriteriaArrayOutput struct{ *pulumi.OutputState }

func (MetricWarehouseNativeCriteriaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricWarehouseNativeCriteria)(nil)).Elem()
}

func (o MetricWarehouseNativeCriteriaArrayOutput) ToMetricWarehouseNativeCriteriaArrayOutput() MetricWarehouseNativeCriteriaArrayOutput {
	return o
}

func (o MetricWarehouseNativeCriteriaArrayOutput) ToMetricWarehouseNativeCriteriaArrayOutputWithContext(ctx context.Context) MetricWarehouseNativeCriteriaArrayOutput {
	return o
}

func (o MetricWarehouseNativeCriteriaArrayOutput) Index(i pulumi.IntInput) MetricWarehouseNativeCriteriaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricWarehouseNativeCriteria {
		return vs[0].([]MetricWarehouseNativeCriteria)[vs[1].(int)]
	}).(MetricWarehouseNativeCriteriaOutput)
}

type MetricWarehouseNativeDenominatorCriteria struct {
	// Optional column specifying which data attribute to filter on.
	Column *string `pulumi:"column"`
	// sql*filter, start*withs, ends*with, and after*exposure are only applicable in Warehouse Native
	Condition string `pulumi:"condition"`
	// If true, overrides null values in criterion evaluation.
	NullVacuousOverride *bool `pulumi:"nullVacuousOverride"`
	// Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `userCustom`; in Warehouse Native, this should always be `metadata`.
	Type string `pulumi:"type"`
	// Optional array of values for the criterion to match against.
	Values []string `pulumi:"values"`
}

// MetricWarehouseNativeDenominatorCriteriaInput is an input type that accepts MetricWarehouseNativeDenominatorCriteriaArgs and MetricWarehouseNativeDenominatorCriteriaOutput values.
// You can construct a concrete instance of `MetricWarehouseNativeDenominatorCriteriaInput` via:
//
//	MetricWarehouseNativeDenominatorCriteriaArgs{...}
type MetricWarehouseNativeDenominatorCriteriaInput interface {
	pulumi.Input

	ToMetricWarehouseNativeDenominatorCriteriaOutput() MetricWarehouseNativeDenominatorCriteriaOutput
	ToMetricWarehouseNativeDenominatorCriteriaOutputWithContext(context.Context) MetricWarehouseNativeDenominatorCriteriaOutput
}

type MetricWarehouseNativeDenominatorCriteriaArgs struct {
	// Optional column specifying which data attribute to filter on.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// sql*filter, start*withs, ends*with, and after*exposure are only applicable in Warehouse Native
	Condition pulumi.StringInput `pulumi:"condition"`
	// If true, overrides null values in criterion evaluation.
	NullVacuousOverride pulumi.BoolPtrInput `pulumi:"nullVacuousOverride"`
	// Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `userCustom`; in Warehouse Native, this should always be `metadata`.
	Type pulumi.StringInput `pulumi:"type"`
	// Optional array of values for the criterion to match against.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (MetricWarehouseNativeDenominatorCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricWarehouseNativeDenominatorCriteria)(nil)).Elem()
}

func (i MetricWarehouseNativeDenominatorCriteriaArgs) ToMetricWarehouseNativeDenominatorCriteriaOutput() MetricWarehouseNativeDenominatorCriteriaOutput {
	return i.ToMetricWarehouseNativeDenominatorCriteriaOutputWithContext(context.Background())
}

func (i MetricWarehouseNativeDenominatorCriteriaArgs) ToMetricWarehouseNativeDenominatorCriteriaOutputWithContext(ctx context.Context) MetricWarehouseNativeDenominatorCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricWarehouseNativeDenominatorCriteriaOutput)
}

// MetricWarehouseNativeDenominatorCriteriaArrayInput is an input type that accepts MetricWarehouseNativeDenominatorCriteriaArray and MetricWarehouseNativeDenominatorCriteriaArrayOutput values.
// You can construct a concrete instance of `MetricWarehouseNativeDenominatorCriteriaArrayInput` via:
//
//	MetricWarehouseNativeDenominatorCriteriaArray{ MetricWarehouseNativeDenominatorCriteriaArgs{...} }
type MetricWarehouseNativeDenominatorCriteriaArrayInput interface {
	pulumi.Input

	ToMetricWarehouseNativeDenominatorCriteriaArrayOutput() MetricWarehouseNativeDenominatorCriteriaArrayOutput
	ToMetricWarehouseNativeDenominatorCriteriaArrayOutputWithContext(context.Context) MetricWarehouseNativeDenominatorCriteriaArrayOutput
}

type MetricWarehouseNativeDenominatorCriteriaArray []MetricWarehouseNativeDenominatorCriteriaInput

func (MetricWarehouseNativeDenominatorCriteriaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricWarehouseNativeDenominatorCriteria)(nil)).Elem()
}

func (i MetricWarehouseNativeDenominatorCriteriaArray) ToMetricWarehouseNativeDenominatorCriteriaArrayOutput() MetricWarehouseNativeDenominatorCriteriaArrayOutput {
	return i.ToMetricWarehouseNativeDenominatorCriteriaArrayOutputWithContext(context.Background())
}

func (i MetricWarehouseNativeDenominatorCriteriaArray) ToMetricWarehouseNativeDenominatorCriteriaArrayOutputWithContext(ctx context.Context) MetricWarehouseNativeDenominatorCriteriaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricWarehouseNativeDenominatorCriteriaArrayOutput)
}

type MetricWarehouseNativeDenominatorCriteriaOutput struct{ *pulumi.OutputState }

func (MetricWarehouseNativeDenominatorCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricWarehouseNativeDenominatorCriteria)(nil)).Elem()
}

func (o MetricWarehouseNativeDenominatorCriteriaOutput) ToMetricWarehouseNativeDenominatorCriteriaOutput() MetricWarehouseNativeDenominatorCriteriaOutput {
	return o
}

func (o MetricWarehouseNativeDenominatorCriteriaOutput) ToMetricWarehouseNativeDenominatorCriteriaOutputWithContext(ctx context.Context) MetricWarehouseNativeDenominatorCriteriaOutput {
	return o
}

// Optional column specifying which data attribute to filter on.
func (o MetricWarehouseNativeDenominatorCriteriaOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNativeDenominatorCriteria) *string { return v.Column }).(pulumi.StringPtrOutput)
}

// sql*filter, start*withs, ends*with, and after*exposure are only applicable in Warehouse Native
func (o MetricWarehouseNativeDenominatorCriteriaOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v MetricWarehouseNativeDenominatorCriteria) string { return v.Condition }).(pulumi.StringOutput)
}

// If true, overrides null values in criterion evaluation.
func (o MetricWarehouseNativeDenominatorCriteriaOutput) NullVacuousOverride() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNativeDenominatorCriteria) *bool { return v.NullVacuousOverride }).(pulumi.BoolPtrOutput)
}

// Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `userCustom`; in Warehouse Native, this should always be `metadata`.
func (o MetricWarehouseNativeDenominatorCriteriaOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MetricWarehouseNativeDenominatorCriteria) string { return v.Type }).(pulumi.StringOutput)
}

// Optional array of values for the criterion to match against.
func (o MetricWarehouseNativeDenominatorCriteriaOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricWarehouseNativeDenominatorCriteria) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MetricWarehouseNativeDenominatorCriteriaArrayOutput struct{ *pulumi.OutputState }

func (MetricWarehouseNativeDenominatorCriteriaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricWarehouseNativeDenominatorCriteria)(nil)).Elem()
}

func (o MetricWarehouseNativeDenominatorCriteriaArrayOutput) ToMetricWarehouseNativeDenominatorCriteriaArrayOutput() MetricWarehouseNativeDenominatorCriteriaArrayOutput {
	return o
}

func (o MetricWarehouseNativeDenominatorCriteriaArrayOutput) ToMetricWarehouseNativeDenominatorCriteriaArrayOutputWithContext(ctx context.Context) MetricWarehouseNativeDenominatorCriteriaArrayOutput {
	return o
}

func (o MetricWarehouseNativeDenominatorCriteriaArrayOutput) Index(i pulumi.IntInput) MetricWarehouseNativeDenominatorCriteriaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricWarehouseNativeDenominatorCriteria {
		return vs[0].([]MetricWarehouseNativeDenominatorCriteria)[vs[1].(int)]
	}).(MetricWarehouseNativeDenominatorCriteriaOutput)
}

type MetricWarehouseNativeFunnelEvent struct {
	// Optional array of criteria to filter the funnel events, defined by various types and conditions.
	Criterias []MetricWarehouseNativeFunnelEventCriteria `pulumi:"criterias"`
	// Optional name of the metric source associated with the funnel event.
	MetricSourceName *string `pulumi:"metricSourceName"`
	// Optional step name for the funnel event, can be null if not specified.
	Name *string `pulumi:"name"`
	// Name of column which being used as session identifier. Funnel event with the same metric source
	SessionIdentifierField *string `pulumi:"sessionIdentifierField"`
}

// MetricWarehouseNativeFunnelEventInput is an input type that accepts MetricWarehouseNativeFunnelEventArgs and MetricWarehouseNativeFunnelEventOutput values.
// You can construct a concrete instance of `MetricWarehouseNativeFunnelEventInput` via:
//
//	MetricWarehouseNativeFunnelEventArgs{...}
type MetricWarehouseNativeFunnelEventInput interface {
	pulumi.Input

	ToMetricWarehouseNativeFunnelEventOutput() MetricWarehouseNativeFunnelEventOutput
	ToMetricWarehouseNativeFunnelEventOutputWithContext(context.Context) MetricWarehouseNativeFunnelEventOutput
}

type MetricWarehouseNativeFunnelEventArgs struct {
	// Optional array of criteria to filter the funnel events, defined by various types and conditions.
	Criterias MetricWarehouseNativeFunnelEventCriteriaArrayInput `pulumi:"criterias"`
	// Optional name of the metric source associated with the funnel event.
	MetricSourceName pulumi.StringPtrInput `pulumi:"metricSourceName"`
	// Optional step name for the funnel event, can be null if not specified.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Name of column which being used as session identifier. Funnel event with the same metric source
	SessionIdentifierField pulumi.StringPtrInput `pulumi:"sessionIdentifierField"`
}

func (MetricWarehouseNativeFunnelEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricWarehouseNativeFunnelEvent)(nil)).Elem()
}

func (i MetricWarehouseNativeFunnelEventArgs) ToMetricWarehouseNativeFunnelEventOutput() MetricWarehouseNativeFunnelEventOutput {
	return i.ToMetricWarehouseNativeFunnelEventOutputWithContext(context.Background())
}

func (i MetricWarehouseNativeFunnelEventArgs) ToMetricWarehouseNativeFunnelEventOutputWithContext(ctx context.Context) MetricWarehouseNativeFunnelEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricWarehouseNativeFunnelEventOutput)
}

// MetricWarehouseNativeFunnelEventArrayInput is an input type that accepts MetricWarehouseNativeFunnelEventArray and MetricWarehouseNativeFunnelEventArrayOutput values.
// You can construct a concrete instance of `MetricWarehouseNativeFunnelEventArrayInput` via:
//
//	MetricWarehouseNativeFunnelEventArray{ MetricWarehouseNativeFunnelEventArgs{...} }
type MetricWarehouseNativeFunnelEventArrayInput interface {
	pulumi.Input

	ToMetricWarehouseNativeFunnelEventArrayOutput() MetricWarehouseNativeFunnelEventArrayOutput
	ToMetricWarehouseNativeFunnelEventArrayOutputWithContext(context.Context) MetricWarehouseNativeFunnelEventArrayOutput
}

type MetricWarehouseNativeFunnelEventArray []MetricWarehouseNativeFunnelEventInput

func (MetricWarehouseNativeFunnelEventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricWarehouseNativeFunnelEvent)(nil)).Elem()
}

func (i MetricWarehouseNativeFunnelEventArray) ToMetricWarehouseNativeFunnelEventArrayOutput() MetricWarehouseNativeFunnelEventArrayOutput {
	return i.ToMetricWarehouseNativeFunnelEventArrayOutputWithContext(context.Background())
}

func (i MetricWarehouseNativeFunnelEventArray) ToMetricWarehouseNativeFunnelEventArrayOutputWithContext(ctx context.Context) MetricWarehouseNativeFunnelEventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricWarehouseNativeFunnelEventArrayOutput)
}

type MetricWarehouseNativeFunnelEventOutput struct{ *pulumi.OutputState }

func (MetricWarehouseNativeFunnelEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricWarehouseNativeFunnelEvent)(nil)).Elem()
}

func (o MetricWarehouseNativeFunnelEventOutput) ToMetricWarehouseNativeFunnelEventOutput() MetricWarehouseNativeFunnelEventOutput {
	return o
}

func (o MetricWarehouseNativeFunnelEventOutput) ToMetricWarehouseNativeFunnelEventOutputWithContext(ctx context.Context) MetricWarehouseNativeFunnelEventOutput {
	return o
}

// Optional array of criteria to filter the funnel events, defined by various types and conditions.
func (o MetricWarehouseNativeFunnelEventOutput) Criterias() MetricWarehouseNativeFunnelEventCriteriaArrayOutput {
	return o.ApplyT(func(v MetricWarehouseNativeFunnelEvent) []MetricWarehouseNativeFunnelEventCriteria {
		return v.Criterias
	}).(MetricWarehouseNativeFunnelEventCriteriaArrayOutput)
}

// Optional name of the metric source associated with the funnel event.
func (o MetricWarehouseNativeFunnelEventOutput) MetricSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNativeFunnelEvent) *string { return v.MetricSourceName }).(pulumi.StringPtrOutput)
}

// Optional step name for the funnel event, can be null if not specified.
func (o MetricWarehouseNativeFunnelEventOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNativeFunnelEvent) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Name of column which being used as session identifier. Funnel event with the same metric source
func (o MetricWarehouseNativeFunnelEventOutput) SessionIdentifierField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNativeFunnelEvent) *string { return v.SessionIdentifierField }).(pulumi.StringPtrOutput)
}

type MetricWarehouseNativeFunnelEventArrayOutput struct{ *pulumi.OutputState }

func (MetricWarehouseNativeFunnelEventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricWarehouseNativeFunnelEvent)(nil)).Elem()
}

func (o MetricWarehouseNativeFunnelEventArrayOutput) ToMetricWarehouseNativeFunnelEventArrayOutput() MetricWarehouseNativeFunnelEventArrayOutput {
	return o
}

func (o MetricWarehouseNativeFunnelEventArrayOutput) ToMetricWarehouseNativeFunnelEventArrayOutputWithContext(ctx context.Context) MetricWarehouseNativeFunnelEventArrayOutput {
	return o
}

func (o MetricWarehouseNativeFunnelEventArrayOutput) Index(i pulumi.IntInput) MetricWarehouseNativeFunnelEventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricWarehouseNativeFunnelEvent {
		return vs[0].([]MetricWarehouseNativeFunnelEvent)[vs[1].(int)]
	}).(MetricWarehouseNativeFunnelEventOutput)
}

type MetricWarehouseNativeFunnelEventCriteria struct {
	// Optional column specifying which data attribute to filter on.
	Column *string `pulumi:"column"`
	// sql*filter, start*withs, ends*with, and after*exposure are only applicable in Warehouse Native
	Condition string `pulumi:"condition"`
	// If true, overrides null values in criterion evaluation.
	NullVacuousOverride *bool `pulumi:"nullVacuousOverride"`
	// Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `userCustom`; in Warehouse Native, this should always be `metadata`.
	Type string `pulumi:"type"`
	// Optional array of values for the criterion to match against.
	Values []string `pulumi:"values"`
}

// MetricWarehouseNativeFunnelEventCriteriaInput is an input type that accepts MetricWarehouseNativeFunnelEventCriteriaArgs and MetricWarehouseNativeFunnelEventCriteriaOutput values.
// You can construct a concrete instance of `MetricWarehouseNativeFunnelEventCriteriaInput` via:
//
//	MetricWarehouseNativeFunnelEventCriteriaArgs{...}
type MetricWarehouseNativeFunnelEventCriteriaInput interface {
	pulumi.Input

	ToMetricWarehouseNativeFunnelEventCriteriaOutput() MetricWarehouseNativeFunnelEventCriteriaOutput
	ToMetricWarehouseNativeFunnelEventCriteriaOutputWithContext(context.Context) MetricWarehouseNativeFunnelEventCriteriaOutput
}

type MetricWarehouseNativeFunnelEventCriteriaArgs struct {
	// Optional column specifying which data attribute to filter on.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// sql*filter, start*withs, ends*with, and after*exposure are only applicable in Warehouse Native
	Condition pulumi.StringInput `pulumi:"condition"`
	// If true, overrides null values in criterion evaluation.
	NullVacuousOverride pulumi.BoolPtrInput `pulumi:"nullVacuousOverride"`
	// Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `userCustom`; in Warehouse Native, this should always be `metadata`.
	Type pulumi.StringInput `pulumi:"type"`
	// Optional array of values for the criterion to match against.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (MetricWarehouseNativeFunnelEventCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricWarehouseNativeFunnelEventCriteria)(nil)).Elem()
}

func (i MetricWarehouseNativeFunnelEventCriteriaArgs) ToMetricWarehouseNativeFunnelEventCriteriaOutput() MetricWarehouseNativeFunnelEventCriteriaOutput {
	return i.ToMetricWarehouseNativeFunnelEventCriteriaOutputWithContext(context.Background())
}

func (i MetricWarehouseNativeFunnelEventCriteriaArgs) ToMetricWarehouseNativeFunnelEventCriteriaOutputWithContext(ctx context.Context) MetricWarehouseNativeFunnelEventCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricWarehouseNativeFunnelEventCriteriaOutput)
}

// MetricWarehouseNativeFunnelEventCriteriaArrayInput is an input type that accepts MetricWarehouseNativeFunnelEventCriteriaArray and MetricWarehouseNativeFunnelEventCriteriaArrayOutput values.
// You can construct a concrete instance of `MetricWarehouseNativeFunnelEventCriteriaArrayInput` via:
//
//	MetricWarehouseNativeFunnelEventCriteriaArray{ MetricWarehouseNativeFunnelEventCriteriaArgs{...} }
type MetricWarehouseNativeFunnelEventCriteriaArrayInput interface {
	pulumi.Input

	ToMetricWarehouseNativeFunnelEventCriteriaArrayOutput() MetricWarehouseNativeFunnelEventCriteriaArrayOutput
	ToMetricWarehouseNativeFunnelEventCriteriaArrayOutputWithContext(context.Context) MetricWarehouseNativeFunnelEventCriteriaArrayOutput
}

type MetricWarehouseNativeFunnelEventCriteriaArray []MetricWarehouseNativeFunnelEventCriteriaInput

func (MetricWarehouseNativeFunnelEventCriteriaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricWarehouseNativeFunnelEventCriteria)(nil)).Elem()
}

func (i MetricWarehouseNativeFunnelEventCriteriaArray) ToMetricWarehouseNativeFunnelEventCriteriaArrayOutput() MetricWarehouseNativeFunnelEventCriteriaArrayOutput {
	return i.ToMetricWarehouseNativeFunnelEventCriteriaArrayOutputWithContext(context.Background())
}

func (i MetricWarehouseNativeFunnelEventCriteriaArray) ToMetricWarehouseNativeFunnelEventCriteriaArrayOutputWithContext(ctx context.Context) MetricWarehouseNativeFunnelEventCriteriaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricWarehouseNativeFunnelEventCriteriaArrayOutput)
}

type MetricWarehouseNativeFunnelEventCriteriaOutput struct{ *pulumi.OutputState }

func (MetricWarehouseNativeFunnelEventCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricWarehouseNativeFunnelEventCriteria)(nil)).Elem()
}

func (o MetricWarehouseNativeFunnelEventCriteriaOutput) ToMetricWarehouseNativeFunnelEventCriteriaOutput() MetricWarehouseNativeFunnelEventCriteriaOutput {
	return o
}

func (o MetricWarehouseNativeFunnelEventCriteriaOutput) ToMetricWarehouseNativeFunnelEventCriteriaOutputWithContext(ctx context.Context) MetricWarehouseNativeFunnelEventCriteriaOutput {
	return o
}

// Optional column specifying which data attribute to filter on.
func (o MetricWarehouseNativeFunnelEventCriteriaOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNativeFunnelEventCriteria) *string { return v.Column }).(pulumi.StringPtrOutput)
}

// sql*filter, start*withs, ends*with, and after*exposure are only applicable in Warehouse Native
func (o MetricWarehouseNativeFunnelEventCriteriaOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v MetricWarehouseNativeFunnelEventCriteria) string { return v.Condition }).(pulumi.StringOutput)
}

// If true, overrides null values in criterion evaluation.
func (o MetricWarehouseNativeFunnelEventCriteriaOutput) NullVacuousOverride() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricWarehouseNativeFunnelEventCriteria) *bool { return v.NullVacuousOverride }).(pulumi.BoolPtrOutput)
}

// Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `userCustom`; in Warehouse Native, this should always be `metadata`.
func (o MetricWarehouseNativeFunnelEventCriteriaOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MetricWarehouseNativeFunnelEventCriteria) string { return v.Type }).(pulumi.StringOutput)
}

// Optional array of values for the criterion to match against.
func (o MetricWarehouseNativeFunnelEventCriteriaOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricWarehouseNativeFunnelEventCriteria) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MetricWarehouseNativeFunnelEventCriteriaArrayOutput struct{ *pulumi.OutputState }

func (MetricWarehouseNativeFunnelEventCriteriaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricWarehouseNativeFunnelEventCriteria)(nil)).Elem()
}

func (o MetricWarehouseNativeFunnelEventCriteriaArrayOutput) ToMetricWarehouseNativeFunnelEventCriteriaArrayOutput() MetricWarehouseNativeFunnelEventCriteriaArrayOutput {
	return o
}

func (o MetricWarehouseNativeFunnelEventCriteriaArrayOutput) ToMetricWarehouseNativeFunnelEventCriteriaArrayOutputWithContext(ctx context.Context) MetricWarehouseNativeFunnelEventCriteriaArrayOutput {
	return o
}

func (o MetricWarehouseNativeFunnelEventCriteriaArrayOutput) Index(i pulumi.IntInput) MetricWarehouseNativeFunnelEventCriteriaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricWarehouseNativeFunnelEventCriteria {
		return vs[0].([]MetricWarehouseNativeFunnelEventCriteria)[vs[1].(int)]
	}).(MetricWarehouseNativeFunnelEventCriteriaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EntityPropertyIdTypeMappingInput)(nil)).Elem(), EntityPropertyIdTypeMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityPropertyIdTypeMappingArrayInput)(nil)).Elem(), EntityPropertyIdTypeMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityPropertyOwnerInput)(nil)).Elem(), EntityPropertyOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityPropertyOwnerPtrInput)(nil)).Elem(), EntityPropertyOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentGroupInput)(nil)).Elem(), ExperimentGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentGroupArrayInput)(nil)).Elem(), ExperimentGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentLinkInput)(nil)).Elem(), ExperimentLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentLinkArrayInput)(nil)).Elem(), ExperimentLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentPrimaryMetricInput)(nil)).Elem(), ExperimentPrimaryMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentPrimaryMetricArrayInput)(nil)).Elem(), ExperimentPrimaryMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentSecondaryMetricInput)(nil)).Elem(), ExperimentSecondaryMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentSecondaryMetricArrayInput)(nil)).Elem(), ExperimentSecondaryMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GateMonitoringMetricInput)(nil)).Elem(), GateMonitoringMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GateMonitoringMetricArrayInput)(nil)).Elem(), GateMonitoringMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GateRuleInput)(nil)).Elem(), GateRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GateRuleArrayInput)(nil)).Elem(), GateRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GateRuleConditionInput)(nil)).Elem(), GateRuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GateRuleConditionArrayInput)(nil)).Elem(), GateRuleConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GateRuleReturnValueInput)(nil)).Elem(), GateRuleReturnValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GateRuleReturnValuePtrInput)(nil)).Elem(), GateRuleReturnValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricFunnelEventListInput)(nil)).Elem(), MetricFunnelEventListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricFunnelEventListArrayInput)(nil)).Elem(), MetricFunnelEventListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricMetricComponentMetricInput)(nil)).Elem(), MetricMetricComponentMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricMetricComponentMetricArrayInput)(nil)).Elem(), MetricMetricComponentMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricMetricEventInput)(nil)).Elem(), MetricMetricEventArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricMetricEventArrayInput)(nil)).Elem(), MetricMetricEventArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricMetricEventCriteriaInput)(nil)).Elem(), MetricMetricEventCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricMetricEventCriteriaArrayInput)(nil)).Elem(), MetricMetricEventCriteriaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricSourceCustomFieldMappingInput)(nil)).Elem(), MetricSourceCustomFieldMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricSourceCustomFieldMappingArrayInput)(nil)).Elem(), MetricSourceCustomFieldMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricSourceIdTypeMappingInput)(nil)).Elem(), MetricSourceIdTypeMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricSourceIdTypeMappingArrayInput)(nil)).Elem(), MetricSourceIdTypeMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricSourceOwnerInput)(nil)).Elem(), MetricSourceOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricSourceOwnerPtrInput)(nil)).Elem(), MetricSourceOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricWarehouseNativeInput)(nil)).Elem(), MetricWarehouseNativeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricWarehouseNativePtrInput)(nil)).Elem(), MetricWarehouseNativeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricWarehouseNativeCriteriaInput)(nil)).Elem(), MetricWarehouseNativeCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricWarehouseNativeCriteriaArrayInput)(nil)).Elem(), MetricWarehouseNativeCriteriaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricWarehouseNativeDenominatorCriteriaInput)(nil)).Elem(), MetricWarehouseNativeDenominatorCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricWarehouseNativeDenominatorCriteriaArrayInput)(nil)).Elem(), MetricWarehouseNativeDenominatorCriteriaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricWarehouseNativeFunnelEventInput)(nil)).Elem(), MetricWarehouseNativeFunnelEventArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricWarehouseNativeFunnelEventArrayInput)(nil)).Elem(), MetricWarehouseNativeFunnelEventArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricWarehouseNativeFunnelEventCriteriaInput)(nil)).Elem(), MetricWarehouseNativeFunnelEventCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricWarehouseNativeFunnelEventCriteriaArrayInput)(nil)).Elem(), MetricWarehouseNativeFunnelEventCriteriaArray{})
	pulumi.RegisterOutputType(EntityPropertyIdTypeMappingOutput{})
	pulumi.RegisterOutputType(EntityPropertyIdTypeMappingArrayOutput{})
	pulumi.RegisterOutputType(EntityPropertyOwnerOutput{})
	pulumi.RegisterOutputType(EntityPropertyOwnerPtrOutput{})
	pulumi.RegisterOutputType(ExperimentGroupOutput{})
	pulumi.RegisterOutputType(ExperimentGroupArrayOutput{})
	pulumi.RegisterOutputType(ExperimentLinkOutput{})
	pulumi.RegisterOutputType(ExperimentLinkArrayOutput{})
	pulumi.RegisterOutputType(ExperimentPrimaryMetricOutput{})
	pulumi.RegisterOutputType(ExperimentPrimaryMetricArrayOutput{})
	pulumi.RegisterOutputType(ExperimentSecondaryMetricOutput{})
	pulumi.RegisterOutputType(ExperimentSecondaryMetricArrayOutput{})
	pulumi.RegisterOutputType(GateMonitoringMetricOutput{})
	pulumi.RegisterOutputType(GateMonitoringMetricArrayOutput{})
	pulumi.RegisterOutputType(GateRuleOutput{})
	pulumi.RegisterOutputType(GateRuleArrayOutput{})
	pulumi.RegisterOutputType(GateRuleConditionOutput{})
	pulumi.RegisterOutputType(GateRuleConditionArrayOutput{})
	pulumi.RegisterOutputType(GateRuleReturnValueOutput{})
	pulumi.RegisterOutputType(GateRuleReturnValuePtrOutput{})
	pulumi.RegisterOutputType(MetricFunnelEventListOutput{})
	pulumi.RegisterOutputType(MetricFunnelEventListArrayOutput{})
	pulumi.RegisterOutputType(MetricMetricComponentMetricOutput{})
	pulumi.RegisterOutputType(MetricMetricComponentMetricArrayOutput{})
	pulumi.RegisterOutputType(MetricMetricEventOutput{})
	pulumi.RegisterOutputType(MetricMetricEventArrayOutput{})
	pulumi.RegisterOutputType(MetricMetricEventCriteriaOutput{})
	pulumi.RegisterOutputType(MetricMetricEventCriteriaArrayOutput{})
	pulumi.RegisterOutputType(MetricSourceCustomFieldMappingOutput{})
	pulumi.RegisterOutputType(MetricSourceCustomFieldMappingArrayOutput{})
	pulumi.RegisterOutputType(MetricSourceIdTypeMappingOutput{})
	pulumi.RegisterOutputType(MetricSourceIdTypeMappingArrayOutput{})
	pulumi.RegisterOutputType(MetricSourceOwnerOutput{})
	pulumi.RegisterOutputType(MetricSourceOwnerPtrOutput{})
	pulumi.RegisterOutputType(MetricWarehouseNativeOutput{})
	pulumi.RegisterOutputType(MetricWarehouseNativePtrOutput{})
	pulumi.RegisterOutputType(MetricWarehouseNativeCriteriaOutput{})
	pulumi.RegisterOutputType(MetricWarehouseNativeCriteriaArrayOutput{})
	pulumi.RegisterOutputType(MetricWarehouseNativeDenominatorCriteriaOutput{})
	pulumi.RegisterOutputType(MetricWarehouseNativeDenominatorCriteriaArrayOutput{})
	pulumi.RegisterOutputType(MetricWarehouseNativeFunnelEventOutput{})
	pulumi.RegisterOutputType(MetricWarehouseNativeFunnelEventArrayOutput{})
	pulumi.RegisterOutputType(MetricWarehouseNativeFunnelEventCriteriaOutput{})
	pulumi.RegisterOutputType(MetricWarehouseNativeFunnelEventCriteriaArrayOutput{})
}
