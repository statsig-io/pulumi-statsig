// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package statsig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/statsig-io/pulumi-statsig/sdk/go/statsig/internal"
)

// This resource allows you to configure API keys for your Statsig project.
//
// To learn more about API keys, see [API Keys Documentation](https://docs.statsig.com/sdk-keys/api-keys/)
//
// To learn more about the API powering this resource, see [Keys API Documentation](https://docs.statsig.com/console-api/keys)
//
// > Note: This resource requires a Console API Key with the following scope: `can access other keys`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/statsig-io/pulumi-statsig/sdk/go/statsig"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := statsig.NewKeys(ctx, "server_key", &statsig.KeysArgs{
//				Description: pulumi.String("A short description of what this server key is used for."),
//				Type:        pulumi.String("SERVER"),
//				Environments: pulumi.StringArray{
//					pulumi.String("production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = statsig.NewKeys(ctx, "client_key", &statsig.KeysArgs{
//				Description: pulumi.String("A short description of what this client key is used for."),
//				Type:        pulumi.String("CLIENT"),
//				Environments: pulumi.StringArray{
//					pulumi.String("production"),
//				},
//				Scopes: pulumi.StringArray{
//					pulumi.String("client_download_config_specs"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = statsig.NewKeys(ctx, "console_key", &statsig.KeysArgs{
//				Description: pulumi.String("A short description of what this console key is used for."),
//				Type:        pulumi.String("CONSOLE"),
//				Scopes: pulumi.StringArray{
//					pulumi.String("omni_read_only"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Keys struct {
	pulumi.CustomResourceState

	Description           pulumi.StringOutput      `pulumi:"description"`
	Environments          pulumi.StringArrayOutput `pulumi:"environments"`
	Key                   pulumi.StringOutput      `pulumi:"key"`
	Scopes                pulumi.StringArrayOutput `pulumi:"scopes"`
	SecondaryTargetAppIds pulumi.StringArrayOutput `pulumi:"secondaryTargetAppIds"`
	TargetAppId           pulumi.StringOutput      `pulumi:"targetAppId"`
	Type                  pulumi.StringOutput      `pulumi:"type"`
}

// NewKeys registers a new resource with the given unique name, arguments, and options.
func NewKeys(ctx *pulumi.Context,
	name string, args *KeysArgs, opts ...pulumi.ResourceOption) (*Keys, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Keys
	err := ctx.RegisterResource("statsig:index/keys:Keys", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeys gets an existing Keys resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeys(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeysState, opts ...pulumi.ResourceOption) (*Keys, error) {
	var resource Keys
	err := ctx.ReadResource("statsig:index/keys:Keys", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Keys resources.
type keysState struct {
	Description           *string  `pulumi:"description"`
	Environments          []string `pulumi:"environments"`
	Key                   *string  `pulumi:"key"`
	Scopes                []string `pulumi:"scopes"`
	SecondaryTargetAppIds []string `pulumi:"secondaryTargetAppIds"`
	TargetAppId           *string  `pulumi:"targetAppId"`
	Type                  *string  `pulumi:"type"`
}

type KeysState struct {
	Description           pulumi.StringPtrInput
	Environments          pulumi.StringArrayInput
	Key                   pulumi.StringPtrInput
	Scopes                pulumi.StringArrayInput
	SecondaryTargetAppIds pulumi.StringArrayInput
	TargetAppId           pulumi.StringPtrInput
	Type                  pulumi.StringPtrInput
}

func (KeysState) ElementType() reflect.Type {
	return reflect.TypeOf((*keysState)(nil)).Elem()
}

type keysArgs struct {
	Description           string   `pulumi:"description"`
	Environments          []string `pulumi:"environments"`
	Key                   *string  `pulumi:"key"`
	Scopes                []string `pulumi:"scopes"`
	SecondaryTargetAppIds []string `pulumi:"secondaryTargetAppIds"`
	TargetAppId           *string  `pulumi:"targetAppId"`
	Type                  string   `pulumi:"type"`
}

// The set of arguments for constructing a Keys resource.
type KeysArgs struct {
	Description           pulumi.StringInput
	Environments          pulumi.StringArrayInput
	Key                   pulumi.StringPtrInput
	Scopes                pulumi.StringArrayInput
	SecondaryTargetAppIds pulumi.StringArrayInput
	TargetAppId           pulumi.StringPtrInput
	Type                  pulumi.StringInput
}

func (KeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keysArgs)(nil)).Elem()
}

type KeysInput interface {
	pulumi.Input

	ToKeysOutput() KeysOutput
	ToKeysOutputWithContext(ctx context.Context) KeysOutput
}

func (*Keys) ElementType() reflect.Type {
	return reflect.TypeOf((**Keys)(nil)).Elem()
}

func (i *Keys) ToKeysOutput() KeysOutput {
	return i.ToKeysOutputWithContext(context.Background())
}

func (i *Keys) ToKeysOutputWithContext(ctx context.Context) KeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysOutput)
}

// KeysArrayInput is an input type that accepts KeysArray and KeysArrayOutput values.
// You can construct a concrete instance of `KeysArrayInput` via:
//
//	KeysArray{ KeysArgs{...} }
type KeysArrayInput interface {
	pulumi.Input

	ToKeysArrayOutput() KeysArrayOutput
	ToKeysArrayOutputWithContext(context.Context) KeysArrayOutput
}

type KeysArray []KeysInput

func (KeysArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keys)(nil)).Elem()
}

func (i KeysArray) ToKeysArrayOutput() KeysArrayOutput {
	return i.ToKeysArrayOutputWithContext(context.Background())
}

func (i KeysArray) ToKeysArrayOutputWithContext(ctx context.Context) KeysArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysArrayOutput)
}

// KeysMapInput is an input type that accepts KeysMap and KeysMapOutput values.
// You can construct a concrete instance of `KeysMapInput` via:
//
//	KeysMap{ "key": KeysArgs{...} }
type KeysMapInput interface {
	pulumi.Input

	ToKeysMapOutput() KeysMapOutput
	ToKeysMapOutputWithContext(context.Context) KeysMapOutput
}

type KeysMap map[string]KeysInput

func (KeysMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keys)(nil)).Elem()
}

func (i KeysMap) ToKeysMapOutput() KeysMapOutput {
	return i.ToKeysMapOutputWithContext(context.Background())
}

func (i KeysMap) ToKeysMapOutputWithContext(ctx context.Context) KeysMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysMapOutput)
}

type KeysOutput struct{ *pulumi.OutputState }

func (KeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Keys)(nil)).Elem()
}

func (o KeysOutput) ToKeysOutput() KeysOutput {
	return o
}

func (o KeysOutput) ToKeysOutputWithContext(ctx context.Context) KeysOutput {
	return o
}

func (o KeysOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Keys) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o KeysOutput) Environments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Keys) pulumi.StringArrayOutput { return v.Environments }).(pulumi.StringArrayOutput)
}

func (o KeysOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *Keys) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

func (o KeysOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Keys) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

func (o KeysOutput) SecondaryTargetAppIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Keys) pulumi.StringArrayOutput { return v.SecondaryTargetAppIds }).(pulumi.StringArrayOutput)
}

func (o KeysOutput) TargetAppId() pulumi.StringOutput {
	return o.ApplyT(func(v *Keys) pulumi.StringOutput { return v.TargetAppId }).(pulumi.StringOutput)
}

func (o KeysOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Keys) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type KeysArrayOutput struct{ *pulumi.OutputState }

func (KeysArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keys)(nil)).Elem()
}

func (o KeysArrayOutput) ToKeysArrayOutput() KeysArrayOutput {
	return o
}

func (o KeysArrayOutput) ToKeysArrayOutputWithContext(ctx context.Context) KeysArrayOutput {
	return o
}

func (o KeysArrayOutput) Index(i pulumi.IntInput) KeysOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Keys {
		return vs[0].([]*Keys)[vs[1].(int)]
	}).(KeysOutput)
}

type KeysMapOutput struct{ *pulumi.OutputState }

func (KeysMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keys)(nil)).Elem()
}

func (o KeysMapOutput) ToKeysMapOutput() KeysMapOutput {
	return o
}

func (o KeysMapOutput) ToKeysMapOutputWithContext(ctx context.Context) KeysMapOutput {
	return o
}

func (o KeysMapOutput) MapIndex(k pulumi.StringInput) KeysOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Keys {
		return vs[0].(map[string]*Keys)[vs[1].(string)]
	}).(KeysOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeysInput)(nil)).Elem(), &Keys{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeysArrayInput)(nil)).Elem(), KeysArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeysMapInput)(nil)).Elem(), KeysMap{})
	pulumi.RegisterOutputType(KeysOutput{})
	pulumi.RegisterOutputType(KeysArrayOutput{})
	pulumi.RegisterOutputType(KeysMapOutput{})
}
