// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package statsig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/statsig-io/pulumi-statsig/sdk/go/statsig/internal"
)

// This resource allows you to configure metrics for your Statsig project.
//
// To learn more about metrics, see [Metrics Documentation](https://docs.statsig.com/metrics/101)
//
// To learn more about the API powering this resource, see [Metrics API Documentation](https://docs.statsig.com/console-api/metrics)
//
// > Note: [Warehouse Native](https://docs.statsig.com/statsig-warehouse-native/introduction/) metrics can only be used in Warehouse Native projects
type Metric struct {
	pulumi.CustomResourceState

	// Custom time window end date in days since exposure.
	CustomRollUpEnd pulumi.Float64Output `pulumi:"customRollUpEnd"`
	// Custom time window start date in days since exposure.
	CustomRollUpStart pulumi.Float64Output `pulumi:"customRollUpStart"`
	// A description of the new metric, providing context and purpose.
	Description pulumi.StringOutput `pulumi:"description"`
	// Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
	Directionality pulumi.StringOutput `pulumi:"directionality"`
	// Skips persisting the metric (used to validate that inputs are correct)
	DryRun pulumi.BoolOutput `pulumi:"dryRun"`
	// Specifies whether to count events or distinct users for the funnel metric.
	FunnelCountDistinct pulumi.StringOutput `pulumi:"funnelCountDistinct"`
	// List of events used to create funnel metrics.
	FunnelEventLists MetricFunnelEventListArrayOutput `pulumi:"funnelEventLists"`
	// Indicates whether the metric is permanent and should not be deleted.
	IsPermanent pulumi.BoolOutput `pulumi:"isPermanent"`
	// Set to true to make the metric definition editable only from the Console API.
	IsReadOnly pulumi.BoolOutput `pulumi:"isReadOnly"`
	// Marks the metric as verified for internal trustworthiness.
	IsVerified pulumi.BoolOutput `pulumi:"isVerified"`
	// List of input metrics used to calculate the new metric for composite types.
	MetricComponentMetrics MetricMetricComponentMetricArrayOutput `pulumi:"metricComponentMetrics"`
	// An array of event definitions used to compute the metric.
	MetricEvents MetricMetricEventArrayOutput `pulumi:"metricEvents"`
	// The name of the new metric, which identifies it within the system.
	Name pulumi.StringOutput `pulumi:"name"`
	// Time window for the metric rollup. Specify "custom" for a customized time window.
	RollupTimeWindow pulumi.StringOutput `pulumi:"rollupTimeWindow"`
	// Tags associated with the metric for categorization and searchability.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The team associated with the metric, applicable for enterprise environments.
	Team pulumi.StringOutput `pulumi:"team"`
	// The team ID associated with the metric, applicable for enterprise environments.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// The type of the metric. Allowed values include sum, ratio, mean, event*count*sum, composite, composite*sum, undefined, funnel, user*warehouse.
	Type pulumi.StringOutput `pulumi:"type"`
	// Array of unit types associated with the metric, such as stableID or userID.
	UnitTypes pulumi.StringArrayOutput `pulumi:"unitTypes"`
	// Defines warehouse native metrics for advanced configurations.
	WarehouseNative MetricWarehouseNativeOutput `pulumi:"warehouseNative"`
}

// NewMetric registers a new resource with the given unique name, arguments, and options.
func NewMetric(ctx *pulumi.Context,
	name string, args *MetricArgs, opts ...pulumi.ResourceOption) (*Metric, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Metric
	err := ctx.RegisterResource("statsig:index/metric:Metric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetric gets an existing Metric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricState, opts ...pulumi.ResourceOption) (*Metric, error) {
	var resource Metric
	err := ctx.ReadResource("statsig:index/metric:Metric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Metric resources.
type metricState struct {
	// Custom time window end date in days since exposure.
	CustomRollUpEnd *float64 `pulumi:"customRollUpEnd"`
	// Custom time window start date in days since exposure.
	CustomRollUpStart *float64 `pulumi:"customRollUpStart"`
	// A description of the new metric, providing context and purpose.
	Description *string `pulumi:"description"`
	// Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
	Directionality *string `pulumi:"directionality"`
	// Skips persisting the metric (used to validate that inputs are correct)
	DryRun *bool `pulumi:"dryRun"`
	// Specifies whether to count events or distinct users for the funnel metric.
	FunnelCountDistinct *string `pulumi:"funnelCountDistinct"`
	// List of events used to create funnel metrics.
	FunnelEventLists []MetricFunnelEventList `pulumi:"funnelEventLists"`
	// Indicates whether the metric is permanent and should not be deleted.
	IsPermanent *bool `pulumi:"isPermanent"`
	// Set to true to make the metric definition editable only from the Console API.
	IsReadOnly *bool `pulumi:"isReadOnly"`
	// Marks the metric as verified for internal trustworthiness.
	IsVerified *bool `pulumi:"isVerified"`
	// List of input metrics used to calculate the new metric for composite types.
	MetricComponentMetrics []MetricMetricComponentMetric `pulumi:"metricComponentMetrics"`
	// An array of event definitions used to compute the metric.
	MetricEvents []MetricMetricEvent `pulumi:"metricEvents"`
	// The name of the new metric, which identifies it within the system.
	Name *string `pulumi:"name"`
	// Time window for the metric rollup. Specify "custom" for a customized time window.
	RollupTimeWindow *string `pulumi:"rollupTimeWindow"`
	// Tags associated with the metric for categorization and searchability.
	Tags []string `pulumi:"tags"`
	// The team associated with the metric, applicable for enterprise environments.
	Team *string `pulumi:"team"`
	// The team ID associated with the metric, applicable for enterprise environments.
	TeamId *string `pulumi:"teamId"`
	// The type of the metric. Allowed values include sum, ratio, mean, event*count*sum, composite, composite*sum, undefined, funnel, user*warehouse.
	Type *string `pulumi:"type"`
	// Array of unit types associated with the metric, such as stableID or userID.
	UnitTypes []string `pulumi:"unitTypes"`
	// Defines warehouse native metrics for advanced configurations.
	WarehouseNative *MetricWarehouseNative `pulumi:"warehouseNative"`
}

type MetricState struct {
	// Custom time window end date in days since exposure.
	CustomRollUpEnd pulumi.Float64PtrInput
	// Custom time window start date in days since exposure.
	CustomRollUpStart pulumi.Float64PtrInput
	// A description of the new metric, providing context and purpose.
	Description pulumi.StringPtrInput
	// Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
	Directionality pulumi.StringPtrInput
	// Skips persisting the metric (used to validate that inputs are correct)
	DryRun pulumi.BoolPtrInput
	// Specifies whether to count events or distinct users for the funnel metric.
	FunnelCountDistinct pulumi.StringPtrInput
	// List of events used to create funnel metrics.
	FunnelEventLists MetricFunnelEventListArrayInput
	// Indicates whether the metric is permanent and should not be deleted.
	IsPermanent pulumi.BoolPtrInput
	// Set to true to make the metric definition editable only from the Console API.
	IsReadOnly pulumi.BoolPtrInput
	// Marks the metric as verified for internal trustworthiness.
	IsVerified pulumi.BoolPtrInput
	// List of input metrics used to calculate the new metric for composite types.
	MetricComponentMetrics MetricMetricComponentMetricArrayInput
	// An array of event definitions used to compute the metric.
	MetricEvents MetricMetricEventArrayInput
	// The name of the new metric, which identifies it within the system.
	Name pulumi.StringPtrInput
	// Time window for the metric rollup. Specify "custom" for a customized time window.
	RollupTimeWindow pulumi.StringPtrInput
	// Tags associated with the metric for categorization and searchability.
	Tags pulumi.StringArrayInput
	// The team associated with the metric, applicable for enterprise environments.
	Team pulumi.StringPtrInput
	// The team ID associated with the metric, applicable for enterprise environments.
	TeamId pulumi.StringPtrInput
	// The type of the metric. Allowed values include sum, ratio, mean, event*count*sum, composite, composite*sum, undefined, funnel, user*warehouse.
	Type pulumi.StringPtrInput
	// Array of unit types associated with the metric, such as stableID or userID.
	UnitTypes pulumi.StringArrayInput
	// Defines warehouse native metrics for advanced configurations.
	WarehouseNative MetricWarehouseNativePtrInput
}

func (MetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricState)(nil)).Elem()
}

type metricArgs struct {
	// Custom time window end date in days since exposure.
	CustomRollUpEnd *float64 `pulumi:"customRollUpEnd"`
	// Custom time window start date in days since exposure.
	CustomRollUpStart *float64 `pulumi:"customRollUpStart"`
	// A description of the new metric, providing context and purpose.
	Description *string `pulumi:"description"`
	// Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
	Directionality *string `pulumi:"directionality"`
	// Skips persisting the metric (used to validate that inputs are correct)
	DryRun *bool `pulumi:"dryRun"`
	// Specifies whether to count events or distinct users for the funnel metric.
	FunnelCountDistinct *string `pulumi:"funnelCountDistinct"`
	// List of events used to create funnel metrics.
	FunnelEventLists []MetricFunnelEventList `pulumi:"funnelEventLists"`
	// Indicates whether the metric is permanent and should not be deleted.
	IsPermanent *bool `pulumi:"isPermanent"`
	// Set to true to make the metric definition editable only from the Console API.
	IsReadOnly *bool `pulumi:"isReadOnly"`
	// Marks the metric as verified for internal trustworthiness.
	IsVerified *bool `pulumi:"isVerified"`
	// List of input metrics used to calculate the new metric for composite types.
	MetricComponentMetrics []MetricMetricComponentMetric `pulumi:"metricComponentMetrics"`
	// An array of event definitions used to compute the metric.
	MetricEvents []MetricMetricEvent `pulumi:"metricEvents"`
	// The name of the new metric, which identifies it within the system.
	Name *string `pulumi:"name"`
	// Time window for the metric rollup. Specify "custom" for a customized time window.
	RollupTimeWindow *string `pulumi:"rollupTimeWindow"`
	// Tags associated with the metric for categorization and searchability.
	Tags []string `pulumi:"tags"`
	// The team associated with the metric, applicable for enterprise environments.
	Team *string `pulumi:"team"`
	// The team ID associated with the metric, applicable for enterprise environments.
	TeamId *string `pulumi:"teamId"`
	// The type of the metric. Allowed values include sum, ratio, mean, event*count*sum, composite, composite*sum, undefined, funnel, user*warehouse.
	Type string `pulumi:"type"`
	// Array of unit types associated with the metric, such as stableID or userID.
	UnitTypes []string `pulumi:"unitTypes"`
	// Defines warehouse native metrics for advanced configurations.
	WarehouseNative *MetricWarehouseNative `pulumi:"warehouseNative"`
}

// The set of arguments for constructing a Metric resource.
type MetricArgs struct {
	// Custom time window end date in days since exposure.
	CustomRollUpEnd pulumi.Float64PtrInput
	// Custom time window start date in days since exposure.
	CustomRollUpStart pulumi.Float64PtrInput
	// A description of the new metric, providing context and purpose.
	Description pulumi.StringPtrInput
	// Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
	Directionality pulumi.StringPtrInput
	// Skips persisting the metric (used to validate that inputs are correct)
	DryRun pulumi.BoolPtrInput
	// Specifies whether to count events or distinct users for the funnel metric.
	FunnelCountDistinct pulumi.StringPtrInput
	// List of events used to create funnel metrics.
	FunnelEventLists MetricFunnelEventListArrayInput
	// Indicates whether the metric is permanent and should not be deleted.
	IsPermanent pulumi.BoolPtrInput
	// Set to true to make the metric definition editable only from the Console API.
	IsReadOnly pulumi.BoolPtrInput
	// Marks the metric as verified for internal trustworthiness.
	IsVerified pulumi.BoolPtrInput
	// List of input metrics used to calculate the new metric for composite types.
	MetricComponentMetrics MetricMetricComponentMetricArrayInput
	// An array of event definitions used to compute the metric.
	MetricEvents MetricMetricEventArrayInput
	// The name of the new metric, which identifies it within the system.
	Name pulumi.StringPtrInput
	// Time window for the metric rollup. Specify "custom" for a customized time window.
	RollupTimeWindow pulumi.StringPtrInput
	// Tags associated with the metric for categorization and searchability.
	Tags pulumi.StringArrayInput
	// The team associated with the metric, applicable for enterprise environments.
	Team pulumi.StringPtrInput
	// The team ID associated with the metric, applicable for enterprise environments.
	TeamId pulumi.StringPtrInput
	// The type of the metric. Allowed values include sum, ratio, mean, event*count*sum, composite, composite*sum, undefined, funnel, user*warehouse.
	Type pulumi.StringInput
	// Array of unit types associated with the metric, such as stableID or userID.
	UnitTypes pulumi.StringArrayInput
	// Defines warehouse native metrics for advanced configurations.
	WarehouseNative MetricWarehouseNativePtrInput
}

func (MetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricArgs)(nil)).Elem()
}

type MetricInput interface {
	pulumi.Input

	ToMetricOutput() MetricOutput
	ToMetricOutputWithContext(ctx context.Context) MetricOutput
}

func (*Metric) ElementType() reflect.Type {
	return reflect.TypeOf((**Metric)(nil)).Elem()
}

func (i *Metric) ToMetricOutput() MetricOutput {
	return i.ToMetricOutputWithContext(context.Background())
}

func (i *Metric) ToMetricOutputWithContext(ctx context.Context) MetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricOutput)
}

// MetricArrayInput is an input type that accepts MetricArray and MetricArrayOutput values.
// You can construct a concrete instance of `MetricArrayInput` via:
//
//	MetricArray{ MetricArgs{...} }
type MetricArrayInput interface {
	pulumi.Input

	ToMetricArrayOutput() MetricArrayOutput
	ToMetricArrayOutputWithContext(context.Context) MetricArrayOutput
}

type MetricArray []MetricInput

func (MetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Metric)(nil)).Elem()
}

func (i MetricArray) ToMetricArrayOutput() MetricArrayOutput {
	return i.ToMetricArrayOutputWithContext(context.Background())
}

func (i MetricArray) ToMetricArrayOutputWithContext(ctx context.Context) MetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricArrayOutput)
}

// MetricMapInput is an input type that accepts MetricMap and MetricMapOutput values.
// You can construct a concrete instance of `MetricMapInput` via:
//
//	MetricMap{ "key": MetricArgs{...} }
type MetricMapInput interface {
	pulumi.Input

	ToMetricMapOutput() MetricMapOutput
	ToMetricMapOutputWithContext(context.Context) MetricMapOutput
}

type MetricMap map[string]MetricInput

func (MetricMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Metric)(nil)).Elem()
}

func (i MetricMap) ToMetricMapOutput() MetricMapOutput {
	return i.ToMetricMapOutputWithContext(context.Background())
}

func (i MetricMap) ToMetricMapOutputWithContext(ctx context.Context) MetricMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMapOutput)
}

type MetricOutput struct{ *pulumi.OutputState }

func (MetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Metric)(nil)).Elem()
}

func (o MetricOutput) ToMetricOutput() MetricOutput {
	return o
}

func (o MetricOutput) ToMetricOutputWithContext(ctx context.Context) MetricOutput {
	return o
}

// Custom time window end date in days since exposure.
func (o MetricOutput) CustomRollUpEnd() pulumi.Float64Output {
	return o.ApplyT(func(v *Metric) pulumi.Float64Output { return v.CustomRollUpEnd }).(pulumi.Float64Output)
}

// Custom time window start date in days since exposure.
func (o MetricOutput) CustomRollUpStart() pulumi.Float64Output {
	return o.ApplyT(func(v *Metric) pulumi.Float64Output { return v.CustomRollUpStart }).(pulumi.Float64Output)
}

// A description of the new metric, providing context and purpose.
func (o MetricOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Metric) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
func (o MetricOutput) Directionality() pulumi.StringOutput {
	return o.ApplyT(func(v *Metric) pulumi.StringOutput { return v.Directionality }).(pulumi.StringOutput)
}

// Skips persisting the metric (used to validate that inputs are correct)
func (o MetricOutput) DryRun() pulumi.BoolOutput {
	return o.ApplyT(func(v *Metric) pulumi.BoolOutput { return v.DryRun }).(pulumi.BoolOutput)
}

// Specifies whether to count events or distinct users for the funnel metric.
func (o MetricOutput) FunnelCountDistinct() pulumi.StringOutput {
	return o.ApplyT(func(v *Metric) pulumi.StringOutput { return v.FunnelCountDistinct }).(pulumi.StringOutput)
}

// List of events used to create funnel metrics.
func (o MetricOutput) FunnelEventLists() MetricFunnelEventListArrayOutput {
	return o.ApplyT(func(v *Metric) MetricFunnelEventListArrayOutput { return v.FunnelEventLists }).(MetricFunnelEventListArrayOutput)
}

// Indicates whether the metric is permanent and should not be deleted.
func (o MetricOutput) IsPermanent() pulumi.BoolOutput {
	return o.ApplyT(func(v *Metric) pulumi.BoolOutput { return v.IsPermanent }).(pulumi.BoolOutput)
}

// Set to true to make the metric definition editable only from the Console API.
func (o MetricOutput) IsReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *Metric) pulumi.BoolOutput { return v.IsReadOnly }).(pulumi.BoolOutput)
}

// Marks the metric as verified for internal trustworthiness.
func (o MetricOutput) IsVerified() pulumi.BoolOutput {
	return o.ApplyT(func(v *Metric) pulumi.BoolOutput { return v.IsVerified }).(pulumi.BoolOutput)
}

// List of input metrics used to calculate the new metric for composite types.
func (o MetricOutput) MetricComponentMetrics() MetricMetricComponentMetricArrayOutput {
	return o.ApplyT(func(v *Metric) MetricMetricComponentMetricArrayOutput { return v.MetricComponentMetrics }).(MetricMetricComponentMetricArrayOutput)
}

// An array of event definitions used to compute the metric.
func (o MetricOutput) MetricEvents() MetricMetricEventArrayOutput {
	return o.ApplyT(func(v *Metric) MetricMetricEventArrayOutput { return v.MetricEvents }).(MetricMetricEventArrayOutput)
}

// The name of the new metric, which identifies it within the system.
func (o MetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Metric) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Time window for the metric rollup. Specify "custom" for a customized time window.
func (o MetricOutput) RollupTimeWindow() pulumi.StringOutput {
	return o.ApplyT(func(v *Metric) pulumi.StringOutput { return v.RollupTimeWindow }).(pulumi.StringOutput)
}

// Tags associated with the metric for categorization and searchability.
func (o MetricOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Metric) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The team associated with the metric, applicable for enterprise environments.
func (o MetricOutput) Team() pulumi.StringOutput {
	return o.ApplyT(func(v *Metric) pulumi.StringOutput { return v.Team }).(pulumi.StringOutput)
}

// The team ID associated with the metric, applicable for enterprise environments.
func (o MetricOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *Metric) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

// The type of the metric. Allowed values include sum, ratio, mean, event*count*sum, composite, composite*sum, undefined, funnel, user*warehouse.
func (o MetricOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Metric) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Array of unit types associated with the metric, such as stableID or userID.
func (o MetricOutput) UnitTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Metric) pulumi.StringArrayOutput { return v.UnitTypes }).(pulumi.StringArrayOutput)
}

// Defines warehouse native metrics for advanced configurations.
func (o MetricOutput) WarehouseNative() MetricWarehouseNativeOutput {
	return o.ApplyT(func(v *Metric) MetricWarehouseNativeOutput { return v.WarehouseNative }).(MetricWarehouseNativeOutput)
}

type MetricArrayOutput struct{ *pulumi.OutputState }

func (MetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Metric)(nil)).Elem()
}

func (o MetricArrayOutput) ToMetricArrayOutput() MetricArrayOutput {
	return o
}

func (o MetricArrayOutput) ToMetricArrayOutputWithContext(ctx context.Context) MetricArrayOutput {
	return o
}

func (o MetricArrayOutput) Index(i pulumi.IntInput) MetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Metric {
		return vs[0].([]*Metric)[vs[1].(int)]
	}).(MetricOutput)
}

type MetricMapOutput struct{ *pulumi.OutputState }

func (MetricMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Metric)(nil)).Elem()
}

func (o MetricMapOutput) ToMetricMapOutput() MetricMapOutput {
	return o
}

func (o MetricMapOutput) ToMetricMapOutputWithContext(ctx context.Context) MetricMapOutput {
	return o
}

func (o MetricMapOutput) MapIndex(k pulumi.StringInput) MetricOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Metric {
		return vs[0].(map[string]*Metric)[vs[1].(string)]
	}).(MetricOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricInput)(nil)).Elem(), &Metric{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricArrayInput)(nil)).Elem(), MetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricMapInput)(nil)).Elem(), MetricMap{})
	pulumi.RegisterOutputType(MetricOutput{})
	pulumi.RegisterOutputType(MetricArrayOutput{})
	pulumi.RegisterOutputType(MetricMapOutput{})
}
