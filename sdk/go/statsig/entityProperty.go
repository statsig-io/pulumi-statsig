// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package statsig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/statsig-io/pulumi-statsig/sdk/go/statsig/internal"
)

// This resource allows you to configure entity properties for your Statsig project.
//
// To learn more about entity properties, see [Entity Properties Documentation](https://docs.statsig.com/statsig-warehouse-native/features/entity-properties/)
//
// To learn more about the API powering this resource, see [Experiments API Documentation](https://docs.statsig.com/console-api/experiments)
//
// > Note: This resource is only available for [Warehouse Native](https://docs.statsig.com/statsig-warehouse-native/introduction/) projects
type EntityProperty struct {
	pulumi.CustomResourceState

	// Optional detailed context for the entity property source.
	Description pulumi.StringOutput `pulumi:"description"`
	// Mappings of Statsig units to their columns.
	IdTypeMappings EntityPropertyIdTypeMappingArrayOutput `pulumi:"idTypeMappings"`
	// Specifies if the source can only be edited via the Console API.
	IsReadOnly pulumi.BoolOutput `pulumi:"isReadOnly"`
	// Unique identifier for the entity property source.
	Name pulumi.StringOutput `pulumi:"name"`
	// Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner EntityPropertyOwnerOutput `pulumi:"owner"`
	// SQL query defining the data source.
	Sql pulumi.StringOutput `pulumi:"sql"`
	// Optional tags for categorization.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Indicates if the timestamp is treated as a day.
	TimestampAsDay pulumi.BoolOutput `pulumi:"timestampAsDay"`
	// Optional column name for timestamp.
	TimestampColumn pulumi.StringOutput `pulumi:"timestampColumn"`
}

// NewEntityProperty registers a new resource with the given unique name, arguments, and options.
func NewEntityProperty(ctx *pulumi.Context,
	name string, args *EntityPropertyArgs, opts ...pulumi.ResourceOption) (*EntityProperty, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdTypeMappings == nil {
		return nil, errors.New("invalid value for required argument 'IdTypeMappings'")
	}
	if args.Sql == nil {
		return nil, errors.New("invalid value for required argument 'Sql'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EntityProperty
	err := ctx.RegisterResource("statsig:index/entityProperty:EntityProperty", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntityProperty gets an existing EntityProperty resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntityProperty(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntityPropertyState, opts ...pulumi.ResourceOption) (*EntityProperty, error) {
	var resource EntityProperty
	err := ctx.ReadResource("statsig:index/entityProperty:EntityProperty", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EntityProperty resources.
type entityPropertyState struct {
	// Optional detailed context for the entity property source.
	Description *string `pulumi:"description"`
	// Mappings of Statsig units to their columns.
	IdTypeMappings []EntityPropertyIdTypeMapping `pulumi:"idTypeMappings"`
	// Specifies if the source can only be edited via the Console API.
	IsReadOnly *bool `pulumi:"isReadOnly"`
	// Unique identifier for the entity property source.
	Name *string `pulumi:"name"`
	// Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner *EntityPropertyOwner `pulumi:"owner"`
	// SQL query defining the data source.
	Sql *string `pulumi:"sql"`
	// Optional tags for categorization.
	Tags []string `pulumi:"tags"`
	// Indicates if the timestamp is treated as a day.
	TimestampAsDay *bool `pulumi:"timestampAsDay"`
	// Optional column name for timestamp.
	TimestampColumn *string `pulumi:"timestampColumn"`
}

type EntityPropertyState struct {
	// Optional detailed context for the entity property source.
	Description pulumi.StringPtrInput
	// Mappings of Statsig units to their columns.
	IdTypeMappings EntityPropertyIdTypeMappingArrayInput
	// Specifies if the source can only be edited via the Console API.
	IsReadOnly pulumi.BoolPtrInput
	// Unique identifier for the entity property source.
	Name pulumi.StringPtrInput
	// Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner EntityPropertyOwnerPtrInput
	// SQL query defining the data source.
	Sql pulumi.StringPtrInput
	// Optional tags for categorization.
	Tags pulumi.StringArrayInput
	// Indicates if the timestamp is treated as a day.
	TimestampAsDay pulumi.BoolPtrInput
	// Optional column name for timestamp.
	TimestampColumn pulumi.StringPtrInput
}

func (EntityPropertyState) ElementType() reflect.Type {
	return reflect.TypeOf((*entityPropertyState)(nil)).Elem()
}

type entityPropertyArgs struct {
	// Optional detailed context for the entity property source.
	Description *string `pulumi:"description"`
	// Mappings of Statsig units to their columns.
	IdTypeMappings []EntityPropertyIdTypeMapping `pulumi:"idTypeMappings"`
	// Specifies if the source can only be edited via the Console API.
	IsReadOnly *bool `pulumi:"isReadOnly"`
	// Unique identifier for the entity property source.
	Name *string `pulumi:"name"`
	// SQL query defining the data source.
	Sql string `pulumi:"sql"`
	// Optional tags for categorization.
	Tags []string `pulumi:"tags"`
	// Indicates if the timestamp is treated as a day.
	TimestampAsDay *bool `pulumi:"timestampAsDay"`
	// Optional column name for timestamp.
	TimestampColumn *string `pulumi:"timestampColumn"`
}

// The set of arguments for constructing a EntityProperty resource.
type EntityPropertyArgs struct {
	// Optional detailed context for the entity property source.
	Description pulumi.StringPtrInput
	// Mappings of Statsig units to their columns.
	IdTypeMappings EntityPropertyIdTypeMappingArrayInput
	// Specifies if the source can only be edited via the Console API.
	IsReadOnly pulumi.BoolPtrInput
	// Unique identifier for the entity property source.
	Name pulumi.StringPtrInput
	// SQL query defining the data source.
	Sql pulumi.StringInput
	// Optional tags for categorization.
	Tags pulumi.StringArrayInput
	// Indicates if the timestamp is treated as a day.
	TimestampAsDay pulumi.BoolPtrInput
	// Optional column name for timestamp.
	TimestampColumn pulumi.StringPtrInput
}

func (EntityPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entityPropertyArgs)(nil)).Elem()
}

type EntityPropertyInput interface {
	pulumi.Input

	ToEntityPropertyOutput() EntityPropertyOutput
	ToEntityPropertyOutputWithContext(ctx context.Context) EntityPropertyOutput
}

func (*EntityProperty) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityProperty)(nil)).Elem()
}

func (i *EntityProperty) ToEntityPropertyOutput() EntityPropertyOutput {
	return i.ToEntityPropertyOutputWithContext(context.Background())
}

func (i *EntityProperty) ToEntityPropertyOutputWithContext(ctx context.Context) EntityPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertyOutput)
}

// EntityPropertyArrayInput is an input type that accepts EntityPropertyArray and EntityPropertyArrayOutput values.
// You can construct a concrete instance of `EntityPropertyArrayInput` via:
//
//	EntityPropertyArray{ EntityPropertyArgs{...} }
type EntityPropertyArrayInput interface {
	pulumi.Input

	ToEntityPropertyArrayOutput() EntityPropertyArrayOutput
	ToEntityPropertyArrayOutputWithContext(context.Context) EntityPropertyArrayOutput
}

type EntityPropertyArray []EntityPropertyInput

func (EntityPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntityProperty)(nil)).Elem()
}

func (i EntityPropertyArray) ToEntityPropertyArrayOutput() EntityPropertyArrayOutput {
	return i.ToEntityPropertyArrayOutputWithContext(context.Background())
}

func (i EntityPropertyArray) ToEntityPropertyArrayOutputWithContext(ctx context.Context) EntityPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertyArrayOutput)
}

// EntityPropertyMapInput is an input type that accepts EntityPropertyMap and EntityPropertyMapOutput values.
// You can construct a concrete instance of `EntityPropertyMapInput` via:
//
//	EntityPropertyMap{ "key": EntityPropertyArgs{...} }
type EntityPropertyMapInput interface {
	pulumi.Input

	ToEntityPropertyMapOutput() EntityPropertyMapOutput
	ToEntityPropertyMapOutputWithContext(context.Context) EntityPropertyMapOutput
}

type EntityPropertyMap map[string]EntityPropertyInput

func (EntityPropertyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntityProperty)(nil)).Elem()
}

func (i EntityPropertyMap) ToEntityPropertyMapOutput() EntityPropertyMapOutput {
	return i.ToEntityPropertyMapOutputWithContext(context.Background())
}

func (i EntityPropertyMap) ToEntityPropertyMapOutputWithContext(ctx context.Context) EntityPropertyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertyMapOutput)
}

type EntityPropertyOutput struct{ *pulumi.OutputState }

func (EntityPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityProperty)(nil)).Elem()
}

func (o EntityPropertyOutput) ToEntityPropertyOutput() EntityPropertyOutput {
	return o
}

func (o EntityPropertyOutput) ToEntityPropertyOutputWithContext(ctx context.Context) EntityPropertyOutput {
	return o
}

// Optional detailed context for the entity property source.
func (o EntityPropertyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityProperty) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Mappings of Statsig units to their columns.
func (o EntityPropertyOutput) IdTypeMappings() EntityPropertyIdTypeMappingArrayOutput {
	return o.ApplyT(func(v *EntityProperty) EntityPropertyIdTypeMappingArrayOutput { return v.IdTypeMappings }).(EntityPropertyIdTypeMappingArrayOutput)
}

// Specifies if the source can only be edited via the Console API.
func (o EntityPropertyOutput) IsReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *EntityProperty) pulumi.BoolOutput { return v.IsReadOnly }).(pulumi.BoolOutput)
}

// Unique identifier for the entity property source.
func (o EntityPropertyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityProperty) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
func (o EntityPropertyOutput) Owner() EntityPropertyOwnerOutput {
	return o.ApplyT(func(v *EntityProperty) EntityPropertyOwnerOutput { return v.Owner }).(EntityPropertyOwnerOutput)
}

// SQL query defining the data source.
func (o EntityPropertyOutput) Sql() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityProperty) pulumi.StringOutput { return v.Sql }).(pulumi.StringOutput)
}

// Optional tags for categorization.
func (o EntityPropertyOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EntityProperty) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Indicates if the timestamp is treated as a day.
func (o EntityPropertyOutput) TimestampAsDay() pulumi.BoolOutput {
	return o.ApplyT(func(v *EntityProperty) pulumi.BoolOutput { return v.TimestampAsDay }).(pulumi.BoolOutput)
}

// Optional column name for timestamp.
func (o EntityPropertyOutput) TimestampColumn() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityProperty) pulumi.StringOutput { return v.TimestampColumn }).(pulumi.StringOutput)
}

type EntityPropertyArrayOutput struct{ *pulumi.OutputState }

func (EntityPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntityProperty)(nil)).Elem()
}

func (o EntityPropertyArrayOutput) ToEntityPropertyArrayOutput() EntityPropertyArrayOutput {
	return o
}

func (o EntityPropertyArrayOutput) ToEntityPropertyArrayOutputWithContext(ctx context.Context) EntityPropertyArrayOutput {
	return o
}

func (o EntityPropertyArrayOutput) Index(i pulumi.IntInput) EntityPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EntityProperty {
		return vs[0].([]*EntityProperty)[vs[1].(int)]
	}).(EntityPropertyOutput)
}

type EntityPropertyMapOutput struct{ *pulumi.OutputState }

func (EntityPropertyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntityProperty)(nil)).Elem()
}

func (o EntityPropertyMapOutput) ToEntityPropertyMapOutput() EntityPropertyMapOutput {
	return o
}

func (o EntityPropertyMapOutput) ToEntityPropertyMapOutputWithContext(ctx context.Context) EntityPropertyMapOutput {
	return o
}

func (o EntityPropertyMapOutput) MapIndex(k pulumi.StringInput) EntityPropertyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EntityProperty {
		return vs[0].(map[string]*EntityProperty)[vs[1].(string)]
	}).(EntityPropertyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EntityPropertyInput)(nil)).Elem(), &EntityProperty{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityPropertyArrayInput)(nil)).Elem(), EntityPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityPropertyMapInput)(nil)).Elem(), EntityPropertyMap{})
	pulumi.RegisterOutputType(EntityPropertyOutput{})
	pulumi.RegisterOutputType(EntityPropertyArrayOutput{})
	pulumi.RegisterOutputType(EntityPropertyMapOutput{})
}
