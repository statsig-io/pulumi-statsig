// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Statsig
{
    /// <summary>
    /// This resource allows you to configure entity properties for your Statsig project.
    /// 
    /// To learn more about entity properties, see [Entity Properties Documentation](https://docs.statsig.com/statsig-warehouse-native/features/entity-properties/)
    /// 
    /// To learn more about the API powering this resource, see [Experiments API Documentation](https://docs.statsig.com/console-api/experiments)
    /// 
    /// &gt; Note: This resource is only available for [Warehouse Native](https://docs.statsig.com/statsig-warehouse-native/introduction/) projects
    /// </summary>
    [StatsigResourceType("statsig:index/entityProperty:EntityProperty")]
    public partial class EntityProperty : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional detailed context for the entity property source.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Mappings of Statsig units to their columns.
        /// </summary>
        [Output("idTypeMappings")]
        public Output<ImmutableArray<Outputs.EntityPropertyIdTypeMapping>> IdTypeMappings { get; private set; } = null!;

        /// <summary>
        /// Specifies if the source can only be edited via the Console API.
        /// </summary>
        [Output("isReadOnly")]
        public Output<bool> IsReadOnly { get; private set; } = null!;

        /// <summary>
        /// Unique identifier for the entity property source.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
        /// </summary>
        [Output("owner")]
        public Output<Outputs.EntityPropertyOwner> Owner { get; private set; } = null!;

        /// <summary>
        /// SQL query defining the data source.
        /// </summary>
        [Output("sql")]
        public Output<string> Sql { get; private set; } = null!;

        /// <summary>
        /// Optional tags for categorization.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Indicates if the timestamp is treated as a day.
        /// </summary>
        [Output("timestampAsDay")]
        public Output<bool> TimestampAsDay { get; private set; } = null!;

        /// <summary>
        /// Optional column name for timestamp.
        /// </summary>
        [Output("timestampColumn")]
        public Output<string> TimestampColumn { get; private set; } = null!;


        /// <summary>
        /// Create a EntityProperty resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EntityProperty(string name, EntityPropertyArgs args, CustomResourceOptions? options = null)
            : base("statsig:index/entityProperty:EntityProperty", name, args ?? new EntityPropertyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EntityProperty(string name, Input<string> id, EntityPropertyState? state = null, CustomResourceOptions? options = null)
            : base("statsig:index/entityProperty:EntityProperty", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EntityProperty resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EntityProperty Get(string name, Input<string> id, EntityPropertyState? state = null, CustomResourceOptions? options = null)
        {
            return new EntityProperty(name, id, state, options);
        }
    }

    public sealed class EntityPropertyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional detailed context for the entity property source.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("idTypeMappings", required: true)]
        private InputList<Inputs.EntityPropertyIdTypeMappingArgs>? _idTypeMappings;

        /// <summary>
        /// Mappings of Statsig units to their columns.
        /// </summary>
        public InputList<Inputs.EntityPropertyIdTypeMappingArgs> IdTypeMappings
        {
            get => _idTypeMappings ?? (_idTypeMappings = new InputList<Inputs.EntityPropertyIdTypeMappingArgs>());
            set => _idTypeMappings = value;
        }

        /// <summary>
        /// Specifies if the source can only be edited via the Console API.
        /// </summary>
        [Input("isReadOnly")]
        public Input<bool>? IsReadOnly { get; set; }

        /// <summary>
        /// Unique identifier for the entity property source.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// SQL query defining the data source.
        /// </summary>
        [Input("sql", required: true)]
        public Input<string> Sql { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Optional tags for categorization.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Indicates if the timestamp is treated as a day.
        /// </summary>
        [Input("timestampAsDay")]
        public Input<bool>? TimestampAsDay { get; set; }

        /// <summary>
        /// Optional column name for timestamp.
        /// </summary>
        [Input("timestampColumn")]
        public Input<string>? TimestampColumn { get; set; }

        public EntityPropertyArgs()
        {
        }
        public static new EntityPropertyArgs Empty => new EntityPropertyArgs();
    }

    public sealed class EntityPropertyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional detailed context for the entity property source.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("idTypeMappings")]
        private InputList<Inputs.EntityPropertyIdTypeMappingGetArgs>? _idTypeMappings;

        /// <summary>
        /// Mappings of Statsig units to their columns.
        /// </summary>
        public InputList<Inputs.EntityPropertyIdTypeMappingGetArgs> IdTypeMappings
        {
            get => _idTypeMappings ?? (_idTypeMappings = new InputList<Inputs.EntityPropertyIdTypeMappingGetArgs>());
            set => _idTypeMappings = value;
        }

        /// <summary>
        /// Specifies if the source can only be edited via the Console API.
        /// </summary>
        [Input("isReadOnly")]
        public Input<bool>? IsReadOnly { get; set; }

        /// <summary>
        /// Unique identifier for the entity property source.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
        /// </summary>
        [Input("owner")]
        public Input<Inputs.EntityPropertyOwnerGetArgs>? Owner { get; set; }

        /// <summary>
        /// SQL query defining the data source.
        /// </summary>
        [Input("sql")]
        public Input<string>? Sql { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Optional tags for categorization.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Indicates if the timestamp is treated as a day.
        /// </summary>
        [Input("timestampAsDay")]
        public Input<bool>? TimestampAsDay { get; set; }

        /// <summary>
        /// Optional column name for timestamp.
        /// </summary>
        [Input("timestampColumn")]
        public Input<string>? TimestampColumn { get; set; }

        public EntityPropertyState()
        {
        }
        public static new EntityPropertyState Empty => new EntityPropertyState();
    }
}
