// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Statsig.Outputs
{

    [OutputType]
    public sealed class MetricWarehouseNative
    {
        /// <summary>
        /// Allowed: count┃sum┃mean┃daily*participation┃ratio┃funnel┃count*distinct┃percentile
        /// </summary>
        public readonly string? Aggregation;
        /// <summary>
        /// Include units which do not have a denominator. Only applicable to ratios.
        /// </summary>
        public readonly bool? AllowNullRatioDenominator;
        /// <summary>
        /// Maximum cap for metric values.
        /// </summary>
        public readonly double? Cap;
        /// <summary>
        /// Filtering criteria for the metric source
        /// </summary>
        public readonly ImmutableArray<Outputs.MetricWarehouseNativeCriteria> Criterias;
        /// <summary>
        /// Attribution window for CUPED adjustments in days.
        /// </summary>
        public readonly double? CupedAttributionWindow;
        /// <summary>
        /// Custom end date for rollup in days since exposure.
        /// </summary>
        public readonly double? CustomRollUpEnd;
        /// <summary>
        /// Custom start date for rollup in days since exposure.
        /// </summary>
        public readonly double? CustomRollUpStart;
        /// <summary>
        /// Allowed: count┃sum┃mean┃daily*participation┃ratio┃funnel┃count*distinct┃percentile
        /// </summary>
        public readonly string? DenominatorAggregation;
        /// <summary>
        /// Filtering criteria for the denominator metric source, if this metric is a ratio
        /// </summary>
        public readonly ImmutableArray<Outputs.MetricWarehouseNativeDenominatorCriteria> DenominatorCriterias;
        /// <summary>
        /// Custom end date for rollup in days since exposure.
        /// </summary>
        public readonly double? DenominatorCustomRollupEnd;
        /// <summary>
        /// Custom start date for rollup in days since exposure.
        /// </summary>
        public readonly double? DenominatorCustomRollupStart;
        /// <summary>
        /// Name of the metric source for the denominator.
        /// </summary>
        public readonly string? DenominatorMetricSourceName;
        /// <summary>
        /// Time window for the denominator metric. Specify "custom" for a custom window.
        /// </summary>
        public readonly string? DenominatorRollupTimeWindow;
        /// <summary>
        /// Column name for the denominator’s value.
        /// </summary>
        public readonly string? DenominatorValueColumn;
        /// <summary>
        /// Duration for counting funnel events in days.
        /// </summary>
        public readonly double? FunnelCalculationWindow;
        /// <summary>
        /// Allowed: users┃sessions for distinct count method in funnel events.
        /// </summary>
        public readonly string? FunnelCountDistinct;
        /// <summary>
        /// List of funnel events with associated criteria and identifiers.
        /// </summary>
        public readonly ImmutableArray<Outputs.MetricWarehouseNativeFunnelEvent> FunnelEvents;
        /// <summary>
        /// Allowed: start_event┃exposure to determine funnel start criteria.
        /// </summary>
        public readonly string? FunnelStartCriteria;
        /// <summary>
        /// Number of days for metric baking; specify duration for analysis.
        /// </summary>
        public readonly double? MetricBakeDays;
        /// <summary>
        /// Specify metadata columns for breaking down metric analysis.
        /// </summary>
        public readonly ImmutableArray<string> MetricDimensionColumns;
        /// <summary>
        /// For Count, Sum, Mean, User Count aggregation types: the name of metric source
        /// </summary>
        public readonly string? MetricSourceName;
        /// <summary>
        /// Aggregation type for numerator; Allowed: count┃sum┃mean┃daily*participation┃ratio┃funnel┃count*distinct┃percentile.
        /// </summary>
        public readonly string? NumeratorAggregation;
        /// <summary>
        /// Flag to include only users with a conversion event in the metric.
        /// </summary>
        public readonly bool? OnlyIncludeUsersWithConversionEvent;
        /// <summary>
        /// Percentile value for statistical calculations.
        /// </summary>
        public readonly double? Percentile;
        /// <summary>
        /// General time window for rollup; can specify custom settings.
        /// </summary>
        public readonly string? RollupTimeWindow;
        /// <summary>
        /// Column name representing the metric’s value.
        /// </summary>
        public readonly string? ValueColumn;
        /// <summary>
        /// Threshold value for filtering metrics.
        /// </summary>
        public readonly double? ValueThreshold;
        public readonly bool? WaitForCohortWindow;
        /// <summary>
        /// High threshold for winsorization; must be between 0 and 1.
        /// </summary>
        public readonly double? WinsorizationHigh;
        /// <summary>
        /// Low threshold for winsorization; must be between 0 and 1.
        /// </summary>
        public readonly double? WinsorizationLow;

        [OutputConstructor]
        private MetricWarehouseNative(
            string? aggregation,

            bool? allowNullRatioDenominator,

            double? cap,

            ImmutableArray<Outputs.MetricWarehouseNativeCriteria> criterias,

            double? cupedAttributionWindow,

            double? customRollUpEnd,

            double? customRollUpStart,

            string? denominatorAggregation,

            ImmutableArray<Outputs.MetricWarehouseNativeDenominatorCriteria> denominatorCriterias,

            double? denominatorCustomRollupEnd,

            double? denominatorCustomRollupStart,

            string? denominatorMetricSourceName,

            string? denominatorRollupTimeWindow,

            string? denominatorValueColumn,

            double? funnelCalculationWindow,

            string? funnelCountDistinct,

            ImmutableArray<Outputs.MetricWarehouseNativeFunnelEvent> funnelEvents,

            string? funnelStartCriteria,

            double? metricBakeDays,

            ImmutableArray<string> metricDimensionColumns,

            string? metricSourceName,

            string? numeratorAggregation,

            bool? onlyIncludeUsersWithConversionEvent,

            double? percentile,

            string? rollupTimeWindow,

            string? valueColumn,

            double? valueThreshold,

            bool? waitForCohortWindow,

            double? winsorizationHigh,

            double? winsorizationLow)
        {
            Aggregation = aggregation;
            AllowNullRatioDenominator = allowNullRatioDenominator;
            Cap = cap;
            Criterias = criterias;
            CupedAttributionWindow = cupedAttributionWindow;
            CustomRollUpEnd = customRollUpEnd;
            CustomRollUpStart = customRollUpStart;
            DenominatorAggregation = denominatorAggregation;
            DenominatorCriterias = denominatorCriterias;
            DenominatorCustomRollupEnd = denominatorCustomRollupEnd;
            DenominatorCustomRollupStart = denominatorCustomRollupStart;
            DenominatorMetricSourceName = denominatorMetricSourceName;
            DenominatorRollupTimeWindow = denominatorRollupTimeWindow;
            DenominatorValueColumn = denominatorValueColumn;
            FunnelCalculationWindow = funnelCalculationWindow;
            FunnelCountDistinct = funnelCountDistinct;
            FunnelEvents = funnelEvents;
            FunnelStartCriteria = funnelStartCriteria;
            MetricBakeDays = metricBakeDays;
            MetricDimensionColumns = metricDimensionColumns;
            MetricSourceName = metricSourceName;
            NumeratorAggregation = numeratorAggregation;
            OnlyIncludeUsersWithConversionEvent = onlyIncludeUsersWithConversionEvent;
            Percentile = percentile;
            RollupTimeWindow = rollupTimeWindow;
            ValueColumn = valueColumn;
            ValueThreshold = valueThreshold;
            WaitForCohortWindow = waitForCohortWindow;
            WinsorizationHigh = winsorizationHigh;
            WinsorizationLow = winsorizationLow;
        }
    }
}
