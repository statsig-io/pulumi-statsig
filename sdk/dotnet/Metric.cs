// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Statsig
{
    /// <summary>
    /// This resource allows you to configure metrics for your Statsig project.
    /// 
    /// To learn more about metrics, see [Metrics Documentation](https://docs.statsig.com/metrics/101)
    /// 
    /// To learn more about the API powering this resource, see [Metrics API Documentation](https://docs.statsig.com/console-api/metrics)
    /// 
    /// &gt; Note: [Warehouse Native](https://docs.statsig.com/statsig-warehouse-native/introduction/) metrics can only be used in Warehouse Native projects
    /// </summary>
    [StatsigResourceType("statsig:index/metric:Metric")]
    public partial class Metric : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Custom time window end date in days since exposure.
        /// </summary>
        [Output("customRollUpEnd")]
        public Output<double> CustomRollUpEnd { get; private set; } = null!;

        /// <summary>
        /// Custom time window start date in days since exposure.
        /// </summary>
        [Output("customRollUpStart")]
        public Output<double> CustomRollUpStart { get; private set; } = null!;

        /// <summary>
        /// A description of the new metric, providing context and purpose.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
        /// </summary>
        [Output("directionality")]
        public Output<string> Directionality { get; private set; } = null!;

        /// <summary>
        /// Skips persisting the metric (used to validate that inputs are correct)
        /// </summary>
        [Output("dryRun")]
        public Output<bool> DryRun { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to count events or distinct users for the funnel metric.
        /// </summary>
        [Output("funnelCountDistinct")]
        public Output<string> FunnelCountDistinct { get; private set; } = null!;

        /// <summary>
        /// List of events used to create funnel metrics.
        /// </summary>
        [Output("funnelEventLists")]
        public Output<ImmutableArray<Outputs.MetricFunnelEventList>> FunnelEventLists { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the metric is permanent and should not be deleted.
        /// </summary>
        [Output("isPermanent")]
        public Output<bool> IsPermanent { get; private set; } = null!;

        /// <summary>
        /// Set to true to make the metric definition editable only from the Console API.
        /// </summary>
        [Output("isReadOnly")]
        public Output<bool> IsReadOnly { get; private set; } = null!;

        /// <summary>
        /// Marks the metric as verified for internal trustworthiness.
        /// </summary>
        [Output("isVerified")]
        public Output<bool> IsVerified { get; private set; } = null!;

        /// <summary>
        /// List of input metrics used to calculate the new metric for composite types.
        /// </summary>
        [Output("metricComponentMetrics")]
        public Output<ImmutableArray<Outputs.MetricMetricComponentMetric>> MetricComponentMetrics { get; private set; } = null!;

        /// <summary>
        /// An array of event definitions used to compute the metric.
        /// </summary>
        [Output("metricEvents")]
        public Output<ImmutableArray<Outputs.MetricMetricEvent>> MetricEvents { get; private set; } = null!;

        /// <summary>
        /// The name of the new metric, which identifies it within the system.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Time window for the metric rollup. Specify "custom" for a customized time window.
        /// </summary>
        [Output("rollupTimeWindow")]
        public Output<string> RollupTimeWindow { get; private set; } = null!;

        /// <summary>
        /// Tags associated with the metric for categorization and searchability.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The team associated with the metric, applicable for enterprise environments.
        /// </summary>
        [Output("team")]
        public Output<string> Team { get; private set; } = null!;

        /// <summary>
        /// The team ID associated with the metric, applicable for enterprise environments.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;

        /// <summary>
        /// The type of the metric. Allowed values include sum, ratio, mean, event*count*sum, composite, composite*sum, undefined, funnel, user*warehouse.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Array of unit types associated with the metric, such as stableID or userID.
        /// </summary>
        [Output("unitTypes")]
        public Output<ImmutableArray<string>> UnitTypes { get; private set; } = null!;

        /// <summary>
        /// Defines warehouse native metrics for advanced configurations.
        /// </summary>
        [Output("warehouseNative")]
        public Output<Outputs.MetricWarehouseNative> WarehouseNative { get; private set; } = null!;


        /// <summary>
        /// Create a Metric resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Metric(string name, MetricArgs args, CustomResourceOptions? options = null)
            : base("statsig:index/metric:Metric", name, args ?? new MetricArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Metric(string name, Input<string> id, MetricState? state = null, CustomResourceOptions? options = null)
            : base("statsig:index/metric:Metric", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Metric resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Metric Get(string name, Input<string> id, MetricState? state = null, CustomResourceOptions? options = null)
        {
            return new Metric(name, id, state, options);
        }
    }

    public sealed class MetricArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom time window end date in days since exposure.
        /// </summary>
        [Input("customRollUpEnd")]
        public Input<double>? CustomRollUpEnd { get; set; }

        /// <summary>
        /// Custom time window start date in days since exposure.
        /// </summary>
        [Input("customRollUpStart")]
        public Input<double>? CustomRollUpStart { get; set; }

        /// <summary>
        /// A description of the new metric, providing context and purpose.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
        /// </summary>
        [Input("directionality")]
        public Input<string>? Directionality { get; set; }

        /// <summary>
        /// Skips persisting the metric (used to validate that inputs are correct)
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// Specifies whether to count events or distinct users for the funnel metric.
        /// </summary>
        [Input("funnelCountDistinct")]
        public Input<string>? FunnelCountDistinct { get; set; }

        [Input("funnelEventLists")]
        private InputList<Inputs.MetricFunnelEventListArgs>? _funnelEventLists;

        /// <summary>
        /// List of events used to create funnel metrics.
        /// </summary>
        public InputList<Inputs.MetricFunnelEventListArgs> FunnelEventLists
        {
            get => _funnelEventLists ?? (_funnelEventLists = new InputList<Inputs.MetricFunnelEventListArgs>());
            set => _funnelEventLists = value;
        }

        /// <summary>
        /// Indicates whether the metric is permanent and should not be deleted.
        /// </summary>
        [Input("isPermanent")]
        public Input<bool>? IsPermanent { get; set; }

        /// <summary>
        /// Set to true to make the metric definition editable only from the Console API.
        /// </summary>
        [Input("isReadOnly")]
        public Input<bool>? IsReadOnly { get; set; }

        /// <summary>
        /// Marks the metric as verified for internal trustworthiness.
        /// </summary>
        [Input("isVerified")]
        public Input<bool>? IsVerified { get; set; }

        [Input("metricComponentMetrics")]
        private InputList<Inputs.MetricMetricComponentMetricArgs>? _metricComponentMetrics;

        /// <summary>
        /// List of input metrics used to calculate the new metric for composite types.
        /// </summary>
        public InputList<Inputs.MetricMetricComponentMetricArgs> MetricComponentMetrics
        {
            get => _metricComponentMetrics ?? (_metricComponentMetrics = new InputList<Inputs.MetricMetricComponentMetricArgs>());
            set => _metricComponentMetrics = value;
        }

        [Input("metricEvents")]
        private InputList<Inputs.MetricMetricEventArgs>? _metricEvents;

        /// <summary>
        /// An array of event definitions used to compute the metric.
        /// </summary>
        public InputList<Inputs.MetricMetricEventArgs> MetricEvents
        {
            get => _metricEvents ?? (_metricEvents = new InputList<Inputs.MetricMetricEventArgs>());
            set => _metricEvents = value;
        }

        /// <summary>
        /// The name of the new metric, which identifies it within the system.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Time window for the metric rollup. Specify "custom" for a customized time window.
        /// </summary>
        [Input("rollupTimeWindow")]
        public Input<string>? RollupTimeWindow { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags associated with the metric for categorization and searchability.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The team associated with the metric, applicable for enterprise environments.
        /// </summary>
        [Input("team")]
        public Input<string>? Team { get; set; }

        /// <summary>
        /// The team ID associated with the metric, applicable for enterprise environments.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        /// <summary>
        /// The type of the metric. Allowed values include sum, ratio, mean, event*count*sum, composite, composite*sum, undefined, funnel, user*warehouse.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("unitTypes")]
        private InputList<string>? _unitTypes;

        /// <summary>
        /// Array of unit types associated with the metric, such as stableID or userID.
        /// </summary>
        public InputList<string> UnitTypes
        {
            get => _unitTypes ?? (_unitTypes = new InputList<string>());
            set => _unitTypes = value;
        }

        /// <summary>
        /// Defines warehouse native metrics for advanced configurations.
        /// </summary>
        [Input("warehouseNative")]
        public Input<Inputs.MetricWarehouseNativeArgs>? WarehouseNative { get; set; }

        public MetricArgs()
        {
        }
        public static new MetricArgs Empty => new MetricArgs();
    }

    public sealed class MetricState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom time window end date in days since exposure.
        /// </summary>
        [Input("customRollUpEnd")]
        public Input<double>? CustomRollUpEnd { get; set; }

        /// <summary>
        /// Custom time window start date in days since exposure.
        /// </summary>
        [Input("customRollUpStart")]
        public Input<double>? CustomRollUpStart { get; set; }

        /// <summary>
        /// A description of the new metric, providing context and purpose.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
        /// </summary>
        [Input("directionality")]
        public Input<string>? Directionality { get; set; }

        /// <summary>
        /// Skips persisting the metric (used to validate that inputs are correct)
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// Specifies whether to count events or distinct users for the funnel metric.
        /// </summary>
        [Input("funnelCountDistinct")]
        public Input<string>? FunnelCountDistinct { get; set; }

        [Input("funnelEventLists")]
        private InputList<Inputs.MetricFunnelEventListGetArgs>? _funnelEventLists;

        /// <summary>
        /// List of events used to create funnel metrics.
        /// </summary>
        public InputList<Inputs.MetricFunnelEventListGetArgs> FunnelEventLists
        {
            get => _funnelEventLists ?? (_funnelEventLists = new InputList<Inputs.MetricFunnelEventListGetArgs>());
            set => _funnelEventLists = value;
        }

        /// <summary>
        /// Indicates whether the metric is permanent and should not be deleted.
        /// </summary>
        [Input("isPermanent")]
        public Input<bool>? IsPermanent { get; set; }

        /// <summary>
        /// Set to true to make the metric definition editable only from the Console API.
        /// </summary>
        [Input("isReadOnly")]
        public Input<bool>? IsReadOnly { get; set; }

        /// <summary>
        /// Marks the metric as verified for internal trustworthiness.
        /// </summary>
        [Input("isVerified")]
        public Input<bool>? IsVerified { get; set; }

        [Input("metricComponentMetrics")]
        private InputList<Inputs.MetricMetricComponentMetricGetArgs>? _metricComponentMetrics;

        /// <summary>
        /// List of input metrics used to calculate the new metric for composite types.
        /// </summary>
        public InputList<Inputs.MetricMetricComponentMetricGetArgs> MetricComponentMetrics
        {
            get => _metricComponentMetrics ?? (_metricComponentMetrics = new InputList<Inputs.MetricMetricComponentMetricGetArgs>());
            set => _metricComponentMetrics = value;
        }

        [Input("metricEvents")]
        private InputList<Inputs.MetricMetricEventGetArgs>? _metricEvents;

        /// <summary>
        /// An array of event definitions used to compute the metric.
        /// </summary>
        public InputList<Inputs.MetricMetricEventGetArgs> MetricEvents
        {
            get => _metricEvents ?? (_metricEvents = new InputList<Inputs.MetricMetricEventGetArgs>());
            set => _metricEvents = value;
        }

        /// <summary>
        /// The name of the new metric, which identifies it within the system.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Time window for the metric rollup. Specify "custom" for a customized time window.
        /// </summary>
        [Input("rollupTimeWindow")]
        public Input<string>? RollupTimeWindow { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags associated with the metric for categorization and searchability.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The team associated with the metric, applicable for enterprise environments.
        /// </summary>
        [Input("team")]
        public Input<string>? Team { get; set; }

        /// <summary>
        /// The team ID associated with the metric, applicable for enterprise environments.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        /// <summary>
        /// The type of the metric. Allowed values include sum, ratio, mean, event*count*sum, composite, composite*sum, undefined, funnel, user*warehouse.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("unitTypes")]
        private InputList<string>? _unitTypes;

        /// <summary>
        /// Array of unit types associated with the metric, such as stableID or userID.
        /// </summary>
        public InputList<string> UnitTypes
        {
            get => _unitTypes ?? (_unitTypes = new InputList<string>());
            set => _unitTypes = value;
        }

        /// <summary>
        /// Defines warehouse native metrics for advanced configurations.
        /// </summary>
        [Input("warehouseNative")]
        public Input<Inputs.MetricWarehouseNativeGetArgs>? WarehouseNative { get; set; }

        public MetricState()
        {
        }
        public static new MetricState Empty => new MetricState();
    }
}
