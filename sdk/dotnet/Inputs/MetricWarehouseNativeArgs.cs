// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Statsig.Pulumi.Inputs
{

    public sealed class MetricWarehouseNativeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allowed: count┃sum┃mean┃daily*participation┃ratio┃funnel┃count*distinct┃percentile
        /// </summary>
        [Input("aggregation")]
        public Input<string>? Aggregation { get; set; }

        /// <summary>
        /// Include units which do not have a denominator. Only applicable to ratios.
        /// </summary>
        [Input("allowNullRatioDenominator")]
        public Input<bool>? AllowNullRatioDenominator { get; set; }

        /// <summary>
        /// Maximum cap for metric values.
        /// </summary>
        [Input("cap")]
        public Input<double>? Cap { get; set; }

        [Input("criterias")]
        private InputList<Inputs.MetricWarehouseNativeCriteriaArgs>? _criterias;

        /// <summary>
        /// Filtering criteria for the metric source
        /// </summary>
        public InputList<Inputs.MetricWarehouseNativeCriteriaArgs> Criterias
        {
            get => _criterias ?? (_criterias = new InputList<Inputs.MetricWarehouseNativeCriteriaArgs>());
            set => _criterias = value;
        }

        /// <summary>
        /// Attribution window for CUPED adjustments in days.
        /// </summary>
        [Input("cupedAttributionWindow")]
        public Input<double>? CupedAttributionWindow { get; set; }

        /// <summary>
        /// Custom end date for rollup in days since exposure.
        /// </summary>
        [Input("customRollUpEnd")]
        public Input<double>? CustomRollUpEnd { get; set; }

        /// <summary>
        /// Custom start date for rollup in days since exposure.
        /// </summary>
        [Input("customRollUpStart")]
        public Input<double>? CustomRollUpStart { get; set; }

        /// <summary>
        /// Allowed: count┃sum┃mean┃daily*participation┃ratio┃funnel┃count*distinct┃percentile
        /// </summary>
        [Input("denominatorAggregation")]
        public Input<string>? DenominatorAggregation { get; set; }

        [Input("denominatorCriterias")]
        private InputList<Inputs.MetricWarehouseNativeDenominatorCriteriaArgs>? _denominatorCriterias;

        /// <summary>
        /// Filtering criteria for the denominator metric source, if this metric is a ratio
        /// </summary>
        public InputList<Inputs.MetricWarehouseNativeDenominatorCriteriaArgs> DenominatorCriterias
        {
            get => _denominatorCriterias ?? (_denominatorCriterias = new InputList<Inputs.MetricWarehouseNativeDenominatorCriteriaArgs>());
            set => _denominatorCriterias = value;
        }

        /// <summary>
        /// Custom end date for rollup in days since exposure.
        /// </summary>
        [Input("denominatorCustomRollupEnd")]
        public Input<double>? DenominatorCustomRollupEnd { get; set; }

        /// <summary>
        /// Custom start date for rollup in days since exposure.
        /// </summary>
        [Input("denominatorCustomRollupStart")]
        public Input<double>? DenominatorCustomRollupStart { get; set; }

        /// <summary>
        /// Name of the metric source for the denominator.
        /// </summary>
        [Input("denominatorMetricSourceName")]
        public Input<string>? DenominatorMetricSourceName { get; set; }

        /// <summary>
        /// Time window for the denominator metric. Specify "custom" for a custom window.
        /// </summary>
        [Input("denominatorRollupTimeWindow")]
        public Input<string>? DenominatorRollupTimeWindow { get; set; }

        /// <summary>
        /// Column name for the denominator’s value.
        /// </summary>
        [Input("denominatorValueColumn")]
        public Input<string>? DenominatorValueColumn { get; set; }

        /// <summary>
        /// Duration for counting funnel events in days.
        /// </summary>
        [Input("funnelCalculationWindow")]
        public Input<double>? FunnelCalculationWindow { get; set; }

        /// <summary>
        /// Allowed: users┃sessions for distinct count method in funnel events.
        /// </summary>
        [Input("funnelCountDistinct")]
        public Input<string>? FunnelCountDistinct { get; set; }

        [Input("funnelEvents")]
        private InputList<Inputs.MetricWarehouseNativeFunnelEventArgs>? _funnelEvents;

        /// <summary>
        /// List of funnel events with associated criteria and identifiers.
        /// </summary>
        public InputList<Inputs.MetricWarehouseNativeFunnelEventArgs> FunnelEvents
        {
            get => _funnelEvents ?? (_funnelEvents = new InputList<Inputs.MetricWarehouseNativeFunnelEventArgs>());
            set => _funnelEvents = value;
        }

        /// <summary>
        /// Allowed: start_event┃exposure to determine funnel start criteria.
        /// </summary>
        [Input("funnelStartCriteria")]
        public Input<string>? FunnelStartCriteria { get; set; }

        /// <summary>
        /// Number of days for metric baking; specify duration for analysis.
        /// </summary>
        [Input("metricBakeDays")]
        public Input<double>? MetricBakeDays { get; set; }

        [Input("metricDimensionColumns")]
        private InputList<string>? _metricDimensionColumns;

        /// <summary>
        /// Specify metadata columns for breaking down metric analysis.
        /// </summary>
        public InputList<string> MetricDimensionColumns
        {
            get => _metricDimensionColumns ?? (_metricDimensionColumns = new InputList<string>());
            set => _metricDimensionColumns = value;
        }

        /// <summary>
        /// For Count, Sum, Mean, User Count aggregation types: the name of metric source
        /// </summary>
        [Input("metricSourceName")]
        public Input<string>? MetricSourceName { get; set; }

        /// <summary>
        /// Aggregation type for numerator; Allowed: count┃sum┃mean┃daily*participation┃ratio┃funnel┃count*distinct┃percentile.
        /// </summary>
        [Input("numeratorAggregation")]
        public Input<string>? NumeratorAggregation { get; set; }

        /// <summary>
        /// Flag to include only users with a conversion event in the metric.
        /// </summary>
        [Input("onlyIncludeUsersWithConversionEvent")]
        public Input<bool>? OnlyIncludeUsersWithConversionEvent { get; set; }

        /// <summary>
        /// Percentile value for statistical calculations.
        /// </summary>
        [Input("percentile")]
        public Input<double>? Percentile { get; set; }

        /// <summary>
        /// General time window for rollup; can specify custom settings.
        /// </summary>
        [Input("rollupTimeWindow")]
        public Input<string>? RollupTimeWindow { get; set; }

        /// <summary>
        /// Column name representing the metric’s value.
        /// </summary>
        [Input("valueColumn")]
        public Input<string>? ValueColumn { get; set; }

        /// <summary>
        /// Threshold value for filtering metrics.
        /// </summary>
        [Input("valueThreshold")]
        public Input<double>? ValueThreshold { get; set; }

        [Input("waitForCohortWindow")]
        public Input<bool>? WaitForCohortWindow { get; set; }

        /// <summary>
        /// High threshold for winsorization; must be between 0 and 1.
        /// </summary>
        [Input("winsorizationHigh")]
        public Input<double>? WinsorizationHigh { get; set; }

        /// <summary>
        /// Low threshold for winsorization; must be between 0 and 1.
        /// </summary>
        [Input("winsorizationLow")]
        public Input<double>? WinsorizationLow { get; set; }

        public MetricWarehouseNativeArgs()
        {
        }
        public static new MetricWarehouseNativeArgs Empty => new MetricWarehouseNativeArgs();
    }
}
