// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Statsig.Pulumi
{
    /// <summary>
    /// This resource allows you to configure experiments for your Statsig project.
    /// 
    /// To learn more about experiments, see [Experiments Documentation](https://docs.statsig.com/experiments-plus/)
    /// 
    /// To learn more about the API powering this resource, see [Experiments API Documentation](https://docs.statsig.com/console-api/experiments)
    /// </summary>
    [PulumiResourceType("statsig:index/experiment:Experiment")]
    public partial class Experiment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Percent of layer allocated to this experiment
        /// </summary>
        [Output("allocation")]
        public Output<double> Allocation { get; private set; } = null!;

        /// <summary>
        /// Warehouse Native Only - Allocation duration in days
        /// </summary>
        [Output("allocationDuration")]
        public Output<int> AllocationDuration { get; private set; } = null!;

        /// <summary>
        /// Warehouse Native only - end time for analysis only experiments
        /// </summary>
        [Output("analysisEndTime")]
        public Output<string> AnalysisEndTime { get; private set; } = null!;

        /// <summary>
        /// The mode of analysis for the experiment, e.g frequentist, bayesian, sprt
        /// </summary>
        [Output("analyticsType")]
        public Output<string> AnalyticsType { get; private set; } = null!;

        /// <summary>
        /// Name of the source experiment for assignment
        /// </summary>
        [Output("assignmentSourceExperimentName")]
        public Output<string> AssignmentSourceExperimentName { get; private set; } = null!;

        /// <summary>
        /// Source name of the assignment
        /// </summary>
        [Output("assignmentSourceName")]
        public Output<string> AssignmentSourceName { get; private set; } = null!;

        /// <summary>
        /// Is Benjamini-Hochberg procedure applied per metric?
        /// </summary>
        [Output("benjaminiHochbergPerMetric")]
        public Output<bool> BenjaminiHochbergPerMetric { get; private set; } = null!;

        /// <summary>
        /// Is Benjamini-Hochberg procedure applied per variant?
        /// </summary>
        [Output("benjaminiHochbergPerVariant")]
        public Output<bool> BenjaminiHochbergPerVariant { get; private set; } = null!;

        /// <summary>
        /// Is Benjamini-Hochberg procedure applied for primary metrics only?
        /// </summary>
        [Output("benjaminiPrimaryMetricsOnly")]
        public Output<bool> BenjaminiPrimaryMetricsOnly { get; private set; } = null!;

        /// <summary>
        /// Is Bonferroni correction applied per variant?
        /// </summary>
        [Output("bonferroniCorrection")]
        public Output<bool> BonferroniCorrection { get; private set; } = null!;

        /// <summary>
        /// Is Bonferroni correction applied per metric?
        /// </summary>
        [Output("bonferroniCorrectionPerMetric")]
        public Output<bool> BonferroniCorrectionPerMetric { get; private set; } = null!;

        /// <summary>
        /// Warehouse Native Only - Whether to filter to units whose experiment cohort analysis duration is complete, if cohortedAnalysisDuration exists
        /// </summary>
        [Output("cohortWaitUntilEndToInclude")]
        public Output<bool> CohortWaitUntilEndToInclude { get; private set; } = null!;

        /// <summary>
        /// Warehouse Native Only - Cohorted analysis duration in days
        /// </summary>
        [Output("cohortedAnalysisDuration")]
        public Output<int> CohortedAnalysisDuration { get; private set; } = null!;

        /// <summary>
        /// Warehouse Native Only - Allow cohort metrics to mature after experiment end
        /// </summary>
        [Output("cohortedMetricsMatureAfterEnd")]
        public Output<bool> CohortedMetricsMatureAfterEnd { get; private set; } = null!;

        /// <summary>
        /// Optional control group ID
        /// </summary>
        [Output("controlGroupId")]
        public Output<string> ControlGroupId { get; private set; } = null!;

        /// <summary>
        /// The email of the creator of this experiment
        /// </summary>
        [Output("creatorEmail")]
        public Output<string> CreatorEmail { get; private set; } = null!;

        /// <summary>
        /// The Statsig ID of the creator of this experiment
        /// </summary>
        [Output("creatorId")]
        public Output<string> CreatorId { get; private set; } = null!;

        /// <summary>
        /// Default error margin used for results
        /// </summary>
        [Output("defaultConfidenceInterval")]
        public Output<string> DefaultConfidenceInterval { get; private set; } = null!;

        /// <summary>
        /// A description of the new experiment
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// How long the experiment is expected to last in days
        /// </summary>
        [Output("duration")]
        public Output<int> Duration { get; private set; } = null!;

        /// <summary>
        /// Fixed analysis duration in days
        /// </summary>
        [Output("fixedAnalysisDuration")]
        public Output<int> FixedAnalysisDuration { get; private set; } = null!;

        /// <summary>
        /// The test groups for your experiment
        /// </summary>
        [Output("groups")]
        public Output<ImmutableArray<Outputs.ExperimentGroup>> Groups { get; private set; } = null!;

        /// <summary>
        /// A statement that will be tested by this experiment
        /// </summary>
        [Output("hypothesis")]
        public Output<string> Hypothesis { get; private set; } = null!;

        /// <summary>
        /// The idType the experiment will be performed on
        /// </summary>
        [Output("idType")]
        public Output<string> IdType { get; private set; } = null!;

        /// <summary>
        /// For Warehouse Native
        /// </summary>
        [Output("isAnalysisOnly")]
        public Output<bool> IsAnalysisOnly { get; private set; } = null!;

        /// <summary>
        /// ID of the launched group, null otherwise
        /// </summary>
        [Output("launchedGroupId")]
        public Output<string> LaunchedGroupId { get; private set; } = null!;

        /// <summary>
        /// Which layer to place the experiment into.
        /// </summary>
        [Output("layerId")]
        public Output<string> LayerId { get; private set; } = null!;

        /// <summary>
        /// Links to relevant documentation or resources
        /// </summary>
        [Output("links")]
        public Output<ImmutableArray<Outputs.ExperimentLink>> Links { get; private set; } = null!;

        /// <summary>
        /// The name of the new experiment
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Primary metric tags for the experiment
        /// </summary>
        [Output("primaryMetricTags")]
        public Output<ImmutableArray<string>> PrimaryMetricTags { get; private set; } = null!;

        /// <summary>
        /// Main metrics needed to evaluate your hypothesis
        /// </summary>
        [Output("primaryMetrics")]
        public Output<ImmutableArray<Outputs.ExperimentPrimaryMetric>> PrimaryMetrics { get; private set; } = null!;

        /// <summary>
        /// Warehouse Native only - UTC hour at which to run scheduled pulse loads
        /// </summary>
        [Output("scheduledReloadHour")]
        public Output<int> ScheduledReloadHour { get; private set; } = null!;

        /// <summary>
        /// Warehouse Native only - reload type for scheduled reloads
        /// </summary>
        [Output("scheduledReloadType")]
        public Output<string> ScheduledReloadType { get; private set; } = null!;

        /// <summary>
        /// The secondary ID type for the experiment used in WHN for ID resolution
        /// </summary>
        [Output("secondaryIdtype")]
        public Output<string> SecondaryIdtype { get; private set; } = null!;

        /// <summary>
        /// Secondary metric tags for the experiment
        /// </summary>
        [Output("secondaryMetricTags")]
        public Output<ImmutableArray<string>> SecondaryMetricTags { get; private set; } = null!;

        /// <summary>
        /// Additional metrics to monitor that might impact the analysis or final decision of the experiment
        /// </summary>
        [Output("secondaryMetrics")]
        public Output<ImmutableArray<Outputs.ExperimentSecondaryMetric>> SecondaryMetrics { get; private set; } = null!;

        /// <summary>
        /// Apply sequential testing?
        /// </summary>
        [Output("sequentialTesting")]
        public Output<bool> SequentialTesting { get; private set; } = null!;

        /// <summary>
        /// The current status of the experiment
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Tags associated with the experiment
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Target apps assigned to this experiment
        /// </summary>
        [Output("targetApps")]
        public Output<ImmutableArray<string>> TargetApps { get; private set; } = null!;

        /// <summary>
        /// Target exposures for the experiment
        /// </summary>
        [Output("targetExposures")]
        public Output<int> TargetExposures { get; private set; } = null!;

        /// <summary>
        /// Restrict your experiment to users passing the selected feature gate
        /// </summary>
        [Output("targetingGateId")]
        public Output<string> TargetingGateId { get; private set; } = null!;

        /// <summary>
        /// Enterprise only
        /// </summary>
        [Output("team")]
        public Output<string> Team { get; private set; } = null!;


        /// <summary>
        /// Create a Experiment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Experiment(string name, ExperimentArgs? args = null, CustomResourceOptions? options = null)
            : base("statsig:index/experiment:Experiment", name, args ?? new ExperimentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Experiment(string name, Input<string> id, ExperimentState? state = null, CustomResourceOptions? options = null)
            : base("statsig:index/experiment:Experiment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Experiment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Experiment Get(string name, Input<string> id, ExperimentState? state = null, CustomResourceOptions? options = null)
        {
            return new Experiment(name, id, state, options);
        }
    }

    public sealed class ExperimentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Percent of layer allocated to this experiment
        /// </summary>
        [Input("allocation")]
        public Input<double>? Allocation { get; set; }

        /// <summary>
        /// Warehouse Native Only - Allocation duration in days
        /// </summary>
        [Input("allocationDuration")]
        public Input<int>? AllocationDuration { get; set; }

        /// <summary>
        /// Warehouse Native only - end time for analysis only experiments
        /// </summary>
        [Input("analysisEndTime")]
        public Input<string>? AnalysisEndTime { get; set; }

        /// <summary>
        /// The mode of analysis for the experiment, e.g frequentist, bayesian, sprt
        /// </summary>
        [Input("analyticsType")]
        public Input<string>? AnalyticsType { get; set; }

        /// <summary>
        /// Name of the source experiment for assignment
        /// </summary>
        [Input("assignmentSourceExperimentName")]
        public Input<string>? AssignmentSourceExperimentName { get; set; }

        /// <summary>
        /// Source name of the assignment
        /// </summary>
        [Input("assignmentSourceName")]
        public Input<string>? AssignmentSourceName { get; set; }

        /// <summary>
        /// Is Benjamini-Hochberg procedure applied per metric?
        /// </summary>
        [Input("benjaminiHochbergPerMetric")]
        public Input<bool>? BenjaminiHochbergPerMetric { get; set; }

        /// <summary>
        /// Is Benjamini-Hochberg procedure applied per variant?
        /// </summary>
        [Input("benjaminiHochbergPerVariant")]
        public Input<bool>? BenjaminiHochbergPerVariant { get; set; }

        /// <summary>
        /// Is Benjamini-Hochberg procedure applied for primary metrics only?
        /// </summary>
        [Input("benjaminiPrimaryMetricsOnly")]
        public Input<bool>? BenjaminiPrimaryMetricsOnly { get; set; }

        /// <summary>
        /// Is Bonferroni correction applied per variant?
        /// </summary>
        [Input("bonferroniCorrection")]
        public Input<bool>? BonferroniCorrection { get; set; }

        /// <summary>
        /// Is Bonferroni correction applied per metric?
        /// </summary>
        [Input("bonferroniCorrectionPerMetric")]
        public Input<bool>? BonferroniCorrectionPerMetric { get; set; }

        /// <summary>
        /// Warehouse Native Only - Whether to filter to units whose experiment cohort analysis duration is complete, if cohortedAnalysisDuration exists
        /// </summary>
        [Input("cohortWaitUntilEndToInclude")]
        public Input<bool>? CohortWaitUntilEndToInclude { get; set; }

        /// <summary>
        /// Warehouse Native Only - Cohorted analysis duration in days
        /// </summary>
        [Input("cohortedAnalysisDuration")]
        public Input<int>? CohortedAnalysisDuration { get; set; }

        /// <summary>
        /// Warehouse Native Only - Allow cohort metrics to mature after experiment end
        /// </summary>
        [Input("cohortedMetricsMatureAfterEnd")]
        public Input<bool>? CohortedMetricsMatureAfterEnd { get; set; }

        /// <summary>
        /// Optional control group ID
        /// </summary>
        [Input("controlGroupId")]
        public Input<string>? ControlGroupId { get; set; }

        /// <summary>
        /// The email of the creator of this experiment
        /// </summary>
        [Input("creatorEmail")]
        public Input<string>? CreatorEmail { get; set; }

        /// <summary>
        /// The Statsig ID of the creator of this experiment
        /// </summary>
        [Input("creatorId")]
        public Input<string>? CreatorId { get; set; }

        /// <summary>
        /// Default error margin used for results
        /// </summary>
        [Input("defaultConfidenceInterval")]
        public Input<string>? DefaultConfidenceInterval { get; set; }

        /// <summary>
        /// A description of the new experiment
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// How long the experiment is expected to last in days
        /// </summary>
        [Input("duration")]
        public Input<int>? Duration { get; set; }

        /// <summary>
        /// Fixed analysis duration in days
        /// </summary>
        [Input("fixedAnalysisDuration")]
        public Input<int>? FixedAnalysisDuration { get; set; }

        [Input("groups")]
        private InputList<Inputs.ExperimentGroupArgs>? _groups;

        /// <summary>
        /// The test groups for your experiment
        /// </summary>
        public InputList<Inputs.ExperimentGroupArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.ExperimentGroupArgs>());
            set => _groups = value;
        }

        /// <summary>
        /// A statement that will be tested by this experiment
        /// </summary>
        [Input("hypothesis")]
        public Input<string>? Hypothesis { get; set; }

        /// <summary>
        /// The idType the experiment will be performed on
        /// </summary>
        [Input("idType")]
        public Input<string>? IdType { get; set; }

        /// <summary>
        /// For Warehouse Native
        /// </summary>
        [Input("isAnalysisOnly")]
        public Input<bool>? IsAnalysisOnly { get; set; }

        /// <summary>
        /// ID of the launched group, null otherwise
        /// </summary>
        [Input("launchedGroupId")]
        public Input<string>? LaunchedGroupId { get; set; }

        /// <summary>
        /// Which layer to place the experiment into.
        /// </summary>
        [Input("layerId")]
        public Input<string>? LayerId { get; set; }

        [Input("links")]
        private InputList<Inputs.ExperimentLinkArgs>? _links;

        /// <summary>
        /// Links to relevant documentation or resources
        /// </summary>
        public InputList<Inputs.ExperimentLinkArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.ExperimentLinkArgs>());
            set => _links = value;
        }

        /// <summary>
        /// The name of the new experiment
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("primaryMetricTags")]
        private InputList<string>? _primaryMetricTags;

        /// <summary>
        /// Primary metric tags for the experiment
        /// </summary>
        public InputList<string> PrimaryMetricTags
        {
            get => _primaryMetricTags ?? (_primaryMetricTags = new InputList<string>());
            set => _primaryMetricTags = value;
        }

        [Input("primaryMetrics")]
        private InputList<Inputs.ExperimentPrimaryMetricArgs>? _primaryMetrics;

        /// <summary>
        /// Main metrics needed to evaluate your hypothesis
        /// </summary>
        public InputList<Inputs.ExperimentPrimaryMetricArgs> PrimaryMetrics
        {
            get => _primaryMetrics ?? (_primaryMetrics = new InputList<Inputs.ExperimentPrimaryMetricArgs>());
            set => _primaryMetrics = value;
        }

        /// <summary>
        /// Warehouse Native only - UTC hour at which to run scheduled pulse loads
        /// </summary>
        [Input("scheduledReloadHour")]
        public Input<int>? ScheduledReloadHour { get; set; }

        /// <summary>
        /// Warehouse Native only - reload type for scheduled reloads
        /// </summary>
        [Input("scheduledReloadType")]
        public Input<string>? ScheduledReloadType { get; set; }

        /// <summary>
        /// The secondary ID type for the experiment used in WHN for ID resolution
        /// </summary>
        [Input("secondaryIdtype")]
        public Input<string>? SecondaryIdtype { get; set; }

        [Input("secondaryMetricTags")]
        private InputList<string>? _secondaryMetricTags;

        /// <summary>
        /// Secondary metric tags for the experiment
        /// </summary>
        public InputList<string> SecondaryMetricTags
        {
            get => _secondaryMetricTags ?? (_secondaryMetricTags = new InputList<string>());
            set => _secondaryMetricTags = value;
        }

        [Input("secondaryMetrics")]
        private InputList<Inputs.ExperimentSecondaryMetricArgs>? _secondaryMetrics;

        /// <summary>
        /// Additional metrics to monitor that might impact the analysis or final decision of the experiment
        /// </summary>
        public InputList<Inputs.ExperimentSecondaryMetricArgs> SecondaryMetrics
        {
            get => _secondaryMetrics ?? (_secondaryMetrics = new InputList<Inputs.ExperimentSecondaryMetricArgs>());
            set => _secondaryMetrics = value;
        }

        /// <summary>
        /// Apply sequential testing?
        /// </summary>
        [Input("sequentialTesting")]
        public Input<bool>? SequentialTesting { get; set; }

        /// <summary>
        /// The current status of the experiment
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags associated with the experiment
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("targetApps")]
        private InputList<string>? _targetApps;

        /// <summary>
        /// Target apps assigned to this experiment
        /// </summary>
        public InputList<string> TargetApps
        {
            get => _targetApps ?? (_targetApps = new InputList<string>());
            set => _targetApps = value;
        }

        /// <summary>
        /// Target exposures for the experiment
        /// </summary>
        [Input("targetExposures")]
        public Input<int>? TargetExposures { get; set; }

        /// <summary>
        /// Restrict your experiment to users passing the selected feature gate
        /// </summary>
        [Input("targetingGateId")]
        public Input<string>? TargetingGateId { get; set; }

        /// <summary>
        /// Enterprise only
        /// </summary>
        [Input("team")]
        public Input<string>? Team { get; set; }

        public ExperimentArgs()
        {
        }
        public static new ExperimentArgs Empty => new ExperimentArgs();
    }

    public sealed class ExperimentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Percent of layer allocated to this experiment
        /// </summary>
        [Input("allocation")]
        public Input<double>? Allocation { get; set; }

        /// <summary>
        /// Warehouse Native Only - Allocation duration in days
        /// </summary>
        [Input("allocationDuration")]
        public Input<int>? AllocationDuration { get; set; }

        /// <summary>
        /// Warehouse Native only - end time for analysis only experiments
        /// </summary>
        [Input("analysisEndTime")]
        public Input<string>? AnalysisEndTime { get; set; }

        /// <summary>
        /// The mode of analysis for the experiment, e.g frequentist, bayesian, sprt
        /// </summary>
        [Input("analyticsType")]
        public Input<string>? AnalyticsType { get; set; }

        /// <summary>
        /// Name of the source experiment for assignment
        /// </summary>
        [Input("assignmentSourceExperimentName")]
        public Input<string>? AssignmentSourceExperimentName { get; set; }

        /// <summary>
        /// Source name of the assignment
        /// </summary>
        [Input("assignmentSourceName")]
        public Input<string>? AssignmentSourceName { get; set; }

        /// <summary>
        /// Is Benjamini-Hochberg procedure applied per metric?
        /// </summary>
        [Input("benjaminiHochbergPerMetric")]
        public Input<bool>? BenjaminiHochbergPerMetric { get; set; }

        /// <summary>
        /// Is Benjamini-Hochberg procedure applied per variant?
        /// </summary>
        [Input("benjaminiHochbergPerVariant")]
        public Input<bool>? BenjaminiHochbergPerVariant { get; set; }

        /// <summary>
        /// Is Benjamini-Hochberg procedure applied for primary metrics only?
        /// </summary>
        [Input("benjaminiPrimaryMetricsOnly")]
        public Input<bool>? BenjaminiPrimaryMetricsOnly { get; set; }

        /// <summary>
        /// Is Bonferroni correction applied per variant?
        /// </summary>
        [Input("bonferroniCorrection")]
        public Input<bool>? BonferroniCorrection { get; set; }

        /// <summary>
        /// Is Bonferroni correction applied per metric?
        /// </summary>
        [Input("bonferroniCorrectionPerMetric")]
        public Input<bool>? BonferroniCorrectionPerMetric { get; set; }

        /// <summary>
        /// Warehouse Native Only - Whether to filter to units whose experiment cohort analysis duration is complete, if cohortedAnalysisDuration exists
        /// </summary>
        [Input("cohortWaitUntilEndToInclude")]
        public Input<bool>? CohortWaitUntilEndToInclude { get; set; }

        /// <summary>
        /// Warehouse Native Only - Cohorted analysis duration in days
        /// </summary>
        [Input("cohortedAnalysisDuration")]
        public Input<int>? CohortedAnalysisDuration { get; set; }

        /// <summary>
        /// Warehouse Native Only - Allow cohort metrics to mature after experiment end
        /// </summary>
        [Input("cohortedMetricsMatureAfterEnd")]
        public Input<bool>? CohortedMetricsMatureAfterEnd { get; set; }

        /// <summary>
        /// Optional control group ID
        /// </summary>
        [Input("controlGroupId")]
        public Input<string>? ControlGroupId { get; set; }

        /// <summary>
        /// The email of the creator of this experiment
        /// </summary>
        [Input("creatorEmail")]
        public Input<string>? CreatorEmail { get; set; }

        /// <summary>
        /// The Statsig ID of the creator of this experiment
        /// </summary>
        [Input("creatorId")]
        public Input<string>? CreatorId { get; set; }

        /// <summary>
        /// Default error margin used for results
        /// </summary>
        [Input("defaultConfidenceInterval")]
        public Input<string>? DefaultConfidenceInterval { get; set; }

        /// <summary>
        /// A description of the new experiment
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// How long the experiment is expected to last in days
        /// </summary>
        [Input("duration")]
        public Input<int>? Duration { get; set; }

        /// <summary>
        /// Fixed analysis duration in days
        /// </summary>
        [Input("fixedAnalysisDuration")]
        public Input<int>? FixedAnalysisDuration { get; set; }

        [Input("groups")]
        private InputList<Inputs.ExperimentGroupGetArgs>? _groups;

        /// <summary>
        /// The test groups for your experiment
        /// </summary>
        public InputList<Inputs.ExperimentGroupGetArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.ExperimentGroupGetArgs>());
            set => _groups = value;
        }

        /// <summary>
        /// A statement that will be tested by this experiment
        /// </summary>
        [Input("hypothesis")]
        public Input<string>? Hypothesis { get; set; }

        /// <summary>
        /// The idType the experiment will be performed on
        /// </summary>
        [Input("idType")]
        public Input<string>? IdType { get; set; }

        /// <summary>
        /// For Warehouse Native
        /// </summary>
        [Input("isAnalysisOnly")]
        public Input<bool>? IsAnalysisOnly { get; set; }

        /// <summary>
        /// ID of the launched group, null otherwise
        /// </summary>
        [Input("launchedGroupId")]
        public Input<string>? LaunchedGroupId { get; set; }

        /// <summary>
        /// Which layer to place the experiment into.
        /// </summary>
        [Input("layerId")]
        public Input<string>? LayerId { get; set; }

        [Input("links")]
        private InputList<Inputs.ExperimentLinkGetArgs>? _links;

        /// <summary>
        /// Links to relevant documentation or resources
        /// </summary>
        public InputList<Inputs.ExperimentLinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.ExperimentLinkGetArgs>());
            set => _links = value;
        }

        /// <summary>
        /// The name of the new experiment
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("primaryMetricTags")]
        private InputList<string>? _primaryMetricTags;

        /// <summary>
        /// Primary metric tags for the experiment
        /// </summary>
        public InputList<string> PrimaryMetricTags
        {
            get => _primaryMetricTags ?? (_primaryMetricTags = new InputList<string>());
            set => _primaryMetricTags = value;
        }

        [Input("primaryMetrics")]
        private InputList<Inputs.ExperimentPrimaryMetricGetArgs>? _primaryMetrics;

        /// <summary>
        /// Main metrics needed to evaluate your hypothesis
        /// </summary>
        public InputList<Inputs.ExperimentPrimaryMetricGetArgs> PrimaryMetrics
        {
            get => _primaryMetrics ?? (_primaryMetrics = new InputList<Inputs.ExperimentPrimaryMetricGetArgs>());
            set => _primaryMetrics = value;
        }

        /// <summary>
        /// Warehouse Native only - UTC hour at which to run scheduled pulse loads
        /// </summary>
        [Input("scheduledReloadHour")]
        public Input<int>? ScheduledReloadHour { get; set; }

        /// <summary>
        /// Warehouse Native only - reload type for scheduled reloads
        /// </summary>
        [Input("scheduledReloadType")]
        public Input<string>? ScheduledReloadType { get; set; }

        /// <summary>
        /// The secondary ID type for the experiment used in WHN for ID resolution
        /// </summary>
        [Input("secondaryIdtype")]
        public Input<string>? SecondaryIdtype { get; set; }

        [Input("secondaryMetricTags")]
        private InputList<string>? _secondaryMetricTags;

        /// <summary>
        /// Secondary metric tags for the experiment
        /// </summary>
        public InputList<string> SecondaryMetricTags
        {
            get => _secondaryMetricTags ?? (_secondaryMetricTags = new InputList<string>());
            set => _secondaryMetricTags = value;
        }

        [Input("secondaryMetrics")]
        private InputList<Inputs.ExperimentSecondaryMetricGetArgs>? _secondaryMetrics;

        /// <summary>
        /// Additional metrics to monitor that might impact the analysis or final decision of the experiment
        /// </summary>
        public InputList<Inputs.ExperimentSecondaryMetricGetArgs> SecondaryMetrics
        {
            get => _secondaryMetrics ?? (_secondaryMetrics = new InputList<Inputs.ExperimentSecondaryMetricGetArgs>());
            set => _secondaryMetrics = value;
        }

        /// <summary>
        /// Apply sequential testing?
        /// </summary>
        [Input("sequentialTesting")]
        public Input<bool>? SequentialTesting { get; set; }

        /// <summary>
        /// The current status of the experiment
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags associated with the experiment
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("targetApps")]
        private InputList<string>? _targetApps;

        /// <summary>
        /// Target apps assigned to this experiment
        /// </summary>
        public InputList<string> TargetApps
        {
            get => _targetApps ?? (_targetApps = new InputList<string>());
            set => _targetApps = value;
        }

        /// <summary>
        /// Target exposures for the experiment
        /// </summary>
        [Input("targetExposures")]
        public Input<int>? TargetExposures { get; set; }

        /// <summary>
        /// Restrict your experiment to users passing the selected feature gate
        /// </summary>
        [Input("targetingGateId")]
        public Input<string>? TargetingGateId { get; set; }

        /// <summary>
        /// Enterprise only
        /// </summary>
        [Input("team")]
        public Input<string>? Team { get; set; }

        public ExperimentState()
        {
        }
        public static new ExperimentState Empty => new ExperimentState();
    }
}
