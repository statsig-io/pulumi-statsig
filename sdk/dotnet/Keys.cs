// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Statsig.Pulumi
{
    /// <summary>
    /// This resource allows you to configure API keys for your Statsig project.
    /// 
    /// To learn more about API keys, see [API Keys Documentation](https://docs.statsig.com/sdk-keys/api-keys/)
    /// 
    /// To learn more about the API powering this resource, see [Keys API Documentation](https://docs.statsig.com/console-api/keys)
    /// 
    /// &gt; Note: This resource requires a Console API Key with the following scope: `can access other keys`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Pulumi = Statsig.Pulumi;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var serverKey = new Pulumi.Keys("server_key", new()
    ///     {
    ///         Description = "A short description of what this server key is used for.",
    ///         Type = "SERVER",
    ///         Environments = new[]
    ///         {
    ///             "production",
    ///         },
    ///     });
    /// 
    ///     var clientKey = new Pulumi.Keys("client_key", new()
    ///     {
    ///         Description = "A short description of what this client key is used for.",
    ///         Type = "CLIENT",
    ///         Environments = new[]
    ///         {
    ///             "production",
    ///         },
    ///         Scopes = new[]
    ///         {
    ///             "client_download_config_specs",
    ///         },
    ///     });
    /// 
    ///     var consoleKey = new Pulumi.Keys("console_key", new()
    ///     {
    ///         Description = "A short description of what this console key is used for.",
    ///         Type = "CONSOLE",
    ///         Scopes = new[]
    ///         {
    ///             "omni_read_only",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [PulumiResourceType("statsig:index/keys:Keys")]
    public partial class Keys : global::Pulumi.CustomResource
    {
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("environments")]
        public Output<ImmutableArray<string>> Environments { get; private set; } = null!;

        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        [Output("secondaryTargetAppIds")]
        public Output<ImmutableArray<string>> SecondaryTargetAppIds { get; private set; } = null!;

        [Output("targetAppId")]
        public Output<string> TargetAppId { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Keys resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Keys(string name, KeysArgs args, CustomResourceOptions? options = null)
            : base("statsig:index/keys:Keys", name, args ?? new KeysArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Keys(string name, Input<string> id, KeysState? state = null, CustomResourceOptions? options = null)
            : base("statsig:index/keys:Keys", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Keys resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Keys Get(string name, Input<string> id, KeysState? state = null, CustomResourceOptions? options = null)
        {
            return new Keys(name, id, state, options);
        }
    }

    public sealed class KeysArgs : global::Pulumi.ResourceArgs
    {
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("environments")]
        private InputList<string>? _environments;
        public InputList<string> Environments
        {
            get => _environments ?? (_environments = new InputList<string>());
            set => _environments = value;
        }

        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("secondaryTargetAppIds")]
        private InputList<string>? _secondaryTargetAppIds;
        public InputList<string> SecondaryTargetAppIds
        {
            get => _secondaryTargetAppIds ?? (_secondaryTargetAppIds = new InputList<string>());
            set => _secondaryTargetAppIds = value;
        }

        [Input("targetAppId")]
        public Input<string>? TargetAppId { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public KeysArgs()
        {
        }
        public static new KeysArgs Empty => new KeysArgs();
    }

    public sealed class KeysState : global::Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("environments")]
        private InputList<string>? _environments;
        public InputList<string> Environments
        {
            get => _environments ?? (_environments = new InputList<string>());
            set => _environments = value;
        }

        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("secondaryTargetAppIds")]
        private InputList<string>? _secondaryTargetAppIds;
        public InputList<string> SecondaryTargetAppIds
        {
            get => _secondaryTargetAppIds ?? (_secondaryTargetAppIds = new InputList<string>());
            set => _secondaryTargetAppIds = value;
        }

        [Input("targetAppId")]
        public Input<string>? TargetAppId { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public KeysState()
        {
        }
        public static new KeysState Empty => new KeysState();
    }
}
