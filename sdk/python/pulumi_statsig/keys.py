# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['KeysArgs', 'Keys']

@pulumi.input_type
class KeysArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str],
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 secondary_target_app_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 target_app_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Keys resource.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "type", type)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if secondary_target_app_ids is not None:
            pulumi.set(__self__, "secondary_target_app_ids", secondary_target_app_ids)
        if target_app_id is not None:
            pulumi.set(__self__, "target_app_id", target_app_id)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="secondaryTargetAppIds")
    def secondary_target_app_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "secondary_target_app_ids")

    @secondary_target_app_ids.setter
    def secondary_target_app_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "secondary_target_app_ids", value)

    @property
    @pulumi.getter(name="targetAppId")
    def target_app_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "target_app_id")

    @target_app_id.setter
    def target_app_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "target_app_id", value)


@pulumi.input_type
class _KeysState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 secondary_target_app_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 target_app_id: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Keys resources.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if secondary_target_app_ids is not None:
            pulumi.set(__self__, "secondary_target_app_ids", secondary_target_app_ids)
        if target_app_id is not None:
            pulumi.set(__self__, "target_app_id", target_app_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="secondaryTargetAppIds")
    def secondary_target_app_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "secondary_target_app_ids")

    @secondary_target_app_ids.setter
    def secondary_target_app_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "secondary_target_app_ids", value)

    @property
    @pulumi.getter(name="targetAppId")
    def target_app_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "target_app_id")

    @target_app_id.setter
    def target_app_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "target_app_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("statsig:index/keys:Keys")
class Keys(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 secondary_target_app_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 target_app_id: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        This resource allows you to configure API keys for your Statsig project.

        To learn more about API keys, see [API Keys Documentation](https://docs.statsig.com/sdk-keys/api-keys/)

        To learn more about the API powering this resource, see [Keys API Documentation](https://docs.statsig.com/console-api/keys)

        > Note: This resource requires a Console API Key with the following scope: `can access other keys`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_statsig as statsig

        server_key = statsig.Keys("server_key",
            description="A short description of what this server key is used for.",
            type="SERVER",
            environments=["production"])
        client_key = statsig.Keys("client_key",
            description="A short description of what this client key is used for.",
            type="CLIENT",
            environments=["production"],
            scopes=["client_download_config_specs"])
        console_key = statsig.Keys("console_key",
            description="A short description of what this console key is used for.",
            type="CONSOLE",
            scopes=["omni_read_only"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KeysArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows you to configure API keys for your Statsig project.

        To learn more about API keys, see [API Keys Documentation](https://docs.statsig.com/sdk-keys/api-keys/)

        To learn more about the API powering this resource, see [Keys API Documentation](https://docs.statsig.com/console-api/keys)

        > Note: This resource requires a Console API Key with the following scope: `can access other keys`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_statsig as statsig

        server_key = statsig.Keys("server_key",
            description="A short description of what this server key is used for.",
            type="SERVER",
            environments=["production"])
        client_key = statsig.Keys("client_key",
            description="A short description of what this client key is used for.",
            type="CLIENT",
            environments=["production"],
            scopes=["client_download_config_specs"])
        console_key = statsig.Keys("console_key",
            description="A short description of what this console key is used for.",
            type="CONSOLE",
            scopes=["omni_read_only"])
        ```

        :param str resource_name: The name of the resource.
        :param KeysArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KeysArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 secondary_target_app_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 target_app_id: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KeysArgs.__new__(KeysArgs)

            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["environments"] = environments
            __props__.__dict__["key"] = key
            __props__.__dict__["scopes"] = scopes
            __props__.__dict__["secondary_target_app_ids"] = secondary_target_app_ids
            __props__.__dict__["target_app_id"] = target_app_id
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(Keys, __self__).__init__(
            'statsig:index/keys:Keys',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            environments: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            key: Optional[pulumi.Input[builtins.str]] = None,
            scopes: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            secondary_target_app_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            target_app_id: Optional[pulumi.Input[builtins.str]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None) -> 'Keys':
        """
        Get an existing Keys resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KeysState.__new__(_KeysState)

        __props__.__dict__["description"] = description
        __props__.__dict__["environments"] = environments
        __props__.__dict__["key"] = key
        __props__.__dict__["scopes"] = scopes
        __props__.__dict__["secondary_target_app_ids"] = secondary_target_app_ids
        __props__.__dict__["target_app_id"] = target_app_id
        __props__.__dict__["type"] = type
        return Keys(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def environments(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def scopes(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="secondaryTargetAppIds")
    def secondary_target_app_ids(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "secondary_target_app_ids")

    @property
    @pulumi.getter(name="targetAppId")
    def target_app_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "target_app_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "type")

