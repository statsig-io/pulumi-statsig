# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MetricSourceArgs', 'MetricSource']

@pulumi.input_type
class MetricSourceArgs:
    def __init__(__self__, *,
                 id_type_mappings: pulumi.Input[Sequence[pulumi.Input['MetricSourceIdTypeMappingArgs']]],
                 sql: pulumi.Input[builtins.str],
                 timestamp_column: pulumi.Input[builtins.str],
                 custom_field_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['MetricSourceCustomFieldMappingArgs']]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 is_read_only: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 owner: Optional[pulumi.Input['MetricSourceOwnerArgs']] = None,
                 source_type: Optional[pulumi.Input[builtins.str]] = None,
                 table_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 timestamp_as_day: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a MetricSource resource.
        :param pulumi.Input[Sequence[pulumi.Input['MetricSourceIdTypeMappingArgs']]] id_type_mappings: Array defining the mapping between Statsig unit IDs and their respective source columns.
        :param pulumi.Input[builtins.str] sql: The SQL query or statement used to extract data from the metric source.
        :param pulumi.Input[builtins.str] timestamp_column: The name of the column containing timestamp data for the metric source.
        :param pulumi.Input[Sequence[pulumi.Input['MetricSourceCustomFieldMappingArgs']]] custom_field_mappings: Optional array defining mappings for custom fields using specific formulas.
        :param pulumi.Input[builtins.str] description: An optional description for the metric source, providing context and details about its purpose and usage.
        :param pulumi.Input[builtins.bool] is_read_only: Specifies if the source can only be edited via the Console API.
        :param pulumi.Input[builtins.str] name: The name of the metric source, serving as its primary identifier.
        :param pulumi.Input['MetricSourceOwnerArgs'] owner: Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
        :param pulumi.Input[builtins.str] source_type: The type of source, indicating whether it is a database table or a custom query.
        :param pulumi.Input[builtins.str] table_name: The name of the database table if the source type is "table".
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] tags: Optional array of tags to categorize the metric source, facilitating easier organization and retrieval.
        :param pulumi.Input[builtins.bool] timestamp_as_day: Indicates whether the timestamp should be treated as a day-level granularity.
        """
        pulumi.set(__self__, "id_type_mappings", id_type_mappings)
        pulumi.set(__self__, "sql", sql)
        pulumi.set(__self__, "timestamp_column", timestamp_column)
        if custom_field_mappings is not None:
            pulumi.set(__self__, "custom_field_mappings", custom_field_mappings)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_read_only is not None:
            pulumi.set(__self__, "is_read_only", is_read_only)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timestamp_as_day is not None:
            pulumi.set(__self__, "timestamp_as_day", timestamp_as_day)

    @property
    @pulumi.getter(name="idTypeMappings")
    def id_type_mappings(self) -> pulumi.Input[Sequence[pulumi.Input['MetricSourceIdTypeMappingArgs']]]:
        """
        Array defining the mapping between Statsig unit IDs and their respective source columns.
        """
        return pulumi.get(self, "id_type_mappings")

    @id_type_mappings.setter
    def id_type_mappings(self, value: pulumi.Input[Sequence[pulumi.Input['MetricSourceIdTypeMappingArgs']]]):
        pulumi.set(self, "id_type_mappings", value)

    @property
    @pulumi.getter
    def sql(self) -> pulumi.Input[builtins.str]:
        """
        The SQL query or statement used to extract data from the metric source.
        """
        return pulumi.get(self, "sql")

    @sql.setter
    def sql(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "sql", value)

    @property
    @pulumi.getter(name="timestampColumn")
    def timestamp_column(self) -> pulumi.Input[builtins.str]:
        """
        The name of the column containing timestamp data for the metric source.
        """
        return pulumi.get(self, "timestamp_column")

    @timestamp_column.setter
    def timestamp_column(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "timestamp_column", value)

    @property
    @pulumi.getter(name="customFieldMappings")
    def custom_field_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MetricSourceCustomFieldMappingArgs']]]]:
        """
        Optional array defining mappings for custom fields using specific formulas.
        """
        return pulumi.get(self, "custom_field_mappings")

    @custom_field_mappings.setter
    def custom_field_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MetricSourceCustomFieldMappingArgs']]]]):
        pulumi.set(self, "custom_field_mappings", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        An optional description for the metric source, providing context and details about its purpose and usage.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Specifies if the source can only be edited via the Console API.
        """
        return pulumi.get(self, "is_read_only")

    @is_read_only.setter
    def is_read_only(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_read_only", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the metric source, serving as its primary identifier.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input['MetricSourceOwnerArgs']]:
        """
        Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input['MetricSourceOwnerArgs']]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of source, indicating whether it is a database table or a custom query.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the database table if the source type is "table".
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Optional array of tags to categorize the metric source, facilitating easier organization and retrieval.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="timestampAsDay")
    def timestamp_as_day(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether the timestamp should be treated as a day-level granularity.
        """
        return pulumi.get(self, "timestamp_as_day")

    @timestamp_as_day.setter
    def timestamp_as_day(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "timestamp_as_day", value)


@pulumi.input_type
class _MetricSourceState:
    def __init__(__self__, *,
                 custom_field_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['MetricSourceCustomFieldMappingArgs']]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 id_type_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['MetricSourceIdTypeMappingArgs']]]] = None,
                 is_read_only: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 owner: Optional[pulumi.Input['MetricSourceOwnerArgs']] = None,
                 source_type: Optional[pulumi.Input[builtins.str]] = None,
                 sql: Optional[pulumi.Input[builtins.str]] = None,
                 table_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 timestamp_as_day: Optional[pulumi.Input[builtins.bool]] = None,
                 timestamp_column: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering MetricSource resources.
        :param pulumi.Input[Sequence[pulumi.Input['MetricSourceCustomFieldMappingArgs']]] custom_field_mappings: Optional array defining mappings for custom fields using specific formulas.
        :param pulumi.Input[builtins.str] description: An optional description for the metric source, providing context and details about its purpose and usage.
        :param pulumi.Input[Sequence[pulumi.Input['MetricSourceIdTypeMappingArgs']]] id_type_mappings: Array defining the mapping between Statsig unit IDs and their respective source columns.
        :param pulumi.Input[builtins.bool] is_read_only: Specifies if the source can only be edited via the Console API.
        :param pulumi.Input[builtins.str] name: The name of the metric source, serving as its primary identifier.
        :param pulumi.Input['MetricSourceOwnerArgs'] owner: Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
        :param pulumi.Input[builtins.str] source_type: The type of source, indicating whether it is a database table or a custom query.
        :param pulumi.Input[builtins.str] sql: The SQL query or statement used to extract data from the metric source.
        :param pulumi.Input[builtins.str] table_name: The name of the database table if the source type is "table".
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] tags: Optional array of tags to categorize the metric source, facilitating easier organization and retrieval.
        :param pulumi.Input[builtins.bool] timestamp_as_day: Indicates whether the timestamp should be treated as a day-level granularity.
        :param pulumi.Input[builtins.str] timestamp_column: The name of the column containing timestamp data for the metric source.
        """
        if custom_field_mappings is not None:
            pulumi.set(__self__, "custom_field_mappings", custom_field_mappings)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id_type_mappings is not None:
            pulumi.set(__self__, "id_type_mappings", id_type_mappings)
        if is_read_only is not None:
            pulumi.set(__self__, "is_read_only", is_read_only)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if sql is not None:
            pulumi.set(__self__, "sql", sql)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timestamp_as_day is not None:
            pulumi.set(__self__, "timestamp_as_day", timestamp_as_day)
        if timestamp_column is not None:
            pulumi.set(__self__, "timestamp_column", timestamp_column)

    @property
    @pulumi.getter(name="customFieldMappings")
    def custom_field_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MetricSourceCustomFieldMappingArgs']]]]:
        """
        Optional array defining mappings for custom fields using specific formulas.
        """
        return pulumi.get(self, "custom_field_mappings")

    @custom_field_mappings.setter
    def custom_field_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MetricSourceCustomFieldMappingArgs']]]]):
        pulumi.set(self, "custom_field_mappings", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        An optional description for the metric source, providing context and details about its purpose and usage.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="idTypeMappings")
    def id_type_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MetricSourceIdTypeMappingArgs']]]]:
        """
        Array defining the mapping between Statsig unit IDs and their respective source columns.
        """
        return pulumi.get(self, "id_type_mappings")

    @id_type_mappings.setter
    def id_type_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MetricSourceIdTypeMappingArgs']]]]):
        pulumi.set(self, "id_type_mappings", value)

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Specifies if the source can only be edited via the Console API.
        """
        return pulumi.get(self, "is_read_only")

    @is_read_only.setter
    def is_read_only(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_read_only", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the metric source, serving as its primary identifier.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input['MetricSourceOwnerArgs']]:
        """
        Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input['MetricSourceOwnerArgs']]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of source, indicating whether it is a database table or a custom query.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def sql(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The SQL query or statement used to extract data from the metric source.
        """
        return pulumi.get(self, "sql")

    @sql.setter
    def sql(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sql", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the database table if the source type is "table".
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Optional array of tags to categorize the metric source, facilitating easier organization and retrieval.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="timestampAsDay")
    def timestamp_as_day(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether the timestamp should be treated as a day-level granularity.
        """
        return pulumi.get(self, "timestamp_as_day")

    @timestamp_as_day.setter
    def timestamp_as_day(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "timestamp_as_day", value)

    @property
    @pulumi.getter(name="timestampColumn")
    def timestamp_column(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the column containing timestamp data for the metric source.
        """
        return pulumi.get(self, "timestamp_column")

    @timestamp_column.setter
    def timestamp_column(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "timestamp_column", value)


@pulumi.type_token("statsig:index/metricSource:MetricSource")
class MetricSource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_field_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricSourceCustomFieldMappingArgs', 'MetricSourceCustomFieldMappingArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 id_type_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricSourceIdTypeMappingArgs', 'MetricSourceIdTypeMappingArgsDict']]]]] = None,
                 is_read_only: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 owner: Optional[pulumi.Input[Union['MetricSourceOwnerArgs', 'MetricSourceOwnerArgsDict']]] = None,
                 source_type: Optional[pulumi.Input[builtins.str]] = None,
                 sql: Optional[pulumi.Input[builtins.str]] = None,
                 table_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 timestamp_as_day: Optional[pulumi.Input[builtins.bool]] = None,
                 timestamp_column: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        This resource allows you to configure metric sources for your Statsig project.

        To learn more about metric sources, see [Metric Source Documentation](https://docs.statsig.com/statsig-warehouse-native/configuration/metric-sources)

        To learn more about the API powering this resource, see [Metrics API Documentation](https://docs.statsig.com/console-api/metrics)

        > Note: This resource is only available for [Warehouse Native](https://docs.statsig.com/statsig-warehouse-native/introduction/) projects

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MetricSourceCustomFieldMappingArgs', 'MetricSourceCustomFieldMappingArgsDict']]]] custom_field_mappings: Optional array defining mappings for custom fields using specific formulas.
        :param pulumi.Input[builtins.str] description: An optional description for the metric source, providing context and details about its purpose and usage.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MetricSourceIdTypeMappingArgs', 'MetricSourceIdTypeMappingArgsDict']]]] id_type_mappings: Array defining the mapping between Statsig unit IDs and their respective source columns.
        :param pulumi.Input[builtins.bool] is_read_only: Specifies if the source can only be edited via the Console API.
        :param pulumi.Input[builtins.str] name: The name of the metric source, serving as its primary identifier.
        :param pulumi.Input[Union['MetricSourceOwnerArgs', 'MetricSourceOwnerArgsDict']] owner: Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
        :param pulumi.Input[builtins.str] source_type: The type of source, indicating whether it is a database table or a custom query.
        :param pulumi.Input[builtins.str] sql: The SQL query or statement used to extract data from the metric source.
        :param pulumi.Input[builtins.str] table_name: The name of the database table if the source type is "table".
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] tags: Optional array of tags to categorize the metric source, facilitating easier organization and retrieval.
        :param pulumi.Input[builtins.bool] timestamp_as_day: Indicates whether the timestamp should be treated as a day-level granularity.
        :param pulumi.Input[builtins.str] timestamp_column: The name of the column containing timestamp data for the metric source.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MetricSourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows you to configure metric sources for your Statsig project.

        To learn more about metric sources, see [Metric Source Documentation](https://docs.statsig.com/statsig-warehouse-native/configuration/metric-sources)

        To learn more about the API powering this resource, see [Metrics API Documentation](https://docs.statsig.com/console-api/metrics)

        > Note: This resource is only available for [Warehouse Native](https://docs.statsig.com/statsig-warehouse-native/introduction/) projects

        :param str resource_name: The name of the resource.
        :param MetricSourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MetricSourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_field_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricSourceCustomFieldMappingArgs', 'MetricSourceCustomFieldMappingArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 id_type_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricSourceIdTypeMappingArgs', 'MetricSourceIdTypeMappingArgsDict']]]]] = None,
                 is_read_only: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 owner: Optional[pulumi.Input[Union['MetricSourceOwnerArgs', 'MetricSourceOwnerArgsDict']]] = None,
                 source_type: Optional[pulumi.Input[builtins.str]] = None,
                 sql: Optional[pulumi.Input[builtins.str]] = None,
                 table_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 timestamp_as_day: Optional[pulumi.Input[builtins.bool]] = None,
                 timestamp_column: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MetricSourceArgs.__new__(MetricSourceArgs)

            __props__.__dict__["custom_field_mappings"] = custom_field_mappings
            __props__.__dict__["description"] = description
            if id_type_mappings is None and not opts.urn:
                raise TypeError("Missing required property 'id_type_mappings'")
            __props__.__dict__["id_type_mappings"] = id_type_mappings
            __props__.__dict__["is_read_only"] = is_read_only
            __props__.__dict__["name"] = name
            __props__.__dict__["owner"] = owner
            __props__.__dict__["source_type"] = source_type
            if sql is None and not opts.urn:
                raise TypeError("Missing required property 'sql'")
            __props__.__dict__["sql"] = sql
            __props__.__dict__["table_name"] = table_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timestamp_as_day"] = timestamp_as_day
            if timestamp_column is None and not opts.urn:
                raise TypeError("Missing required property 'timestamp_column'")
            __props__.__dict__["timestamp_column"] = timestamp_column
        super(MetricSource, __self__).__init__(
            'statsig:index/metricSource:MetricSource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            custom_field_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricSourceCustomFieldMappingArgs', 'MetricSourceCustomFieldMappingArgsDict']]]]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            id_type_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricSourceIdTypeMappingArgs', 'MetricSourceIdTypeMappingArgsDict']]]]] = None,
            is_read_only: Optional[pulumi.Input[builtins.bool]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            owner: Optional[pulumi.Input[Union['MetricSourceOwnerArgs', 'MetricSourceOwnerArgsDict']]] = None,
            source_type: Optional[pulumi.Input[builtins.str]] = None,
            sql: Optional[pulumi.Input[builtins.str]] = None,
            table_name: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            timestamp_as_day: Optional[pulumi.Input[builtins.bool]] = None,
            timestamp_column: Optional[pulumi.Input[builtins.str]] = None) -> 'MetricSource':
        """
        Get an existing MetricSource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MetricSourceCustomFieldMappingArgs', 'MetricSourceCustomFieldMappingArgsDict']]]] custom_field_mappings: Optional array defining mappings for custom fields using specific formulas.
        :param pulumi.Input[builtins.str] description: An optional description for the metric source, providing context and details about its purpose and usage.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MetricSourceIdTypeMappingArgs', 'MetricSourceIdTypeMappingArgsDict']]]] id_type_mappings: Array defining the mapping between Statsig unit IDs and their respective source columns.
        :param pulumi.Input[builtins.bool] is_read_only: Specifies if the source can only be edited via the Console API.
        :param pulumi.Input[builtins.str] name: The name of the metric source, serving as its primary identifier.
        :param pulumi.Input[Union['MetricSourceOwnerArgs', 'MetricSourceOwnerArgsDict']] owner: Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
        :param pulumi.Input[builtins.str] source_type: The type of source, indicating whether it is a database table or a custom query.
        :param pulumi.Input[builtins.str] sql: The SQL query or statement used to extract data from the metric source.
        :param pulumi.Input[builtins.str] table_name: The name of the database table if the source type is "table".
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] tags: Optional array of tags to categorize the metric source, facilitating easier organization and retrieval.
        :param pulumi.Input[builtins.bool] timestamp_as_day: Indicates whether the timestamp should be treated as a day-level granularity.
        :param pulumi.Input[builtins.str] timestamp_column: The name of the column containing timestamp data for the metric source.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MetricSourceState.__new__(_MetricSourceState)

        __props__.__dict__["custom_field_mappings"] = custom_field_mappings
        __props__.__dict__["description"] = description
        __props__.__dict__["id_type_mappings"] = id_type_mappings
        __props__.__dict__["is_read_only"] = is_read_only
        __props__.__dict__["name"] = name
        __props__.__dict__["owner"] = owner
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["sql"] = sql
        __props__.__dict__["table_name"] = table_name
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timestamp_as_day"] = timestamp_as_day
        __props__.__dict__["timestamp_column"] = timestamp_column
        return MetricSource(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="customFieldMappings")
    def custom_field_mappings(self) -> pulumi.Output[Sequence['outputs.MetricSourceCustomFieldMapping']]:
        """
        Optional array defining mappings for custom fields using specific formulas.
        """
        return pulumi.get(self, "custom_field_mappings")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        """
        An optional description for the metric source, providing context and details about its purpose and usage.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="idTypeMappings")
    def id_type_mappings(self) -> pulumi.Output[Sequence['outputs.MetricSourceIdTypeMapping']]:
        """
        Array defining the mapping between Statsig unit IDs and their respective source columns.
        """
        return pulumi.get(self, "id_type_mappings")

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> pulumi.Output[builtins.bool]:
        """
        Specifies if the source can only be edited via the Console API.
        """
        return pulumi.get(self, "is_read_only")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the metric source, serving as its primary identifier.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output['outputs.MetricSourceOwner']:
        """
        Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[builtins.str]:
        """
        The type of source, indicating whether it is a database table or a custom query.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def sql(self) -> pulumi.Output[builtins.str]:
        """
        The SQL query or statement used to extract data from the metric source.
        """
        return pulumi.get(self, "sql")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the database table if the source type is "table".
        """
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Optional array of tags to categorize the metric source, facilitating easier organization and retrieval.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timestampAsDay")
    def timestamp_as_day(self) -> pulumi.Output[builtins.bool]:
        """
        Indicates whether the timestamp should be treated as a day-level granularity.
        """
        return pulumi.get(self, "timestamp_as_day")

    @property
    @pulumi.getter(name="timestampColumn")
    def timestamp_column(self) -> pulumi.Output[builtins.str]:
        """
        The name of the column containing timestamp data for the metric source.
        """
        return pulumi.get(self, "timestamp_column")

