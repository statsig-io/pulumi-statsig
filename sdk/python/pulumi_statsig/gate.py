# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GateArgs', 'Gate']

@pulumi.input_type
class GateArgs:
    def __init__(__self__, *,
                 creator_email: Optional[pulumi.Input[builtins.str]] = None,
                 creator_id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 id_type: Optional[pulumi.Input[builtins.str]] = None,
                 is_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 measure_metric_lifts: Optional[pulumi.Input[builtins.bool]] = None,
                 monitoring_metrics: Optional[pulumi.Input[Sequence[pulumi.Input['GateMonitoringMetricArgs']]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['GateRuleArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 target_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 team: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Gate resource.
        :param pulumi.Input[builtins.str] name: id
        """
        if creator_email is not None:
            pulumi.set(__self__, "creator_email", creator_email)
        if creator_id is not None:
            pulumi.set(__self__, "creator_id", creator_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id_type is not None:
            pulumi.set(__self__, "id_type", id_type)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if measure_metric_lifts is not None:
            pulumi.set(__self__, "measure_metric_lifts", measure_metric_lifts)
        if monitoring_metrics is not None:
            pulumi.set(__self__, "monitoring_metrics", monitoring_metrics)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_apps is not None:
            pulumi.set(__self__, "target_apps", target_apps)
        if team is not None:
            pulumi.set(__self__, "team", team)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="creatorEmail")
    def creator_email(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "creator_email")

    @creator_email.setter
    def creator_email(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "creator_email", value)

    @property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "creator_id")

    @creator_id.setter
    def creator_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "creator_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="idType")
    def id_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id_type")

    @id_type.setter
    def id_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id_type", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="measureMetricLifts")
    def measure_metric_lifts(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "measure_metric_lifts")

    @measure_metric_lifts.setter
    def measure_metric_lifts(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "measure_metric_lifts", value)

    @property
    @pulumi.getter(name="monitoringMetrics")
    def monitoring_metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GateMonitoringMetricArgs']]]]:
        return pulumi.get(self, "monitoring_metrics")

    @monitoring_metrics.setter
    def monitoring_metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GateMonitoringMetricArgs']]]]):
        pulumi.set(self, "monitoring_metrics", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        id
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GateRuleArgs']]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GateRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="targetApps")
    def target_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "target_apps")

    @target_apps.setter
    def target_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "target_apps", value)

    @property
    @pulumi.getter
    def team(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "team")

    @team.setter
    def team(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "team", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _GateState:
    def __init__(__self__, *,
                 creator_email: Optional[pulumi.Input[builtins.str]] = None,
                 creator_id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 id_type: Optional[pulumi.Input[builtins.str]] = None,
                 is_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 measure_metric_lifts: Optional[pulumi.Input[builtins.bool]] = None,
                 monitoring_metrics: Optional[pulumi.Input[Sequence[pulumi.Input['GateMonitoringMetricArgs']]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['GateRuleArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 target_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 team: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Gate resources.
        :param pulumi.Input[builtins.str] name: id
        """
        if creator_email is not None:
            pulumi.set(__self__, "creator_email", creator_email)
        if creator_id is not None:
            pulumi.set(__self__, "creator_id", creator_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id_type is not None:
            pulumi.set(__self__, "id_type", id_type)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if measure_metric_lifts is not None:
            pulumi.set(__self__, "measure_metric_lifts", measure_metric_lifts)
        if monitoring_metrics is not None:
            pulumi.set(__self__, "monitoring_metrics", monitoring_metrics)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_apps is not None:
            pulumi.set(__self__, "target_apps", target_apps)
        if team is not None:
            pulumi.set(__self__, "team", team)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="creatorEmail")
    def creator_email(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "creator_email")

    @creator_email.setter
    def creator_email(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "creator_email", value)

    @property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "creator_id")

    @creator_id.setter
    def creator_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "creator_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="idType")
    def id_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id_type")

    @id_type.setter
    def id_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id_type", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="measureMetricLifts")
    def measure_metric_lifts(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "measure_metric_lifts")

    @measure_metric_lifts.setter
    def measure_metric_lifts(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "measure_metric_lifts", value)

    @property
    @pulumi.getter(name="monitoringMetrics")
    def monitoring_metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GateMonitoringMetricArgs']]]]:
        return pulumi.get(self, "monitoring_metrics")

    @monitoring_metrics.setter
    def monitoring_metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GateMonitoringMetricArgs']]]]):
        pulumi.set(self, "monitoring_metrics", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        id
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GateRuleArgs']]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GateRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="targetApps")
    def target_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "target_apps")

    @target_apps.setter
    def target_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "target_apps", value)

    @property
    @pulumi.getter
    def team(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "team")

    @team.setter
    def team(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "team", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("statsig:index/gate:Gate")
class Gate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 creator_email: Optional[pulumi.Input[builtins.str]] = None,
                 creator_id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 id_type: Optional[pulumi.Input[builtins.str]] = None,
                 is_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 measure_metric_lifts: Optional[pulumi.Input[builtins.bool]] = None,
                 monitoring_metrics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GateMonitoringMetricArgs', 'GateMonitoringMetricArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GateRuleArgs', 'GateRuleArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 target_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 team: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        This resource allows you to configure gates for your Statsig project.

        To learn more about gates, see [Gates Documentation](https://docs.statsig.com/feature-flags/)

        To learn more about the API powering this resource, see [Gates API Documentation](https://docs.statsig.com/console-api/gates)

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] name: id
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[GateArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows you to configure gates for your Statsig project.

        To learn more about gates, see [Gates Documentation](https://docs.statsig.com/feature-flags/)

        To learn more about the API powering this resource, see [Gates API Documentation](https://docs.statsig.com/console-api/gates)

        :param str resource_name: The name of the resource.
        :param GateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 creator_email: Optional[pulumi.Input[builtins.str]] = None,
                 creator_id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 id_type: Optional[pulumi.Input[builtins.str]] = None,
                 is_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 measure_metric_lifts: Optional[pulumi.Input[builtins.bool]] = None,
                 monitoring_metrics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GateMonitoringMetricArgs', 'GateMonitoringMetricArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GateRuleArgs', 'GateRuleArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 target_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 team: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GateArgs.__new__(GateArgs)

            __props__.__dict__["creator_email"] = creator_email
            __props__.__dict__["creator_id"] = creator_id
            __props__.__dict__["description"] = description
            __props__.__dict__["id_type"] = id_type
            __props__.__dict__["is_enabled"] = is_enabled
            __props__.__dict__["measure_metric_lifts"] = measure_metric_lifts
            __props__.__dict__["monitoring_metrics"] = monitoring_metrics
            __props__.__dict__["name"] = name
            __props__.__dict__["rules"] = rules
            __props__.__dict__["tags"] = tags
            __props__.__dict__["target_apps"] = target_apps
            __props__.__dict__["team"] = team
            __props__.__dict__["type"] = type
        super(Gate, __self__).__init__(
            'statsig:index/gate:Gate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            creator_email: Optional[pulumi.Input[builtins.str]] = None,
            creator_id: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            id_type: Optional[pulumi.Input[builtins.str]] = None,
            is_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            measure_metric_lifts: Optional[pulumi.Input[builtins.bool]] = None,
            monitoring_metrics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GateMonitoringMetricArgs', 'GateMonitoringMetricArgsDict']]]]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GateRuleArgs', 'GateRuleArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            target_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            team: Optional[pulumi.Input[builtins.str]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None) -> 'Gate':
        """
        Get an existing Gate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] name: id
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GateState.__new__(_GateState)

        __props__.__dict__["creator_email"] = creator_email
        __props__.__dict__["creator_id"] = creator_id
        __props__.__dict__["description"] = description
        __props__.__dict__["id_type"] = id_type
        __props__.__dict__["is_enabled"] = is_enabled
        __props__.__dict__["measure_metric_lifts"] = measure_metric_lifts
        __props__.__dict__["monitoring_metrics"] = monitoring_metrics
        __props__.__dict__["name"] = name
        __props__.__dict__["rules"] = rules
        __props__.__dict__["tags"] = tags
        __props__.__dict__["target_apps"] = target_apps
        __props__.__dict__["team"] = team
        __props__.__dict__["type"] = type
        return Gate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="creatorEmail")
    def creator_email(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "creator_email")

    @property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "creator_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="idType")
    def id_type(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "id_type")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="measureMetricLifts")
    def measure_metric_lifts(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "measure_metric_lifts")

    @property
    @pulumi.getter(name="monitoringMetrics")
    def monitoring_metrics(self) -> pulumi.Output[Sequence['outputs.GateMonitoringMetric']]:
        return pulumi.get(self, "monitoring_metrics")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        id
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Sequence['outputs.GateRule']]:
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetApps")
    def target_apps(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "target_apps")

    @property
    @pulumi.getter
    def team(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "team")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "type")

