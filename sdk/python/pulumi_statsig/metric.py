# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MetricArgs', 'Metric']

@pulumi.input_type
class MetricArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[builtins.str],
                 custom_roll_up_end: Optional[pulumi.Input[builtins.float]] = None,
                 custom_roll_up_start: Optional[pulumi.Input[builtins.float]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 directionality: Optional[pulumi.Input[builtins.str]] = None,
                 dry_run: Optional[pulumi.Input[builtins.bool]] = None,
                 funnel_count_distinct: Optional[pulumi.Input[builtins.str]] = None,
                 funnel_event_lists: Optional[pulumi.Input[Sequence[pulumi.Input['MetricFunnelEventListArgs']]]] = None,
                 is_permanent: Optional[pulumi.Input[builtins.bool]] = None,
                 is_read_only: Optional[pulumi.Input[builtins.bool]] = None,
                 is_verified: Optional[pulumi.Input[builtins.bool]] = None,
                 metric_component_metrics: Optional[pulumi.Input[Sequence[pulumi.Input['MetricMetricComponentMetricArgs']]]] = None,
                 metric_events: Optional[pulumi.Input[Sequence[pulumi.Input['MetricMetricEventArgs']]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 rollup_time_window: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 team: Optional[pulumi.Input[builtins.str]] = None,
                 team_id: Optional[pulumi.Input[builtins.str]] = None,
                 unit_types: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 warehouse_native: Optional[pulumi.Input['MetricWarehouseNativeArgs']] = None):
        """
        The set of arguments for constructing a Metric resource.
        :param pulumi.Input[builtins.str] type: The type of the metric. Allowed values include sum, ratio, mean, event*count*sum, composite, composite*sum, undefined, funnel, user*warehouse.
        :param pulumi.Input[builtins.float] custom_roll_up_end: Custom time window end date in days since exposure.
        :param pulumi.Input[builtins.float] custom_roll_up_start: Custom time window start date in days since exposure.
        :param pulumi.Input[builtins.str] description: A description of the new metric, providing context and purpose.
        :param pulumi.Input[builtins.str] directionality: Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
        :param pulumi.Input[builtins.bool] dry_run: Skips persisting the metric (used to validate that inputs are correct)
        :param pulumi.Input[builtins.str] funnel_count_distinct: Specifies whether to count events or distinct users for the funnel metric.
        :param pulumi.Input[Sequence[pulumi.Input['MetricFunnelEventListArgs']]] funnel_event_lists: List of events used to create funnel metrics.
        :param pulumi.Input[builtins.bool] is_permanent: Indicates whether the metric is permanent and should not be deleted.
        :param pulumi.Input[builtins.bool] is_read_only: Set to true to make the metric definition editable only from the Console API.
        :param pulumi.Input[builtins.bool] is_verified: Marks the metric as verified for internal trustworthiness.
        :param pulumi.Input[Sequence[pulumi.Input['MetricMetricComponentMetricArgs']]] metric_component_metrics: List of input metrics used to calculate the new metric for composite types.
        :param pulumi.Input[Sequence[pulumi.Input['MetricMetricEventArgs']]] metric_events: An array of event definitions used to compute the metric.
        :param pulumi.Input[builtins.str] name: The name of the new metric, which identifies it within the system.
        :param pulumi.Input[builtins.str] rollup_time_window: Time window for the metric rollup. Specify "custom" for a customized time window.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] tags: Tags associated with the metric for categorization and searchability.
        :param pulumi.Input[builtins.str] team: The team associated with the metric, applicable for enterprise environments.
        :param pulumi.Input[builtins.str] team_id: The team ID associated with the metric, applicable for enterprise environments.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] unit_types: Array of unit types associated with the metric, such as stableID or userID.
        :param pulumi.Input['MetricWarehouseNativeArgs'] warehouse_native: Defines warehouse native metrics for advanced configurations.
        """
        pulumi.set(__self__, "type", type)
        if custom_roll_up_end is not None:
            pulumi.set(__self__, "custom_roll_up_end", custom_roll_up_end)
        if custom_roll_up_start is not None:
            pulumi.set(__self__, "custom_roll_up_start", custom_roll_up_start)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if directionality is not None:
            pulumi.set(__self__, "directionality", directionality)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if funnel_count_distinct is not None:
            pulumi.set(__self__, "funnel_count_distinct", funnel_count_distinct)
        if funnel_event_lists is not None:
            pulumi.set(__self__, "funnel_event_lists", funnel_event_lists)
        if is_permanent is not None:
            pulumi.set(__self__, "is_permanent", is_permanent)
        if is_read_only is not None:
            pulumi.set(__self__, "is_read_only", is_read_only)
        if is_verified is not None:
            pulumi.set(__self__, "is_verified", is_verified)
        if metric_component_metrics is not None:
            pulumi.set(__self__, "metric_component_metrics", metric_component_metrics)
        if metric_events is not None:
            pulumi.set(__self__, "metric_events", metric_events)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rollup_time_window is not None:
            pulumi.set(__self__, "rollup_time_window", rollup_time_window)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if team is not None:
            pulumi.set(__self__, "team", team)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)
        if unit_types is not None:
            pulumi.set(__self__, "unit_types", unit_types)
        if warehouse_native is not None:
            pulumi.set(__self__, "warehouse_native", warehouse_native)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        The type of the metric. Allowed values include sum, ratio, mean, event*count*sum, composite, composite*sum, undefined, funnel, user*warehouse.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="customRollUpEnd")
    def custom_roll_up_end(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Custom time window end date in days since exposure.
        """
        return pulumi.get(self, "custom_roll_up_end")

    @custom_roll_up_end.setter
    def custom_roll_up_end(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "custom_roll_up_end", value)

    @property
    @pulumi.getter(name="customRollUpStart")
    def custom_roll_up_start(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Custom time window start date in days since exposure.
        """
        return pulumi.get(self, "custom_roll_up_start")

    @custom_roll_up_start.setter
    def custom_roll_up_start(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "custom_roll_up_start", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A description of the new metric, providing context and purpose.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def directionality(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
        """
        return pulumi.get(self, "directionality")

    @directionality.setter
    def directionality(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "directionality", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Skips persisting the metric (used to validate that inputs are correct)
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter(name="funnelCountDistinct")
    def funnel_count_distinct(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies whether to count events or distinct users for the funnel metric.
        """
        return pulumi.get(self, "funnel_count_distinct")

    @funnel_count_distinct.setter
    def funnel_count_distinct(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "funnel_count_distinct", value)

    @property
    @pulumi.getter(name="funnelEventLists")
    def funnel_event_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MetricFunnelEventListArgs']]]]:
        """
        List of events used to create funnel metrics.
        """
        return pulumi.get(self, "funnel_event_lists")

    @funnel_event_lists.setter
    def funnel_event_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MetricFunnelEventListArgs']]]]):
        pulumi.set(self, "funnel_event_lists", value)

    @property
    @pulumi.getter(name="isPermanent")
    def is_permanent(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether the metric is permanent and should not be deleted.
        """
        return pulumi.get(self, "is_permanent")

    @is_permanent.setter
    def is_permanent(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_permanent", value)

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Set to true to make the metric definition editable only from the Console API.
        """
        return pulumi.get(self, "is_read_only")

    @is_read_only.setter
    def is_read_only(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_read_only", value)

    @property
    @pulumi.getter(name="isVerified")
    def is_verified(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Marks the metric as verified for internal trustworthiness.
        """
        return pulumi.get(self, "is_verified")

    @is_verified.setter
    def is_verified(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_verified", value)

    @property
    @pulumi.getter(name="metricComponentMetrics")
    def metric_component_metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MetricMetricComponentMetricArgs']]]]:
        """
        List of input metrics used to calculate the new metric for composite types.
        """
        return pulumi.get(self, "metric_component_metrics")

    @metric_component_metrics.setter
    def metric_component_metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MetricMetricComponentMetricArgs']]]]):
        pulumi.set(self, "metric_component_metrics", value)

    @property
    @pulumi.getter(name="metricEvents")
    def metric_events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MetricMetricEventArgs']]]]:
        """
        An array of event definitions used to compute the metric.
        """
        return pulumi.get(self, "metric_events")

    @metric_events.setter
    def metric_events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MetricMetricEventArgs']]]]):
        pulumi.set(self, "metric_events", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the new metric, which identifies it within the system.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="rollupTimeWindow")
    def rollup_time_window(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Time window for the metric rollup. Specify "custom" for a customized time window.
        """
        return pulumi.get(self, "rollup_time_window")

    @rollup_time_window.setter
    def rollup_time_window(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rollup_time_window", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Tags associated with the metric for categorization and searchability.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def team(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The team associated with the metric, applicable for enterprise environments.
        """
        return pulumi.get(self, "team")

    @team.setter
    def team(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "team", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The team ID associated with the metric, applicable for enterprise environments.
        """
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "team_id", value)

    @property
    @pulumi.getter(name="unitTypes")
    def unit_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Array of unit types associated with the metric, such as stableID or userID.
        """
        return pulumi.get(self, "unit_types")

    @unit_types.setter
    def unit_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "unit_types", value)

    @property
    @pulumi.getter(name="warehouseNative")
    def warehouse_native(self) -> Optional[pulumi.Input['MetricWarehouseNativeArgs']]:
        """
        Defines warehouse native metrics for advanced configurations.
        """
        return pulumi.get(self, "warehouse_native")

    @warehouse_native.setter
    def warehouse_native(self, value: Optional[pulumi.Input['MetricWarehouseNativeArgs']]):
        pulumi.set(self, "warehouse_native", value)


@pulumi.input_type
class _MetricState:
    def __init__(__self__, *,
                 custom_roll_up_end: Optional[pulumi.Input[builtins.float]] = None,
                 custom_roll_up_start: Optional[pulumi.Input[builtins.float]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 directionality: Optional[pulumi.Input[builtins.str]] = None,
                 dry_run: Optional[pulumi.Input[builtins.bool]] = None,
                 funnel_count_distinct: Optional[pulumi.Input[builtins.str]] = None,
                 funnel_event_lists: Optional[pulumi.Input[Sequence[pulumi.Input['MetricFunnelEventListArgs']]]] = None,
                 is_permanent: Optional[pulumi.Input[builtins.bool]] = None,
                 is_read_only: Optional[pulumi.Input[builtins.bool]] = None,
                 is_verified: Optional[pulumi.Input[builtins.bool]] = None,
                 metric_component_metrics: Optional[pulumi.Input[Sequence[pulumi.Input['MetricMetricComponentMetricArgs']]]] = None,
                 metric_events: Optional[pulumi.Input[Sequence[pulumi.Input['MetricMetricEventArgs']]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 rollup_time_window: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 team: Optional[pulumi.Input[builtins.str]] = None,
                 team_id: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 unit_types: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 warehouse_native: Optional[pulumi.Input['MetricWarehouseNativeArgs']] = None):
        """
        Input properties used for looking up and filtering Metric resources.
        :param pulumi.Input[builtins.float] custom_roll_up_end: Custom time window end date in days since exposure.
        :param pulumi.Input[builtins.float] custom_roll_up_start: Custom time window start date in days since exposure.
        :param pulumi.Input[builtins.str] description: A description of the new metric, providing context and purpose.
        :param pulumi.Input[builtins.str] directionality: Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
        :param pulumi.Input[builtins.bool] dry_run: Skips persisting the metric (used to validate that inputs are correct)
        :param pulumi.Input[builtins.str] funnel_count_distinct: Specifies whether to count events or distinct users for the funnel metric.
        :param pulumi.Input[Sequence[pulumi.Input['MetricFunnelEventListArgs']]] funnel_event_lists: List of events used to create funnel metrics.
        :param pulumi.Input[builtins.bool] is_permanent: Indicates whether the metric is permanent and should not be deleted.
        :param pulumi.Input[builtins.bool] is_read_only: Set to true to make the metric definition editable only from the Console API.
        :param pulumi.Input[builtins.bool] is_verified: Marks the metric as verified for internal trustworthiness.
        :param pulumi.Input[Sequence[pulumi.Input['MetricMetricComponentMetricArgs']]] metric_component_metrics: List of input metrics used to calculate the new metric for composite types.
        :param pulumi.Input[Sequence[pulumi.Input['MetricMetricEventArgs']]] metric_events: An array of event definitions used to compute the metric.
        :param pulumi.Input[builtins.str] name: The name of the new metric, which identifies it within the system.
        :param pulumi.Input[builtins.str] rollup_time_window: Time window for the metric rollup. Specify "custom" for a customized time window.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] tags: Tags associated with the metric for categorization and searchability.
        :param pulumi.Input[builtins.str] team: The team associated with the metric, applicable for enterprise environments.
        :param pulumi.Input[builtins.str] team_id: The team ID associated with the metric, applicable for enterprise environments.
        :param pulumi.Input[builtins.str] type: The type of the metric. Allowed values include sum, ratio, mean, event*count*sum, composite, composite*sum, undefined, funnel, user*warehouse.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] unit_types: Array of unit types associated with the metric, such as stableID or userID.
        :param pulumi.Input['MetricWarehouseNativeArgs'] warehouse_native: Defines warehouse native metrics for advanced configurations.
        """
        if custom_roll_up_end is not None:
            pulumi.set(__self__, "custom_roll_up_end", custom_roll_up_end)
        if custom_roll_up_start is not None:
            pulumi.set(__self__, "custom_roll_up_start", custom_roll_up_start)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if directionality is not None:
            pulumi.set(__self__, "directionality", directionality)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if funnel_count_distinct is not None:
            pulumi.set(__self__, "funnel_count_distinct", funnel_count_distinct)
        if funnel_event_lists is not None:
            pulumi.set(__self__, "funnel_event_lists", funnel_event_lists)
        if is_permanent is not None:
            pulumi.set(__self__, "is_permanent", is_permanent)
        if is_read_only is not None:
            pulumi.set(__self__, "is_read_only", is_read_only)
        if is_verified is not None:
            pulumi.set(__self__, "is_verified", is_verified)
        if metric_component_metrics is not None:
            pulumi.set(__self__, "metric_component_metrics", metric_component_metrics)
        if metric_events is not None:
            pulumi.set(__self__, "metric_events", metric_events)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rollup_time_window is not None:
            pulumi.set(__self__, "rollup_time_window", rollup_time_window)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if team is not None:
            pulumi.set(__self__, "team", team)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit_types is not None:
            pulumi.set(__self__, "unit_types", unit_types)
        if warehouse_native is not None:
            pulumi.set(__self__, "warehouse_native", warehouse_native)

    @property
    @pulumi.getter(name="customRollUpEnd")
    def custom_roll_up_end(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Custom time window end date in days since exposure.
        """
        return pulumi.get(self, "custom_roll_up_end")

    @custom_roll_up_end.setter
    def custom_roll_up_end(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "custom_roll_up_end", value)

    @property
    @pulumi.getter(name="customRollUpStart")
    def custom_roll_up_start(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Custom time window start date in days since exposure.
        """
        return pulumi.get(self, "custom_roll_up_start")

    @custom_roll_up_start.setter
    def custom_roll_up_start(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "custom_roll_up_start", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A description of the new metric, providing context and purpose.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def directionality(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
        """
        return pulumi.get(self, "directionality")

    @directionality.setter
    def directionality(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "directionality", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Skips persisting the metric (used to validate that inputs are correct)
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter(name="funnelCountDistinct")
    def funnel_count_distinct(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies whether to count events or distinct users for the funnel metric.
        """
        return pulumi.get(self, "funnel_count_distinct")

    @funnel_count_distinct.setter
    def funnel_count_distinct(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "funnel_count_distinct", value)

    @property
    @pulumi.getter(name="funnelEventLists")
    def funnel_event_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MetricFunnelEventListArgs']]]]:
        """
        List of events used to create funnel metrics.
        """
        return pulumi.get(self, "funnel_event_lists")

    @funnel_event_lists.setter
    def funnel_event_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MetricFunnelEventListArgs']]]]):
        pulumi.set(self, "funnel_event_lists", value)

    @property
    @pulumi.getter(name="isPermanent")
    def is_permanent(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether the metric is permanent and should not be deleted.
        """
        return pulumi.get(self, "is_permanent")

    @is_permanent.setter
    def is_permanent(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_permanent", value)

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Set to true to make the metric definition editable only from the Console API.
        """
        return pulumi.get(self, "is_read_only")

    @is_read_only.setter
    def is_read_only(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_read_only", value)

    @property
    @pulumi.getter(name="isVerified")
    def is_verified(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Marks the metric as verified for internal trustworthiness.
        """
        return pulumi.get(self, "is_verified")

    @is_verified.setter
    def is_verified(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_verified", value)

    @property
    @pulumi.getter(name="metricComponentMetrics")
    def metric_component_metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MetricMetricComponentMetricArgs']]]]:
        """
        List of input metrics used to calculate the new metric for composite types.
        """
        return pulumi.get(self, "metric_component_metrics")

    @metric_component_metrics.setter
    def metric_component_metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MetricMetricComponentMetricArgs']]]]):
        pulumi.set(self, "metric_component_metrics", value)

    @property
    @pulumi.getter(name="metricEvents")
    def metric_events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MetricMetricEventArgs']]]]:
        """
        An array of event definitions used to compute the metric.
        """
        return pulumi.get(self, "metric_events")

    @metric_events.setter
    def metric_events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MetricMetricEventArgs']]]]):
        pulumi.set(self, "metric_events", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the new metric, which identifies it within the system.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="rollupTimeWindow")
    def rollup_time_window(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Time window for the metric rollup. Specify "custom" for a customized time window.
        """
        return pulumi.get(self, "rollup_time_window")

    @rollup_time_window.setter
    def rollup_time_window(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rollup_time_window", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Tags associated with the metric for categorization and searchability.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def team(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The team associated with the metric, applicable for enterprise environments.
        """
        return pulumi.get(self, "team")

    @team.setter
    def team(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "team", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The team ID associated with the metric, applicable for enterprise environments.
        """
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "team_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of the metric. Allowed values include sum, ratio, mean, event*count*sum, composite, composite*sum, undefined, funnel, user*warehouse.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="unitTypes")
    def unit_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Array of unit types associated with the metric, such as stableID or userID.
        """
        return pulumi.get(self, "unit_types")

    @unit_types.setter
    def unit_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "unit_types", value)

    @property
    @pulumi.getter(name="warehouseNative")
    def warehouse_native(self) -> Optional[pulumi.Input['MetricWarehouseNativeArgs']]:
        """
        Defines warehouse native metrics for advanced configurations.
        """
        return pulumi.get(self, "warehouse_native")

    @warehouse_native.setter
    def warehouse_native(self, value: Optional[pulumi.Input['MetricWarehouseNativeArgs']]):
        pulumi.set(self, "warehouse_native", value)


@pulumi.type_token("statsig:index/metric:Metric")
class Metric(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_roll_up_end: Optional[pulumi.Input[builtins.float]] = None,
                 custom_roll_up_start: Optional[pulumi.Input[builtins.float]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 directionality: Optional[pulumi.Input[builtins.str]] = None,
                 dry_run: Optional[pulumi.Input[builtins.bool]] = None,
                 funnel_count_distinct: Optional[pulumi.Input[builtins.str]] = None,
                 funnel_event_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricFunnelEventListArgs', 'MetricFunnelEventListArgsDict']]]]] = None,
                 is_permanent: Optional[pulumi.Input[builtins.bool]] = None,
                 is_read_only: Optional[pulumi.Input[builtins.bool]] = None,
                 is_verified: Optional[pulumi.Input[builtins.bool]] = None,
                 metric_component_metrics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricMetricComponentMetricArgs', 'MetricMetricComponentMetricArgsDict']]]]] = None,
                 metric_events: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricMetricEventArgs', 'MetricMetricEventArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 rollup_time_window: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 team: Optional[pulumi.Input[builtins.str]] = None,
                 team_id: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 unit_types: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 warehouse_native: Optional[pulumi.Input[Union['MetricWarehouseNativeArgs', 'MetricWarehouseNativeArgsDict']]] = None,
                 __props__=None):
        """
        This resource allows you to configure metrics for your Statsig project.

        To learn more about metrics, see [Metrics Documentation](https://docs.statsig.com/metrics/101)

        To learn more about the API powering this resource, see [Metrics API Documentation](https://docs.statsig.com/console-api/metrics)

        > Note: [Warehouse Native](https://docs.statsig.com/statsig-warehouse-native/introduction/) metrics can only be used in Warehouse Native projects

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.float] custom_roll_up_end: Custom time window end date in days since exposure.
        :param pulumi.Input[builtins.float] custom_roll_up_start: Custom time window start date in days since exposure.
        :param pulumi.Input[builtins.str] description: A description of the new metric, providing context and purpose.
        :param pulumi.Input[builtins.str] directionality: Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
        :param pulumi.Input[builtins.bool] dry_run: Skips persisting the metric (used to validate that inputs are correct)
        :param pulumi.Input[builtins.str] funnel_count_distinct: Specifies whether to count events or distinct users for the funnel metric.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MetricFunnelEventListArgs', 'MetricFunnelEventListArgsDict']]]] funnel_event_lists: List of events used to create funnel metrics.
        :param pulumi.Input[builtins.bool] is_permanent: Indicates whether the metric is permanent and should not be deleted.
        :param pulumi.Input[builtins.bool] is_read_only: Set to true to make the metric definition editable only from the Console API.
        :param pulumi.Input[builtins.bool] is_verified: Marks the metric as verified for internal trustworthiness.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MetricMetricComponentMetricArgs', 'MetricMetricComponentMetricArgsDict']]]] metric_component_metrics: List of input metrics used to calculate the new metric for composite types.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MetricMetricEventArgs', 'MetricMetricEventArgsDict']]]] metric_events: An array of event definitions used to compute the metric.
        :param pulumi.Input[builtins.str] name: The name of the new metric, which identifies it within the system.
        :param pulumi.Input[builtins.str] rollup_time_window: Time window for the metric rollup. Specify "custom" for a customized time window.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] tags: Tags associated with the metric for categorization and searchability.
        :param pulumi.Input[builtins.str] team: The team associated with the metric, applicable for enterprise environments.
        :param pulumi.Input[builtins.str] team_id: The team ID associated with the metric, applicable for enterprise environments.
        :param pulumi.Input[builtins.str] type: The type of the metric. Allowed values include sum, ratio, mean, event*count*sum, composite, composite*sum, undefined, funnel, user*warehouse.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] unit_types: Array of unit types associated with the metric, such as stableID or userID.
        :param pulumi.Input[Union['MetricWarehouseNativeArgs', 'MetricWarehouseNativeArgsDict']] warehouse_native: Defines warehouse native metrics for advanced configurations.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MetricArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows you to configure metrics for your Statsig project.

        To learn more about metrics, see [Metrics Documentation](https://docs.statsig.com/metrics/101)

        To learn more about the API powering this resource, see [Metrics API Documentation](https://docs.statsig.com/console-api/metrics)

        > Note: [Warehouse Native](https://docs.statsig.com/statsig-warehouse-native/introduction/) metrics can only be used in Warehouse Native projects

        :param str resource_name: The name of the resource.
        :param MetricArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MetricArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_roll_up_end: Optional[pulumi.Input[builtins.float]] = None,
                 custom_roll_up_start: Optional[pulumi.Input[builtins.float]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 directionality: Optional[pulumi.Input[builtins.str]] = None,
                 dry_run: Optional[pulumi.Input[builtins.bool]] = None,
                 funnel_count_distinct: Optional[pulumi.Input[builtins.str]] = None,
                 funnel_event_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricFunnelEventListArgs', 'MetricFunnelEventListArgsDict']]]]] = None,
                 is_permanent: Optional[pulumi.Input[builtins.bool]] = None,
                 is_read_only: Optional[pulumi.Input[builtins.bool]] = None,
                 is_verified: Optional[pulumi.Input[builtins.bool]] = None,
                 metric_component_metrics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricMetricComponentMetricArgs', 'MetricMetricComponentMetricArgsDict']]]]] = None,
                 metric_events: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricMetricEventArgs', 'MetricMetricEventArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 rollup_time_window: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 team: Optional[pulumi.Input[builtins.str]] = None,
                 team_id: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 unit_types: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 warehouse_native: Optional[pulumi.Input[Union['MetricWarehouseNativeArgs', 'MetricWarehouseNativeArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MetricArgs.__new__(MetricArgs)

            __props__.__dict__["custom_roll_up_end"] = custom_roll_up_end
            __props__.__dict__["custom_roll_up_start"] = custom_roll_up_start
            __props__.__dict__["description"] = description
            __props__.__dict__["directionality"] = directionality
            __props__.__dict__["dry_run"] = dry_run
            __props__.__dict__["funnel_count_distinct"] = funnel_count_distinct
            __props__.__dict__["funnel_event_lists"] = funnel_event_lists
            __props__.__dict__["is_permanent"] = is_permanent
            __props__.__dict__["is_read_only"] = is_read_only
            __props__.__dict__["is_verified"] = is_verified
            __props__.__dict__["metric_component_metrics"] = metric_component_metrics
            __props__.__dict__["metric_events"] = metric_events
            __props__.__dict__["name"] = name
            __props__.__dict__["rollup_time_window"] = rollup_time_window
            __props__.__dict__["tags"] = tags
            __props__.__dict__["team"] = team
            __props__.__dict__["team_id"] = team_id
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["unit_types"] = unit_types
            __props__.__dict__["warehouse_native"] = warehouse_native
        super(Metric, __self__).__init__(
            'statsig:index/metric:Metric',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            custom_roll_up_end: Optional[pulumi.Input[builtins.float]] = None,
            custom_roll_up_start: Optional[pulumi.Input[builtins.float]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            directionality: Optional[pulumi.Input[builtins.str]] = None,
            dry_run: Optional[pulumi.Input[builtins.bool]] = None,
            funnel_count_distinct: Optional[pulumi.Input[builtins.str]] = None,
            funnel_event_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricFunnelEventListArgs', 'MetricFunnelEventListArgsDict']]]]] = None,
            is_permanent: Optional[pulumi.Input[builtins.bool]] = None,
            is_read_only: Optional[pulumi.Input[builtins.bool]] = None,
            is_verified: Optional[pulumi.Input[builtins.bool]] = None,
            metric_component_metrics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricMetricComponentMetricArgs', 'MetricMetricComponentMetricArgsDict']]]]] = None,
            metric_events: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricMetricEventArgs', 'MetricMetricEventArgsDict']]]]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            rollup_time_window: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            team: Optional[pulumi.Input[builtins.str]] = None,
            team_id: Optional[pulumi.Input[builtins.str]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None,
            unit_types: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            warehouse_native: Optional[pulumi.Input[Union['MetricWarehouseNativeArgs', 'MetricWarehouseNativeArgsDict']]] = None) -> 'Metric':
        """
        Get an existing Metric resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.float] custom_roll_up_end: Custom time window end date in days since exposure.
        :param pulumi.Input[builtins.float] custom_roll_up_start: Custom time window start date in days since exposure.
        :param pulumi.Input[builtins.str] description: A description of the new metric, providing context and purpose.
        :param pulumi.Input[builtins.str] directionality: Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
        :param pulumi.Input[builtins.bool] dry_run: Skips persisting the metric (used to validate that inputs are correct)
        :param pulumi.Input[builtins.str] funnel_count_distinct: Specifies whether to count events or distinct users for the funnel metric.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MetricFunnelEventListArgs', 'MetricFunnelEventListArgsDict']]]] funnel_event_lists: List of events used to create funnel metrics.
        :param pulumi.Input[builtins.bool] is_permanent: Indicates whether the metric is permanent and should not be deleted.
        :param pulumi.Input[builtins.bool] is_read_only: Set to true to make the metric definition editable only from the Console API.
        :param pulumi.Input[builtins.bool] is_verified: Marks the metric as verified for internal trustworthiness.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MetricMetricComponentMetricArgs', 'MetricMetricComponentMetricArgsDict']]]] metric_component_metrics: List of input metrics used to calculate the new metric for composite types.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MetricMetricEventArgs', 'MetricMetricEventArgsDict']]]] metric_events: An array of event definitions used to compute the metric.
        :param pulumi.Input[builtins.str] name: The name of the new metric, which identifies it within the system.
        :param pulumi.Input[builtins.str] rollup_time_window: Time window for the metric rollup. Specify "custom" for a customized time window.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] tags: Tags associated with the metric for categorization and searchability.
        :param pulumi.Input[builtins.str] team: The team associated with the metric, applicable for enterprise environments.
        :param pulumi.Input[builtins.str] team_id: The team ID associated with the metric, applicable for enterprise environments.
        :param pulumi.Input[builtins.str] type: The type of the metric. Allowed values include sum, ratio, mean, event*count*sum, composite, composite*sum, undefined, funnel, user*warehouse.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] unit_types: Array of unit types associated with the metric, such as stableID or userID.
        :param pulumi.Input[Union['MetricWarehouseNativeArgs', 'MetricWarehouseNativeArgsDict']] warehouse_native: Defines warehouse native metrics for advanced configurations.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MetricState.__new__(_MetricState)

        __props__.__dict__["custom_roll_up_end"] = custom_roll_up_end
        __props__.__dict__["custom_roll_up_start"] = custom_roll_up_start
        __props__.__dict__["description"] = description
        __props__.__dict__["directionality"] = directionality
        __props__.__dict__["dry_run"] = dry_run
        __props__.__dict__["funnel_count_distinct"] = funnel_count_distinct
        __props__.__dict__["funnel_event_lists"] = funnel_event_lists
        __props__.__dict__["is_permanent"] = is_permanent
        __props__.__dict__["is_read_only"] = is_read_only
        __props__.__dict__["is_verified"] = is_verified
        __props__.__dict__["metric_component_metrics"] = metric_component_metrics
        __props__.__dict__["metric_events"] = metric_events
        __props__.__dict__["name"] = name
        __props__.__dict__["rollup_time_window"] = rollup_time_window
        __props__.__dict__["tags"] = tags
        __props__.__dict__["team"] = team
        __props__.__dict__["team_id"] = team_id
        __props__.__dict__["type"] = type
        __props__.__dict__["unit_types"] = unit_types
        __props__.__dict__["warehouse_native"] = warehouse_native
        return Metric(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="customRollUpEnd")
    def custom_roll_up_end(self) -> pulumi.Output[builtins.float]:
        """
        Custom time window end date in days since exposure.
        """
        return pulumi.get(self, "custom_roll_up_end")

    @property
    @pulumi.getter(name="customRollUpStart")
    def custom_roll_up_start(self) -> pulumi.Output[builtins.float]:
        """
        Custom time window start date in days since exposure.
        """
        return pulumi.get(self, "custom_roll_up_start")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        """
        A description of the new metric, providing context and purpose.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def directionality(self) -> pulumi.Output[builtins.str]:
        """
        Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
        """
        return pulumi.get(self, "directionality")

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> pulumi.Output[builtins.bool]:
        """
        Skips persisting the metric (used to validate that inputs are correct)
        """
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter(name="funnelCountDistinct")
    def funnel_count_distinct(self) -> pulumi.Output[builtins.str]:
        """
        Specifies whether to count events or distinct users for the funnel metric.
        """
        return pulumi.get(self, "funnel_count_distinct")

    @property
    @pulumi.getter(name="funnelEventLists")
    def funnel_event_lists(self) -> pulumi.Output[Sequence['outputs.MetricFunnelEventList']]:
        """
        List of events used to create funnel metrics.
        """
        return pulumi.get(self, "funnel_event_lists")

    @property
    @pulumi.getter(name="isPermanent")
    def is_permanent(self) -> pulumi.Output[builtins.bool]:
        """
        Indicates whether the metric is permanent and should not be deleted.
        """
        return pulumi.get(self, "is_permanent")

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> pulumi.Output[builtins.bool]:
        """
        Set to true to make the metric definition editable only from the Console API.
        """
        return pulumi.get(self, "is_read_only")

    @property
    @pulumi.getter(name="isVerified")
    def is_verified(self) -> pulumi.Output[builtins.bool]:
        """
        Marks the metric as verified for internal trustworthiness.
        """
        return pulumi.get(self, "is_verified")

    @property
    @pulumi.getter(name="metricComponentMetrics")
    def metric_component_metrics(self) -> pulumi.Output[Sequence['outputs.MetricMetricComponentMetric']]:
        """
        List of input metrics used to calculate the new metric for composite types.
        """
        return pulumi.get(self, "metric_component_metrics")

    @property
    @pulumi.getter(name="metricEvents")
    def metric_events(self) -> pulumi.Output[Sequence['outputs.MetricMetricEvent']]:
        """
        An array of event definitions used to compute the metric.
        """
        return pulumi.get(self, "metric_events")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the new metric, which identifies it within the system.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rollupTimeWindow")
    def rollup_time_window(self) -> pulumi.Output[builtins.str]:
        """
        Time window for the metric rollup. Specify "custom" for a customized time window.
        """
        return pulumi.get(self, "rollup_time_window")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Tags associated with the metric for categorization and searchability.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def team(self) -> pulumi.Output[builtins.str]:
        """
        The team associated with the metric, applicable for enterprise environments.
        """
        return pulumi.get(self, "team")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> pulumi.Output[builtins.str]:
        """
        The team ID associated with the metric, applicable for enterprise environments.
        """
        return pulumi.get(self, "team_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        The type of the metric. Allowed values include sum, ratio, mean, event*count*sum, composite, composite*sum, undefined, funnel, user*warehouse.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="unitTypes")
    def unit_types(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Array of unit types associated with the metric, such as stableID or userID.
        """
        return pulumi.get(self, "unit_types")

    @property
    @pulumi.getter(name="warehouseNative")
    def warehouse_native(self) -> pulumi.Output['outputs.MetricWarehouseNative']:
        """
        Defines warehouse native metrics for advanced configurations.
        """
        return pulumi.get(self, "warehouse_native")

