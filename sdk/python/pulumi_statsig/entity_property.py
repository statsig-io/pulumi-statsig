# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EntityPropertyArgs', 'EntityProperty']

@pulumi.input_type
class EntityPropertyArgs:
    def __init__(__self__, *,
                 id_type_mappings: pulumi.Input[Sequence[pulumi.Input['EntityPropertyIdTypeMappingArgs']]],
                 sql: pulumi.Input[builtins.str],
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 is_read_only: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 timestamp_as_day: Optional[pulumi.Input[builtins.bool]] = None,
                 timestamp_column: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a EntityProperty resource.
        :param pulumi.Input[Sequence[pulumi.Input['EntityPropertyIdTypeMappingArgs']]] id_type_mappings: Mappings of Statsig units to their columns.
        :param pulumi.Input[builtins.str] sql: SQL query defining the data source.
        :param pulumi.Input[builtins.str] description: Optional detailed context for the entity property source.
        :param pulumi.Input[builtins.bool] is_read_only: Specifies if the source can only be edited via the Console API.
        :param pulumi.Input[builtins.str] name: Unique identifier for the entity property source.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] tags: Optional tags for categorization.
        :param pulumi.Input[builtins.bool] timestamp_as_day: Indicates if the timestamp is treated as a day.
        :param pulumi.Input[builtins.str] timestamp_column: Optional column name for timestamp.
        """
        pulumi.set(__self__, "id_type_mappings", id_type_mappings)
        pulumi.set(__self__, "sql", sql)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_read_only is not None:
            pulumi.set(__self__, "is_read_only", is_read_only)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timestamp_as_day is not None:
            pulumi.set(__self__, "timestamp_as_day", timestamp_as_day)
        if timestamp_column is not None:
            pulumi.set(__self__, "timestamp_column", timestamp_column)

    @property
    @pulumi.getter(name="idTypeMappings")
    def id_type_mappings(self) -> pulumi.Input[Sequence[pulumi.Input['EntityPropertyIdTypeMappingArgs']]]:
        """
        Mappings of Statsig units to their columns.
        """
        return pulumi.get(self, "id_type_mappings")

    @id_type_mappings.setter
    def id_type_mappings(self, value: pulumi.Input[Sequence[pulumi.Input['EntityPropertyIdTypeMappingArgs']]]):
        pulumi.set(self, "id_type_mappings", value)

    @property
    @pulumi.getter
    def sql(self) -> pulumi.Input[builtins.str]:
        """
        SQL query defining the data source.
        """
        return pulumi.get(self, "sql")

    @sql.setter
    def sql(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "sql", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional detailed context for the entity property source.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Specifies if the source can only be edited via the Console API.
        """
        return pulumi.get(self, "is_read_only")

    @is_read_only.setter
    def is_read_only(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_read_only", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Unique identifier for the entity property source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Optional tags for categorization.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="timestampAsDay")
    def timestamp_as_day(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates if the timestamp is treated as a day.
        """
        return pulumi.get(self, "timestamp_as_day")

    @timestamp_as_day.setter
    def timestamp_as_day(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "timestamp_as_day", value)

    @property
    @pulumi.getter(name="timestampColumn")
    def timestamp_column(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional column name for timestamp.
        """
        return pulumi.get(self, "timestamp_column")

    @timestamp_column.setter
    def timestamp_column(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "timestamp_column", value)


@pulumi.input_type
class _EntityPropertyState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 id_type_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['EntityPropertyIdTypeMappingArgs']]]] = None,
                 is_read_only: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 owner: Optional[pulumi.Input['EntityPropertyOwnerArgs']] = None,
                 sql: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 timestamp_as_day: Optional[pulumi.Input[builtins.bool]] = None,
                 timestamp_column: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering EntityProperty resources.
        :param pulumi.Input[builtins.str] description: Optional detailed context for the entity property source.
        :param pulumi.Input[Sequence[pulumi.Input['EntityPropertyIdTypeMappingArgs']]] id_type_mappings: Mappings of Statsig units to their columns.
        :param pulumi.Input[builtins.bool] is_read_only: Specifies if the source can only be edited via the Console API.
        :param pulumi.Input[builtins.str] name: Unique identifier for the entity property source.
        :param pulumi.Input['EntityPropertyOwnerArgs'] owner: Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
        :param pulumi.Input[builtins.str] sql: SQL query defining the data source.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] tags: Optional tags for categorization.
        :param pulumi.Input[builtins.bool] timestamp_as_day: Indicates if the timestamp is treated as a day.
        :param pulumi.Input[builtins.str] timestamp_column: Optional column name for timestamp.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id_type_mappings is not None:
            pulumi.set(__self__, "id_type_mappings", id_type_mappings)
        if is_read_only is not None:
            pulumi.set(__self__, "is_read_only", is_read_only)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if sql is not None:
            pulumi.set(__self__, "sql", sql)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timestamp_as_day is not None:
            pulumi.set(__self__, "timestamp_as_day", timestamp_as_day)
        if timestamp_column is not None:
            pulumi.set(__self__, "timestamp_column", timestamp_column)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional detailed context for the entity property source.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="idTypeMappings")
    def id_type_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EntityPropertyIdTypeMappingArgs']]]]:
        """
        Mappings of Statsig units to their columns.
        """
        return pulumi.get(self, "id_type_mappings")

    @id_type_mappings.setter
    def id_type_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EntityPropertyIdTypeMappingArgs']]]]):
        pulumi.set(self, "id_type_mappings", value)

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Specifies if the source can only be edited via the Console API.
        """
        return pulumi.get(self, "is_read_only")

    @is_read_only.setter
    def is_read_only(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_read_only", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Unique identifier for the entity property source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input['EntityPropertyOwnerArgs']]:
        """
        Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input['EntityPropertyOwnerArgs']]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def sql(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        SQL query defining the data source.
        """
        return pulumi.get(self, "sql")

    @sql.setter
    def sql(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sql", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Optional tags for categorization.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="timestampAsDay")
    def timestamp_as_day(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates if the timestamp is treated as a day.
        """
        return pulumi.get(self, "timestamp_as_day")

    @timestamp_as_day.setter
    def timestamp_as_day(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "timestamp_as_day", value)

    @property
    @pulumi.getter(name="timestampColumn")
    def timestamp_column(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional column name for timestamp.
        """
        return pulumi.get(self, "timestamp_column")

    @timestamp_column.setter
    def timestamp_column(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "timestamp_column", value)


@pulumi.type_token("statsig:index/entityProperty:EntityProperty")
class EntityProperty(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 id_type_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EntityPropertyIdTypeMappingArgs', 'EntityPropertyIdTypeMappingArgsDict']]]]] = None,
                 is_read_only: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 sql: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 timestamp_as_day: Optional[pulumi.Input[builtins.bool]] = None,
                 timestamp_column: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        This resource allows you to configure entity properties for your Statsig project.

        To learn more about entity properties, see [Entity Properties Documentation](https://docs.statsig.com/statsig-warehouse-native/features/entity-properties/)

        To learn more about the API powering this resource, see [Experiments API Documentation](https://docs.statsig.com/console-api/experiments)

        > Note: This resource is only available for [Warehouse Native](https://docs.statsig.com/statsig-warehouse-native/introduction/) projects

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: Optional detailed context for the entity property source.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EntityPropertyIdTypeMappingArgs', 'EntityPropertyIdTypeMappingArgsDict']]]] id_type_mappings: Mappings of Statsig units to their columns.
        :param pulumi.Input[builtins.bool] is_read_only: Specifies if the source can only be edited via the Console API.
        :param pulumi.Input[builtins.str] name: Unique identifier for the entity property source.
        :param pulumi.Input[builtins.str] sql: SQL query defining the data source.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] tags: Optional tags for categorization.
        :param pulumi.Input[builtins.bool] timestamp_as_day: Indicates if the timestamp is treated as a day.
        :param pulumi.Input[builtins.str] timestamp_column: Optional column name for timestamp.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EntityPropertyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows you to configure entity properties for your Statsig project.

        To learn more about entity properties, see [Entity Properties Documentation](https://docs.statsig.com/statsig-warehouse-native/features/entity-properties/)

        To learn more about the API powering this resource, see [Experiments API Documentation](https://docs.statsig.com/console-api/experiments)

        > Note: This resource is only available for [Warehouse Native](https://docs.statsig.com/statsig-warehouse-native/introduction/) projects

        :param str resource_name: The name of the resource.
        :param EntityPropertyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EntityPropertyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 id_type_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EntityPropertyIdTypeMappingArgs', 'EntityPropertyIdTypeMappingArgsDict']]]]] = None,
                 is_read_only: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 sql: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 timestamp_as_day: Optional[pulumi.Input[builtins.bool]] = None,
                 timestamp_column: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EntityPropertyArgs.__new__(EntityPropertyArgs)

            __props__.__dict__["description"] = description
            if id_type_mappings is None and not opts.urn:
                raise TypeError("Missing required property 'id_type_mappings'")
            __props__.__dict__["id_type_mappings"] = id_type_mappings
            __props__.__dict__["is_read_only"] = is_read_only
            __props__.__dict__["name"] = name
            if sql is None and not opts.urn:
                raise TypeError("Missing required property 'sql'")
            __props__.__dict__["sql"] = sql
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timestamp_as_day"] = timestamp_as_day
            __props__.__dict__["timestamp_column"] = timestamp_column
            __props__.__dict__["owner"] = None
        super(EntityProperty, __self__).__init__(
            'statsig:index/entityProperty:EntityProperty',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            id_type_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EntityPropertyIdTypeMappingArgs', 'EntityPropertyIdTypeMappingArgsDict']]]]] = None,
            is_read_only: Optional[pulumi.Input[builtins.bool]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            owner: Optional[pulumi.Input[Union['EntityPropertyOwnerArgs', 'EntityPropertyOwnerArgsDict']]] = None,
            sql: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            timestamp_as_day: Optional[pulumi.Input[builtins.bool]] = None,
            timestamp_column: Optional[pulumi.Input[builtins.str]] = None) -> 'EntityProperty':
        """
        Get an existing EntityProperty resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: Optional detailed context for the entity property source.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EntityPropertyIdTypeMappingArgs', 'EntityPropertyIdTypeMappingArgsDict']]]] id_type_mappings: Mappings of Statsig units to their columns.
        :param pulumi.Input[builtins.bool] is_read_only: Specifies if the source can only be edited via the Console API.
        :param pulumi.Input[builtins.str] name: Unique identifier for the entity property source.
        :param pulumi.Input[Union['EntityPropertyOwnerArgs', 'EntityPropertyOwnerArgsDict']] owner: Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
        :param pulumi.Input[builtins.str] sql: SQL query defining the data source.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] tags: Optional tags for categorization.
        :param pulumi.Input[builtins.bool] timestamp_as_day: Indicates if the timestamp is treated as a day.
        :param pulumi.Input[builtins.str] timestamp_column: Optional column name for timestamp.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EntityPropertyState.__new__(_EntityPropertyState)

        __props__.__dict__["description"] = description
        __props__.__dict__["id_type_mappings"] = id_type_mappings
        __props__.__dict__["is_read_only"] = is_read_only
        __props__.__dict__["name"] = name
        __props__.__dict__["owner"] = owner
        __props__.__dict__["sql"] = sql
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timestamp_as_day"] = timestamp_as_day
        __props__.__dict__["timestamp_column"] = timestamp_column
        return EntityProperty(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        """
        Optional detailed context for the entity property source.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="idTypeMappings")
    def id_type_mappings(self) -> pulumi.Output[Sequence['outputs.EntityPropertyIdTypeMapping']]:
        """
        Mappings of Statsig units to their columns.
        """
        return pulumi.get(self, "id_type_mappings")

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> pulumi.Output[builtins.bool]:
        """
        Specifies if the source can only be edited via the Console API.
        """
        return pulumi.get(self, "is_read_only")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Unique identifier for the entity property source.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output['outputs.EntityPropertyOwner']:
        """
        Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def sql(self) -> pulumi.Output[builtins.str]:
        """
        SQL query defining the data source.
        """
        return pulumi.get(self, "sql")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Optional tags for categorization.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timestampAsDay")
    def timestamp_as_day(self) -> pulumi.Output[builtins.bool]:
        """
        Indicates if the timestamp is treated as a day.
        """
        return pulumi.get(self, "timestamp_as_day")

    @property
    @pulumi.getter(name="timestampColumn")
    def timestamp_column(self) -> pulumi.Output[builtins.str]:
        """
        Optional column name for timestamp.
        """
        return pulumi.get(self, "timestamp_column")

